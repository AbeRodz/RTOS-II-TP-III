
grupo_5_tp_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082d4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08008484  08008484  00018484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800869c  0800869c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800869c  0800869c  0001869c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086a4  080086a4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086a4  080086a4  000186a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086a8  080086a8  000186a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080086ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004820  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004894  20004894  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b7e4  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000040f8  00000000  00000000  0003b8cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001848  00000000  00000000  0003f9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000012e7  00000000  00000000  00041210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00005c46  00000000  00000000  000424f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001bb7d  00000000  00000000  0004813d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ec8dc  00000000  00000000  00063cba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000072b4  00000000  00000000  00150598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000041  00000000  00000000  0015784c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800846c 	.word	0x0800846c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	0800846c 	.word	0x0800846c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 80005a0:	f006 fdb0 	bl	8007104 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a4:	f000 fd30 	bl	8001008 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a8:	f000 f814 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ac:	f000 f970 	bl	8000890 <MX_GPIO_Init>
  MX_ETH_Init();
 80005b0:	f000 f87a 	bl	80006a8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005b4:	f000 f914 	bl	80007e0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005b8:	f000 f93c 	bl	8000834 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80005bc:	f000 f8c2 	bl	8000744 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* Start timer */
	HAL_TIM_Base_Start_IT(&htim2);
 80005c0:	4803      	ldr	r0, [pc, #12]	; (80005d0 <main+0x34>)
 80005c2:	f002 f997 	bl	80028f4 <HAL_TIM_Base_Start_IT>
	
    /* add application, ... */
	app_init();
 80005c6:	f005 ffff 	bl	80065c8 <app_init>

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005ca:	f003 fb7c 	bl	8003cc6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ce:	e7fe      	b.n	80005ce <main+0x32>
 80005d0:	200002b8 	.word	0x200002b8

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	; 0x50
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	2230      	movs	r2, #48	; 0x30
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f007 f817 	bl	8007616 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	4b28      	ldr	r3, [pc, #160]	; (80006a0 <SystemClock_Config+0xcc>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	4a27      	ldr	r2, [pc, #156]	; (80006a0 <SystemClock_Config+0xcc>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	; 0x40
 8000608:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <SystemClock_Config+0xcc>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <SystemClock_Config+0xd0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a21      	ldr	r2, [pc, #132]	; (80006a4 <SystemClock_Config+0xd0>)
 800061e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <SystemClock_Config+0xd0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000630:	2301      	movs	r3, #1
 8000632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000634:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000638:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063a:	2302      	movs	r3, #2
 800063c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000642:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000644:	2304      	movs	r3, #4
 8000646:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000648:	23a8      	movs	r3, #168	; 0xa8
 800064a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064c:	2302      	movs	r3, #2
 800064e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000650:	2307      	movs	r3, #7
 8000652:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000654:	f107 0320 	add.w	r3, r7, #32
 8000658:	4618      	mov	r0, r3
 800065a:	f001 fc31 	bl	8001ec0 <HAL_RCC_OscConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000664:	f000 fa00 	bl	8000a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000668:	230f      	movs	r3, #15
 800066a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066c:	2302      	movs	r3, #2
 800066e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000674:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000678:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800067a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800067e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2105      	movs	r1, #5
 8000686:	4618      	mov	r0, r3
 8000688:	f001 fe92 	bl	80023b0 <HAL_RCC_ClockConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000692:	f000 f9e9 	bl	8000a68 <Error_Handler>
  }
}
 8000696:	bf00      	nop
 8000698:	3750      	adds	r7, #80	; 0x50
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006ac:	4b1f      	ldr	r3, [pc, #124]	; (800072c <MX_ETH_Init+0x84>)
 80006ae:	4a20      	ldr	r2, [pc, #128]	; (8000730 <MX_ETH_Init+0x88>)
 80006b0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006b2:	4b20      	ldr	r3, [pc, #128]	; (8000734 <MX_ETH_Init+0x8c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006b8:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <MX_ETH_Init+0x8c>)
 80006ba:	2280      	movs	r2, #128	; 0x80
 80006bc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006be:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <MX_ETH_Init+0x8c>)
 80006c0:	22e1      	movs	r2, #225	; 0xe1
 80006c2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006c4:	4b1b      	ldr	r3, [pc, #108]	; (8000734 <MX_ETH_Init+0x8c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006ca:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <MX_ETH_Init+0x8c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006d0:	4b18      	ldr	r3, [pc, #96]	; (8000734 <MX_ETH_Init+0x8c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006d6:	4b15      	ldr	r3, [pc, #84]	; (800072c <MX_ETH_Init+0x84>)
 80006d8:	4a16      	ldr	r2, [pc, #88]	; (8000734 <MX_ETH_Init+0x8c>)
 80006da:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006dc:	4b13      	ldr	r3, [pc, #76]	; (800072c <MX_ETH_Init+0x84>)
 80006de:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006e2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_ETH_Init+0x84>)
 80006e6:	4a14      	ldr	r2, [pc, #80]	; (8000738 <MX_ETH_Init+0x90>)
 80006e8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006ea:	4b10      	ldr	r3, [pc, #64]	; (800072c <MX_ETH_Init+0x84>)
 80006ec:	4a13      	ldr	r2, [pc, #76]	; (800073c <MX_ETH_Init+0x94>)
 80006ee:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006f0:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_ETH_Init+0x84>)
 80006f2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80006f6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006f8:	480c      	ldr	r0, [pc, #48]	; (800072c <MX_ETH_Init+0x84>)
 80006fa:	f000 fdcd 	bl	8001298 <HAL_ETH_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000704:	f000 f9b0 	bl	8000a68 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000708:	2238      	movs	r2, #56	; 0x38
 800070a:	2100      	movs	r1, #0
 800070c:	480c      	ldr	r0, [pc, #48]	; (8000740 <MX_ETH_Init+0x98>)
 800070e:	f006 ff82 	bl	8007616 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <MX_ETH_Init+0x98>)
 8000714:	2221      	movs	r2, #33	; 0x21
 8000716:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_ETH_Init+0x98>)
 800071a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800071e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <MX_ETH_Init+0x98>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000208 	.word	0x20000208
 8000730:	40028000 	.word	0x40028000
 8000734:	20000830 	.word	0x20000830
 8000738:	20000168 	.word	0x20000168
 800073c:	200000c8 	.word	0x200000c8
 8000740:	20000090 	.word	0x20000090

08000744 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800074a:	f107 0308 	add.w	r3, r7, #8
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000758:	463b      	mov	r3, r7
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000760:	4b1d      	ldr	r3, [pc, #116]	; (80007d8 <MX_TIM2_Init+0x94>)
 8000762:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000766:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 8000768:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <MX_TIM2_Init+0x94>)
 800076a:	2201      	movs	r2, #1
 800076c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076e:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <MX_TIM2_Init+0x94>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 84000-1;
 8000774:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <MX_TIM2_Init+0x94>)
 8000776:	4a19      	ldr	r2, [pc, #100]	; (80007dc <MX_TIM2_Init+0x98>)
 8000778:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800077a:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <MX_TIM2_Init+0x94>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000780:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <MX_TIM2_Init+0x94>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000786:	4814      	ldr	r0, [pc, #80]	; (80007d8 <MX_TIM2_Init+0x94>)
 8000788:	f002 f864 	bl	8002854 <HAL_TIM_Base_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000792:	f000 f969 	bl	8000a68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800079c:	f107 0308 	add.w	r3, r7, #8
 80007a0:	4619      	mov	r1, r3
 80007a2:	480d      	ldr	r0, [pc, #52]	; (80007d8 <MX_TIM2_Init+0x94>)
 80007a4:	f002 fa06 	bl	8002bb4 <HAL_TIM_ConfigClockSource>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80007ae:	f000 f95b 	bl	8000a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b2:	2300      	movs	r3, #0
 80007b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007ba:	463b      	mov	r3, r7
 80007bc:	4619      	mov	r1, r3
 80007be:	4806      	ldr	r0, [pc, #24]	; (80007d8 <MX_TIM2_Init+0x94>)
 80007c0:	f002 fc2e 	bl	8003020 <HAL_TIMEx_MasterConfigSynchronization>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80007ca:	f000 f94d 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200002b8 	.word	0x200002b8
 80007dc:	0001481f 	.word	0x0001481f

080007e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007e4:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_USART3_UART_Init+0x4c>)
 80007e6:	4a12      	ldr	r2, [pc, #72]	; (8000830 <MX_USART3_UART_Init+0x50>)
 80007e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <MX_USART3_UART_Init+0x4c>)
 80007ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_USART3_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_USART3_UART_Init+0x4c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <MX_USART3_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_USART3_UART_Init+0x4c>)
 8000806:	220c      	movs	r2, #12
 8000808:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <MX_USART3_UART_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_USART3_UART_Init+0x4c>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_USART3_UART_Init+0x4c>)
 8000818:	f002 fc92 	bl	8003140 <HAL_UART_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000822:	f000 f921 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000300 	.word	0x20000300
 8000830:	40004800 	.word	0x40004800

08000834 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000838:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800083e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000842:	2204      	movs	r2, #4
 8000844:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000848:	2202      	movs	r2, #2
 800084a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000854:	2202      	movs	r2, #2
 8000856:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085a:	2201      	movs	r2, #1
 800085c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086c:	2201      	movs	r2, #1
 800086e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000878:	f001 fa13 	bl	8001ca2 <HAL_PCD_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000882:	f000 f8f1 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000348 	.word	0x20000348

08000890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08c      	sub	sp, #48	; 0x30
 8000894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	61bb      	str	r3, [r7, #24]
 80008aa:	4b4c      	ldr	r3, [pc, #304]	; (80009dc <MX_GPIO_Init+0x14c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a4b      	ldr	r2, [pc, #300]	; (80009dc <MX_GPIO_Init+0x14c>)
 80008b0:	f043 0304 	orr.w	r3, r3, #4
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b49      	ldr	r3, [pc, #292]	; (80009dc <MX_GPIO_Init+0x14c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0304 	and.w	r3, r3, #4
 80008be:	61bb      	str	r3, [r7, #24]
 80008c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
 80008c6:	4b45      	ldr	r3, [pc, #276]	; (80009dc <MX_GPIO_Init+0x14c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a44      	ldr	r2, [pc, #272]	; (80009dc <MX_GPIO_Init+0x14c>)
 80008cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b42      	ldr	r3, [pc, #264]	; (80009dc <MX_GPIO_Init+0x14c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b3e      	ldr	r3, [pc, #248]	; (80009dc <MX_GPIO_Init+0x14c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a3d      	ldr	r2, [pc, #244]	; (80009dc <MX_GPIO_Init+0x14c>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b3b      	ldr	r3, [pc, #236]	; (80009dc <MX_GPIO_Init+0x14c>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b37      	ldr	r3, [pc, #220]	; (80009dc <MX_GPIO_Init+0x14c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a36      	ldr	r2, [pc, #216]	; (80009dc <MX_GPIO_Init+0x14c>)
 8000904:	f043 0302 	orr.w	r3, r3, #2
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b34      	ldr	r3, [pc, #208]	; (80009dc <MX_GPIO_Init+0x14c>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0302 	and.w	r3, r3, #2
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	4b30      	ldr	r3, [pc, #192]	; (80009dc <MX_GPIO_Init+0x14c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a2f      	ldr	r2, [pc, #188]	; (80009dc <MX_GPIO_Init+0x14c>)
 8000920:	f043 0308 	orr.w	r3, r3, #8
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b2d      	ldr	r3, [pc, #180]	; (80009dc <MX_GPIO_Init+0x14c>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0308 	and.w	r3, r3, #8
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b29      	ldr	r3, [pc, #164]	; (80009dc <MX_GPIO_Init+0x14c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a28      	ldr	r2, [pc, #160]	; (80009dc <MX_GPIO_Init+0x14c>)
 800093c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b26      	ldr	r3, [pc, #152]	; (80009dc <MX_GPIO_Init+0x14c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	f244 0181 	movw	r1, #16513	; 0x4081
 8000954:	4822      	ldr	r0, [pc, #136]	; (80009e0 <MX_GPIO_Init+0x150>)
 8000956:	f001 f98b 	bl	8001c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	2140      	movs	r1, #64	; 0x40
 800095e:	4821      	ldr	r0, [pc, #132]	; (80009e4 <MX_GPIO_Init+0x154>)
 8000960:	f001 f986 	bl	8001c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000964:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800096a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800096e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	481b      	ldr	r0, [pc, #108]	; (80009e8 <MX_GPIO_Init+0x158>)
 800097c:	f000 ffb4 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000980:	f244 0381 	movw	r3, #16513	; 0x4081
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	4811      	ldr	r0, [pc, #68]	; (80009e0 <MX_GPIO_Init+0x150>)
 800099a:	f000 ffa5 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800099e:	2340      	movs	r3, #64	; 0x40
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	480b      	ldr	r0, [pc, #44]	; (80009e4 <MX_GPIO_Init+0x154>)
 80009b6:	f000 ff97 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009ba:	2380      	movs	r3, #128	; 0x80
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009be:	2300      	movs	r3, #0
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_GPIO_Init+0x154>)
 80009ce:	f000 ff8b 	bl	80018e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009d2:	bf00      	nop
 80009d4:	3730      	adds	r7, #48	; 0x30
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40020400 	.word	0x40020400
 80009e4:	40021800 	.word	0x40021800
 80009e8:	40020800 	.word	0x40020800

080009ec <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 4 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
void configureTimerForRunTimeStats(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
    ulHighFrequencyTimerTicks = 0;
 80009f0:	4b03      	ldr	r3, [pc, #12]	; (8000a00 <configureTimerForRunTimeStats+0x14>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	2000082c 	.word	0x2000082c

08000a04 <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 8000a08:	4b03      	ldr	r3, [pc, #12]	; (8000a18 <getRunTimeCounterValue+0x14>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	2000082c 	.word	0x2000082c

08000a1c <vApplicationIdleHook>:

/* Hook Functions */
void vApplicationIdleHook(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
	   https://www.freertos.org/a00016.html
	   The idle hook is called repeatedly as long as the idle task is running. It
	   is paramount that the idle hook function does not call any API functions
	   that could cause it to block.*/
//	LOGGER_LOG("  +\r\n");
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
	...

08000a2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a09      	ldr	r2, [pc, #36]	; (8000a60 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d101      	bne.n	8000a42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a3e:	f000 fb05 	bl	800104c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM2)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a4a:	d104      	bne.n	8000a56 <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		ulHighFrequencyTimerTicks++;
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	3301      	adds	r3, #1
 8000a52:	4a04      	ldr	r2, [pc, #16]	; (8000a64 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000a54:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END Callback 1 */
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40010000 	.word	0x40010000
 8000a64:	2000082c 	.word	0x2000082c

08000a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a6c:	b672      	cpsid	i
}
 8000a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <Error_Handler+0x8>
	...

08000a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <HAL_MspInit+0x54>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a82:	4a11      	ldr	r2, [pc, #68]	; (8000ac8 <HAL_MspInit+0x54>)
 8000a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a88:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <HAL_MspInit+0x54>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	603b      	str	r3, [r7, #0]
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <HAL_MspInit+0x54>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ac8 <HAL_MspInit+0x54>)
 8000aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <HAL_MspInit+0x54>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	210f      	movs	r1, #15
 8000ab6:	f06f 0001 	mvn.w	r0, #1
 8000aba:	f000 fbc3 	bl	8001244 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40023800 	.word	0x40023800

08000acc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08e      	sub	sp, #56	; 0x38
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a55      	ldr	r2, [pc, #340]	; (8000c40 <HAL_ETH_MspInit+0x174>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	f040 80a4 	bne.w	8000c38 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000af0:	2300      	movs	r3, #0
 8000af2:	623b      	str	r3, [r7, #32]
 8000af4:	4b53      	ldr	r3, [pc, #332]	; (8000c44 <HAL_ETH_MspInit+0x178>)
 8000af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af8:	4a52      	ldr	r2, [pc, #328]	; (8000c44 <HAL_ETH_MspInit+0x178>)
 8000afa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000afe:	6313      	str	r3, [r2, #48]	; 0x30
 8000b00:	4b50      	ldr	r3, [pc, #320]	; (8000c44 <HAL_ETH_MspInit+0x178>)
 8000b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b08:	623b      	str	r3, [r7, #32]
 8000b0a:	6a3b      	ldr	r3, [r7, #32]
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61fb      	str	r3, [r7, #28]
 8000b10:	4b4c      	ldr	r3, [pc, #304]	; (8000c44 <HAL_ETH_MspInit+0x178>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b14:	4a4b      	ldr	r2, [pc, #300]	; (8000c44 <HAL_ETH_MspInit+0x178>)
 8000b16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1c:	4b49      	ldr	r3, [pc, #292]	; (8000c44 <HAL_ETH_MspInit+0x178>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b24:	61fb      	str	r3, [r7, #28]
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61bb      	str	r3, [r7, #24]
 8000b2c:	4b45      	ldr	r3, [pc, #276]	; (8000c44 <HAL_ETH_MspInit+0x178>)
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b30:	4a44      	ldr	r2, [pc, #272]	; (8000c44 <HAL_ETH_MspInit+0x178>)
 8000b32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b36:	6313      	str	r3, [r2, #48]	; 0x30
 8000b38:	4b42      	ldr	r3, [pc, #264]	; (8000c44 <HAL_ETH_MspInit+0x178>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b40:	61bb      	str	r3, [r7, #24]
 8000b42:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	4b3e      	ldr	r3, [pc, #248]	; (8000c44 <HAL_ETH_MspInit+0x178>)
 8000b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4c:	4a3d      	ldr	r2, [pc, #244]	; (8000c44 <HAL_ETH_MspInit+0x178>)
 8000b4e:	f043 0304 	orr.w	r3, r3, #4
 8000b52:	6313      	str	r3, [r2, #48]	; 0x30
 8000b54:	4b3b      	ldr	r3, [pc, #236]	; (8000c44 <HAL_ETH_MspInit+0x178>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b58:	f003 0304 	and.w	r3, r3, #4
 8000b5c:	617b      	str	r3, [r7, #20]
 8000b5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b60:	2300      	movs	r3, #0
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	4b37      	ldr	r3, [pc, #220]	; (8000c44 <HAL_ETH_MspInit+0x178>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b68:	4a36      	ldr	r2, [pc, #216]	; (8000c44 <HAL_ETH_MspInit+0x178>)
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b70:	4b34      	ldr	r3, [pc, #208]	; (8000c44 <HAL_ETH_MspInit+0x178>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	4b30      	ldr	r3, [pc, #192]	; (8000c44 <HAL_ETH_MspInit+0x178>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b84:	4a2f      	ldr	r2, [pc, #188]	; (8000c44 <HAL_ETH_MspInit+0x178>)
 8000b86:	f043 0302 	orr.w	r3, r3, #2
 8000b8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8c:	4b2d      	ldr	r3, [pc, #180]	; (8000c44 <HAL_ETH_MspInit+0x178>)
 8000b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b90:	f003 0302 	and.w	r3, r3, #2
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	4b29      	ldr	r3, [pc, #164]	; (8000c44 <HAL_ETH_MspInit+0x178>)
 8000b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba0:	4a28      	ldr	r2, [pc, #160]	; (8000c44 <HAL_ETH_MspInit+0x178>)
 8000ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba8:	4b26      	ldr	r3, [pc, #152]	; (8000c44 <HAL_ETH_MspInit+0x178>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bb4:	2332      	movs	r3, #50	; 0x32
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bc4:	230b      	movs	r3, #11
 8000bc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bcc:	4619      	mov	r1, r3
 8000bce:	481e      	ldr	r0, [pc, #120]	; (8000c48 <HAL_ETH_MspInit+0x17c>)
 8000bd0:	f000 fe8a 	bl	80018e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000bd4:	2386      	movs	r3, #134	; 0x86
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be0:	2303      	movs	r3, #3
 8000be2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000be4:	230b      	movs	r3, #11
 8000be6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bec:	4619      	mov	r1, r3
 8000bee:	4817      	ldr	r0, [pc, #92]	; (8000c4c <HAL_ETH_MspInit+0x180>)
 8000bf0:	f000 fe7a 	bl	80018e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c02:	2303      	movs	r3, #3
 8000c04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c06:	230b      	movs	r3, #11
 8000c08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480f      	ldr	r0, [pc, #60]	; (8000c50 <HAL_ETH_MspInit+0x184>)
 8000c12:	f000 fe69 	bl	80018e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c16:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c24:	2303      	movs	r3, #3
 8000c26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c28:	230b      	movs	r3, #11
 8000c2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c30:	4619      	mov	r1, r3
 8000c32:	4808      	ldr	r0, [pc, #32]	; (8000c54 <HAL_ETH_MspInit+0x188>)
 8000c34:	f000 fe58 	bl	80018e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c38:	bf00      	nop
 8000c3a:	3738      	adds	r7, #56	; 0x38
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40028000 	.word	0x40028000
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40020800 	.word	0x40020800
 8000c4c:	40020000 	.word	0x40020000
 8000c50:	40020400 	.word	0x40020400
 8000c54:	40021800 	.word	0x40021800

08000c58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c68:	d115      	bne.n	8000c96 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <HAL_TIM_Base_MspInit+0x48>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	4a0b      	ldr	r2, [pc, #44]	; (8000ca0 <HAL_TIM_Base_MspInit+0x48>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <HAL_TIM_Base_MspInit+0x48>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2105      	movs	r1, #5
 8000c8a:	201c      	movs	r0, #28
 8000c8c:	f000 fada 	bl	8001244 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c90:	201c      	movs	r0, #28
 8000c92:	f000 faf3 	bl	800127c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c96:	bf00      	nop
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40023800 	.word	0x40023800

08000ca4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	; 0x28
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a19      	ldr	r2, [pc, #100]	; (8000d28 <HAL_UART_MspInit+0x84>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d12c      	bne.n	8000d20 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <HAL_UART_MspInit+0x88>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	4a17      	ldr	r2, [pc, #92]	; (8000d2c <HAL_UART_MspInit+0x88>)
 8000cd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <HAL_UART_MspInit+0x88>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <HAL_UART_MspInit+0x88>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a10      	ldr	r2, [pc, #64]	; (8000d2c <HAL_UART_MspInit+0x88>)
 8000cec:	f043 0308 	orr.w	r3, r3, #8
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <HAL_UART_MspInit+0x88>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0308 	and.w	r3, r3, #8
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cfe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d10:	2307      	movs	r3, #7
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4805      	ldr	r0, [pc, #20]	; (8000d30 <HAL_UART_MspInit+0x8c>)
 8000d1c:	f000 fde4 	bl	80018e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d20:	bf00      	nop
 8000d22:	3728      	adds	r7, #40	; 0x28
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40004800 	.word	0x40004800
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020c00 	.word	0x40020c00

08000d34 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	; 0x28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d54:	d13f      	bne.n	8000dd6 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	4b21      	ldr	r3, [pc, #132]	; (8000de0 <HAL_PCD_MspInit+0xac>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a20      	ldr	r2, [pc, #128]	; (8000de0 <HAL_PCD_MspInit+0xac>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <HAL_PCD_MspInit+0xac>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d72:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d80:	2303      	movs	r3, #3
 8000d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d84:	230a      	movs	r3, #10
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4815      	ldr	r0, [pc, #84]	; (8000de4 <HAL_PCD_MspInit+0xb0>)
 8000d90:	f000 fdaa 	bl	80018e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	480e      	ldr	r0, [pc, #56]	; (8000de4 <HAL_PCD_MspInit+0xb0>)
 8000daa:	f000 fd9d 	bl	80018e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000dae:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <HAL_PCD_MspInit+0xac>)
 8000db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000db2:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <HAL_PCD_MspInit+0xac>)
 8000db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000db8:	6353      	str	r3, [r2, #52]	; 0x34
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <HAL_PCD_MspInit+0xac>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	4a07      	ldr	r2, [pc, #28]	; (8000de0 <HAL_PCD_MspInit+0xac>)
 8000dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dca:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <HAL_PCD_MspInit+0xac>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000dd6:	bf00      	nop
 8000dd8:	3728      	adds	r7, #40	; 0x28
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020000 	.word	0x40020000

08000de8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08c      	sub	sp, #48	; 0x30
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000df4:	2300      	movs	r3, #0
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	4b2f      	ldr	r3, [pc, #188]	; (8000ebc <HAL_InitTick+0xd4>)
 8000dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e00:	4a2e      	ldr	r2, [pc, #184]	; (8000ebc <HAL_InitTick+0xd4>)
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	6453      	str	r3, [r2, #68]	; 0x44
 8000e08:	4b2c      	ldr	r3, [pc, #176]	; (8000ebc <HAL_InitTick+0xd4>)
 8000e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e14:	f107 020c 	add.w	r2, r7, #12
 8000e18:	f107 0310 	add.w	r3, r7, #16
 8000e1c:	4611      	mov	r1, r2
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f001 fce6 	bl	80027f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000e24:	f001 fcd0 	bl	80027c8 <HAL_RCC_GetPCLK2Freq>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e30:	4a23      	ldr	r2, [pc, #140]	; (8000ec0 <HAL_InitTick+0xd8>)
 8000e32:	fba2 2303 	umull	r2, r3, r2, r3
 8000e36:	0c9b      	lsrs	r3, r3, #18
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e3c:	4b21      	ldr	r3, [pc, #132]	; (8000ec4 <HAL_InitTick+0xdc>)
 8000e3e:	4a22      	ldr	r2, [pc, #136]	; (8000ec8 <HAL_InitTick+0xe0>)
 8000e40:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e42:	4b20      	ldr	r3, [pc, #128]	; (8000ec4 <HAL_InitTick+0xdc>)
 8000e44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e48:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e4a:	4a1e      	ldr	r2, [pc, #120]	; (8000ec4 <HAL_InitTick+0xdc>)
 8000e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e50:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <HAL_InitTick+0xdc>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e56:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <HAL_InitTick+0xdc>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e5c:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <HAL_InitTick+0xdc>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000e62:	4818      	ldr	r0, [pc, #96]	; (8000ec4 <HAL_InitTick+0xdc>)
 8000e64:	f001 fcf6 	bl	8002854 <HAL_TIM_Base_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000e6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d11b      	bne.n	8000eae <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000e76:	4813      	ldr	r0, [pc, #76]	; (8000ec4 <HAL_InitTick+0xdc>)
 8000e78:	f001 fd3c 	bl	80028f4 <HAL_TIM_Base_Start_IT>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000e82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d111      	bne.n	8000eae <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e8a:	2019      	movs	r0, #25
 8000e8c:	f000 f9f6 	bl	800127c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2b0f      	cmp	r3, #15
 8000e94:	d808      	bhi.n	8000ea8 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000e96:	2200      	movs	r2, #0
 8000e98:	6879      	ldr	r1, [r7, #4]
 8000e9a:	2019      	movs	r0, #25
 8000e9c:	f000 f9d2 	bl	8001244 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ea0:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <HAL_InitTick+0xe4>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6013      	str	r3, [r2, #0]
 8000ea6:	e002      	b.n	8000eae <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000eae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3730      	adds	r7, #48	; 0x30
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	431bde83 	.word	0x431bde83
 8000ec4:	20000838 	.word	0x20000838
 8000ec8:	40010000 	.word	0x40010000
 8000ecc:	20000004 	.word	0x20000004

08000ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <NMI_Handler+0x4>

08000ed6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eda:	e7fe      	b.n	8000eda <HardFault_Handler+0x4>

08000edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <MemManage_Handler+0x4>

08000ee2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <BusFault_Handler+0x4>

08000ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <UsageFault_Handler+0x4>

08000eee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f00:	4802      	ldr	r0, [pc, #8]	; (8000f0c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f02:	f001 fd67 	bl	80029d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000838 	.word	0x20000838

08000f10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f14:	4802      	ldr	r0, [pc, #8]	; (8000f20 <TIM2_IRQHandler+0x10>)
 8000f16:	f001 fd5d 	bl	80029d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200002b8 	.word	0x200002b8

08000f24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f2c:	4a14      	ldr	r2, [pc, #80]	; (8000f80 <_sbrk+0x5c>)
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <_sbrk+0x60>)
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f38:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <_sbrk+0x64>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d102      	bne.n	8000f46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <_sbrk+0x64>)
 8000f42:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <_sbrk+0x68>)
 8000f44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <_sbrk+0x64>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d207      	bcs.n	8000f64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f54:	f006 fbae 	bl	80076b4 <__errno>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f62:	e009      	b.n	8000f78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <_sbrk+0x64>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f6a:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <_sbrk+0x64>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <_sbrk+0x64>)
 8000f74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f76:	68fb      	ldr	r3, [r7, #12]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20030000 	.word	0x20030000
 8000f84:	00000400 	.word	0x00000400
 8000f88:	20000880 	.word	0x20000880
 8000f8c:	20004898 	.word	0x20004898

08000f90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <SystemInit+0x20>)
 8000f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f9a:	4a05      	ldr	r2, [pc, #20]	; (8000fb0 <SystemInit+0x20>)
 8000f9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000fb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fb8:	f7ff ffea 	bl	8000f90 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fbc:	480c      	ldr	r0, [pc, #48]	; (8000ff0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fbe:	490d      	ldr	r1, [pc, #52]	; (8000ff4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc4:	e002      	b.n	8000fcc <LoopCopyDataInit>

08000fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fca:	3304      	adds	r3, #4

08000fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd0:	d3f9      	bcc.n	8000fc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fd4:	4c0a      	ldr	r4, [pc, #40]	; (8001000 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd8:	e001      	b.n	8000fde <LoopFillZerobss>

08000fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fdc:	3204      	adds	r2, #4

08000fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe0:	d3fb      	bcc.n	8000fda <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000fe2:	f006 fb6d 	bl	80076c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fe6:	f7ff fad9 	bl	800059c <main>
  bx  lr    
 8000fea:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000fec:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ff8:	080086ac 	.word	0x080086ac
  ldr r2, =_sbss
 8000ffc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001000:	20004894 	.word	0x20004894

08001004 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001004:	e7fe      	b.n	8001004 <ADC_IRQHandler>
	...

08001008 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <HAL_Init+0x40>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0d      	ldr	r2, [pc, #52]	; (8001048 <HAL_Init+0x40>)
 8001012:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001016:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001018:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <HAL_Init+0x40>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <HAL_Init+0x40>)
 800101e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001022:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001024:	4b08      	ldr	r3, [pc, #32]	; (8001048 <HAL_Init+0x40>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a07      	ldr	r2, [pc, #28]	; (8001048 <HAL_Init+0x40>)
 800102a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800102e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001030:	2003      	movs	r0, #3
 8001032:	f000 f8fc 	bl	800122e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001036:	200f      	movs	r0, #15
 8001038:	f7ff fed6 	bl	8000de8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800103c:	f7ff fd1a 	bl	8000a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40023c00 	.word	0x40023c00

0800104c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_IncTick+0x20>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	461a      	mov	r2, r3
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_IncTick+0x24>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4413      	add	r3, r2
 800105c:	4a04      	ldr	r2, [pc, #16]	; (8001070 <HAL_IncTick+0x24>)
 800105e:	6013      	str	r3, [r2, #0]
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	20000008 	.word	0x20000008
 8001070:	20000884 	.word	0x20000884

08001074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return uwTick;
 8001078:	4b03      	ldr	r3, [pc, #12]	; (8001088 <HAL_GetTick+0x14>)
 800107a:	681b      	ldr	r3, [r3, #0]
}
 800107c:	4618      	mov	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	20000884 	.word	0x20000884

0800108c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001094:	f7ff ffee 	bl	8001074 <HAL_GetTick>
 8001098:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010a4:	d005      	beq.n	80010b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010a6:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <HAL_Delay+0x44>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4413      	add	r3, r2
 80010b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010b2:	bf00      	nop
 80010b4:	f7ff ffde 	bl	8001074 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	68fa      	ldr	r2, [r7, #12]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d8f7      	bhi.n	80010b4 <HAL_Delay+0x28>
  {
  }
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000008 	.word	0x20000008

080010d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <__NVIC_SetPriorityGrouping+0x44>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010f0:	4013      	ands	r3, r2
 80010f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001106:	4a04      	ldr	r2, [pc, #16]	; (8001118 <__NVIC_SetPriorityGrouping+0x44>)
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	60d3      	str	r3, [r2, #12]
}
 800110c:	bf00      	nop
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <__NVIC_GetPriorityGrouping+0x18>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	0a1b      	lsrs	r3, r3, #8
 8001126:	f003 0307 	and.w	r3, r3, #7
}
 800112a:	4618      	mov	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	2b00      	cmp	r3, #0
 8001148:	db0b      	blt.n	8001162 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	f003 021f 	and.w	r2, r3, #31
 8001150:	4907      	ldr	r1, [pc, #28]	; (8001170 <__NVIC_EnableIRQ+0x38>)
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	095b      	lsrs	r3, r3, #5
 8001158:	2001      	movs	r0, #1
 800115a:	fa00 f202 	lsl.w	r2, r0, r2
 800115e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000e100 	.word	0xe000e100

08001174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	6039      	str	r1, [r7, #0]
 800117e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001184:	2b00      	cmp	r3, #0
 8001186:	db0a      	blt.n	800119e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	b2da      	uxtb	r2, r3
 800118c:	490c      	ldr	r1, [pc, #48]	; (80011c0 <__NVIC_SetPriority+0x4c>)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	0112      	lsls	r2, r2, #4
 8001194:	b2d2      	uxtb	r2, r2
 8001196:	440b      	add	r3, r1
 8001198:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800119c:	e00a      	b.n	80011b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	4908      	ldr	r1, [pc, #32]	; (80011c4 <__NVIC_SetPriority+0x50>)
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	3b04      	subs	r3, #4
 80011ac:	0112      	lsls	r2, r2, #4
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	440b      	add	r3, r1
 80011b2:	761a      	strb	r2, [r3, #24]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000e100 	.word	0xe000e100
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b089      	sub	sp, #36	; 0x24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f1c3 0307 	rsb	r3, r3, #7
 80011e2:	2b04      	cmp	r3, #4
 80011e4:	bf28      	it	cs
 80011e6:	2304      	movcs	r3, #4
 80011e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3304      	adds	r3, #4
 80011ee:	2b06      	cmp	r3, #6
 80011f0:	d902      	bls.n	80011f8 <NVIC_EncodePriority+0x30>
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3b03      	subs	r3, #3
 80011f6:	e000      	b.n	80011fa <NVIC_EncodePriority+0x32>
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43da      	mvns	r2, r3
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	401a      	ands	r2, r3
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001210:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	fa01 f303 	lsl.w	r3, r1, r3
 800121a:	43d9      	mvns	r1, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001220:	4313      	orrs	r3, r2
         );
}
 8001222:	4618      	mov	r0, r3
 8001224:	3724      	adds	r7, #36	; 0x24
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff ff4c 	bl	80010d4 <__NVIC_SetPriorityGrouping>
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
 8001250:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001256:	f7ff ff61 	bl	800111c <__NVIC_GetPriorityGrouping>
 800125a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	68b9      	ldr	r1, [r7, #8]
 8001260:	6978      	ldr	r0, [r7, #20]
 8001262:	f7ff ffb1 	bl	80011c8 <NVIC_EncodePriority>
 8001266:	4602      	mov	r2, r0
 8001268:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126c:	4611      	mov	r1, r2
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff ff80 	bl	8001174 <__NVIC_SetPriority>
}
 8001274:	bf00      	nop
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ff54 	bl	8001138 <__NVIC_EnableIRQ>
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e06c      	b.n	8001384 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d106      	bne.n	80012c2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2223      	movs	r2, #35	; 0x23
 80012b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff fc05 	bl	8000acc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	4b31      	ldr	r3, [pc, #196]	; (800138c <HAL_ETH_Init+0xf4>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	4a30      	ldr	r2, [pc, #192]	; (800138c <HAL_ETH_Init+0xf4>)
 80012cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d0:	6453      	str	r3, [r2, #68]	; 0x44
 80012d2:	4b2e      	ldr	r3, [pc, #184]	; (800138c <HAL_ETH_Init+0xf4>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80012de:	4b2c      	ldr	r3, [pc, #176]	; (8001390 <HAL_ETH_Init+0xf8>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	4a2b      	ldr	r2, [pc, #172]	; (8001390 <HAL_ETH_Init+0xf8>)
 80012e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80012e8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80012ea:	4b29      	ldr	r3, [pc, #164]	; (8001390 <HAL_ETH_Init+0xf8>)
 80012ec:	685a      	ldr	r2, [r3, #4]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	4927      	ldr	r1, [pc, #156]	; (8001390 <HAL_ETH_Init+0xf8>)
 80012f4:	4313      	orrs	r3, r2
 80012f6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80012f8:	4b25      	ldr	r3, [pc, #148]	; (8001390 <HAL_ETH_Init+0xf8>)
 80012fa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	6812      	ldr	r2, [r2, #0]
 800130a:	f043 0301 	orr.w	r3, r3, #1
 800130e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001312:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001314:	f7ff feae 	bl	8001074 <HAL_GetTick>
 8001318:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800131a:	e011      	b.n	8001340 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800131c:	f7ff feaa 	bl	8001074 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800132a:	d909      	bls.n	8001340 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2204      	movs	r2, #4
 8001330:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	22e0      	movs	r2, #224	; 0xe0
 8001338:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e021      	b.n	8001384 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1e4      	bne.n	800131c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f000 f958 	bl	8001608 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f000 f9ff 	bl	800175c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 fa55 	bl	800180e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	461a      	mov	r2, r3
 800136a:	2100      	movs	r1, #0
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f000 f9bd 	bl	80016ec <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2210      	movs	r2, #16
 800137e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40023800 	.word	0x40023800
 8001390:	40013800 	.word	0x40013800

08001394 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	4b51      	ldr	r3, [pc, #324]	; (80014f0 <ETH_SetMACConfig+0x15c>)
 80013aa:	4013      	ands	r3, r2
 80013ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	7c1b      	ldrb	r3, [r3, #16]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d102      	bne.n	80013bc <ETH_SetMACConfig+0x28>
 80013b6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80013ba:	e000      	b.n	80013be <ETH_SetMACConfig+0x2a>
 80013bc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	7c5b      	ldrb	r3, [r3, #17]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d102      	bne.n	80013cc <ETH_SetMACConfig+0x38>
 80013c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013ca:	e000      	b.n	80013ce <ETH_SetMACConfig+0x3a>
 80013cc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013ce:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80013d4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	7fdb      	ldrb	r3, [r3, #31]
 80013da:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80013dc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80013e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	7f92      	ldrb	r2, [r2, #30]
 80013e8:	2a00      	cmp	r2, #0
 80013ea:	d102      	bne.n	80013f2 <ETH_SetMACConfig+0x5e>
 80013ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013f0:	e000      	b.n	80013f4 <ETH_SetMACConfig+0x60>
 80013f2:	2200      	movs	r2, #0
                        macconf->Speed |
 80013f4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	7f1b      	ldrb	r3, [r3, #28]
 80013fa:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80013fc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001402:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	791b      	ldrb	r3, [r3, #4]
 8001408:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800140a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001412:	2a00      	cmp	r2, #0
 8001414:	d102      	bne.n	800141c <ETH_SetMACConfig+0x88>
 8001416:	f44f 7200 	mov.w	r2, #512	; 0x200
 800141a:	e000      	b.n	800141e <ETH_SetMACConfig+0x8a>
 800141c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800141e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	7bdb      	ldrb	r3, [r3, #15]
 8001424:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001426:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800142c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001434:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001436:	4313      	orrs	r3, r2
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	4313      	orrs	r3, r2
 800143c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800144e:	2001      	movs	r0, #1
 8001450:	f7ff fe1c 	bl	800108c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001464:	68fa      	ldr	r2, [r7, #12]
 8001466:	f64f 7341 	movw	r3, #65345	; 0xff41
 800146a:	4013      	ands	r3, r2
 800146c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001472:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800147a:	2a00      	cmp	r2, #0
 800147c:	d101      	bne.n	8001482 <ETH_SetMACConfig+0xee>
 800147e:	2280      	movs	r2, #128	; 0x80
 8001480:	e000      	b.n	8001484 <ETH_SetMACConfig+0xf0>
 8001482:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001484:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800148a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001492:	2a01      	cmp	r2, #1
 8001494:	d101      	bne.n	800149a <ETH_SetMACConfig+0x106>
 8001496:	2208      	movs	r2, #8
 8001498:	e000      	b.n	800149c <ETH_SetMACConfig+0x108>
 800149a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800149c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800149e:	683a      	ldr	r2, [r7, #0]
 80014a0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80014a4:	2a01      	cmp	r2, #1
 80014a6:	d101      	bne.n	80014ac <ETH_SetMACConfig+0x118>
 80014a8:	2204      	movs	r2, #4
 80014aa:	e000      	b.n	80014ae <ETH_SetMACConfig+0x11a>
 80014ac:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80014ae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80014b6:	2a01      	cmp	r2, #1
 80014b8:	d101      	bne.n	80014be <ETH_SetMACConfig+0x12a>
 80014ba:	2202      	movs	r2, #2
 80014bc:	e000      	b.n	80014c0 <ETH_SetMACConfig+0x12c>
 80014be:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014c0:	4313      	orrs	r3, r2
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014d8:	2001      	movs	r0, #1
 80014da:	f7ff fdd7 	bl	800108c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	619a      	str	r2, [r3, #24]
}
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	ff20810f 	.word	0xff20810f

080014f4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	4b3d      	ldr	r3, [pc, #244]	; (8001604 <ETH_SetDMAConfig+0x110>)
 800150e:	4013      	ands	r3, r2
 8001510:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	7b1b      	ldrb	r3, [r3, #12]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d102      	bne.n	8001520 <ETH_SetDMAConfig+0x2c>
 800151a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800151e:	e000      	b.n	8001522 <ETH_SetDMAConfig+0x2e>
 8001520:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	7b5b      	ldrb	r3, [r3, #13]
 8001526:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001528:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	7f52      	ldrb	r2, [r2, #29]
 800152e:	2a00      	cmp	r2, #0
 8001530:	d102      	bne.n	8001538 <ETH_SetDMAConfig+0x44>
 8001532:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001536:	e000      	b.n	800153a <ETH_SetDMAConfig+0x46>
 8001538:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800153a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	7b9b      	ldrb	r3, [r3, #14]
 8001540:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001542:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001548:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	7f1b      	ldrb	r3, [r3, #28]
 800154e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001550:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	7f9b      	ldrb	r3, [r3, #30]
 8001556:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001558:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800155e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001566:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001568:	4313      	orrs	r3, r2
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	4313      	orrs	r3, r2
 800156e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001578:	461a      	mov	r2, r3
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800158a:	2001      	movs	r0, #1
 800158c:	f7ff fd7e 	bl	800108c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001598:	461a      	mov	r2, r3
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	791b      	ldrb	r3, [r3, #4]
 80015a2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015a8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80015ae:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80015b4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015bc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80015be:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015c6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015cc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	6812      	ldr	r2, [r2, #0]
 80015d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015da:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015e8:	2001      	movs	r0, #1
 80015ea:	f7ff fd4f 	bl	800108c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015f6:	461a      	mov	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6013      	str	r3, [r2, #0]
}
 80015fc:	bf00      	nop
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	f8de3f23 	.word	0xf8de3f23

08001608 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b0a6      	sub	sp, #152	; 0x98
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001610:	2301      	movs	r3, #1
 8001612:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001616:	2301      	movs	r3, #1
 8001618:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800161c:	2300      	movs	r3, #0
 800161e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001620:	2300      	movs	r3, #0
 8001622:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001626:	2301      	movs	r3, #1
 8001628:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001632:	2301      	movs	r3, #1
 8001634:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001638:	2300      	movs	r3, #0
 800163a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800163e:	2300      	movs	r3, #0
 8001640:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001644:	2300      	movs	r3, #0
 8001646:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001648:	2300      	movs	r3, #0
 800164a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800164e:	2300      	movs	r3, #0
 8001650:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001652:	2300      	movs	r3, #0
 8001654:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001658:	2300      	movs	r3, #0
 800165a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800165e:	2300      	movs	r3, #0
 8001660:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001664:	2300      	movs	r3, #0
 8001666:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800166a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800166e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001670:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001674:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001676:	2300      	movs	r3, #0
 8001678:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800167c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001680:	4619      	mov	r1, r3
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff fe86 	bl	8001394 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001688:	2301      	movs	r3, #1
 800168a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800168c:	2301      	movs	r3, #1
 800168e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001690:	2301      	movs	r3, #1
 8001692:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001696:	2301      	movs	r3, #1
 8001698:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800169e:	2300      	movs	r3, #0
 80016a0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80016a4:	2300      	movs	r3, #0
 80016a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80016aa:	2300      	movs	r3, #0
 80016ac:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80016ae:	2301      	movs	r3, #1
 80016b0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80016b4:	2301      	movs	r3, #1
 80016b6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80016b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016bc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80016be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016c2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80016c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016c8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80016ca:	2301      	movs	r3, #1
 80016cc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80016d8:	f107 0308 	add.w	r3, r7, #8
 80016dc:	4619      	mov	r1, r3
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff ff08 	bl	80014f4 <ETH_SetDMAConfig>
}
 80016e4:	bf00      	nop
 80016e6:	3798      	adds	r7, #152	; 0x98
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b087      	sub	sp, #28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3305      	adds	r3, #5
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	021b      	lsls	r3, r3, #8
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	3204      	adds	r2, #4
 8001704:	7812      	ldrb	r2, [r2, #0]
 8001706:	4313      	orrs	r3, r2
 8001708:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	4b11      	ldr	r3, [pc, #68]	; (8001754 <ETH_MACAddressConfig+0x68>)
 800170e:	4413      	add	r3, r2
 8001710:	461a      	mov	r2, r3
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3303      	adds	r3, #3
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	061a      	lsls	r2, r3, #24
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3302      	adds	r3, #2
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	041b      	lsls	r3, r3, #16
 8001726:	431a      	orrs	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3301      	adds	r3, #1
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	021b      	lsls	r3, r3, #8
 8001730:	4313      	orrs	r3, r2
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	7812      	ldrb	r2, [r2, #0]
 8001736:	4313      	orrs	r3, r2
 8001738:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800173a:	68ba      	ldr	r2, [r7, #8]
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <ETH_MACAddressConfig+0x6c>)
 800173e:	4413      	add	r3, r2
 8001740:	461a      	mov	r2, r3
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	6013      	str	r3, [r2, #0]
}
 8001746:	bf00      	nop
 8001748:	371c      	adds	r7, #28
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40028040 	.word	0x40028040
 8001758:	40028044 	.word	0x40028044

0800175c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	e03e      	b.n	80017e8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68d9      	ldr	r1, [r3, #12]
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	440b      	add	r3, r1
 800177a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	2200      	movs	r2, #0
 8001786:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	2200      	movs	r2, #0
 8001792:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001794:	68b9      	ldr	r1, [r7, #8]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68fa      	ldr	r2, [r7, #12]
 800179a:	3206      	adds	r2, #6
 800179c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d80c      	bhi.n	80017cc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68d9      	ldr	r1, [r3, #12]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	1c5a      	adds	r2, r3, #1
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	440b      	add	r3, r1
 80017c4:	461a      	mov	r2, r3
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	e004      	b.n	80017d6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	461a      	mov	r2, r3
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	3301      	adds	r3, #1
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2b03      	cmp	r3, #3
 80017ec:	d9bd      	bls.n	800176a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68da      	ldr	r2, [r3, #12]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001800:	611a      	str	r2, [r3, #16]
}
 8001802:	bf00      	nop
 8001804:	3714      	adds	r7, #20
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800180e:	b480      	push	{r7}
 8001810:	b085      	sub	sp, #20
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	e046      	b.n	80018aa <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6919      	ldr	r1, [r3, #16]
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	4613      	mov	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	440b      	add	r3, r1
 800182c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	2200      	movs	r2, #0
 8001838:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	2200      	movs	r2, #0
 8001844:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	2200      	movs	r2, #0
 800184a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	2200      	movs	r2, #0
 8001850:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001858:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001860:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800186e:	68b9      	ldr	r1, [r7, #8]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	3212      	adds	r2, #18
 8001876:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2b02      	cmp	r3, #2
 800187e:	d80c      	bhi.n	800189a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6919      	ldr	r1, [r3, #16]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	4613      	mov	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	440b      	add	r3, r1
 8001892:	461a      	mov	r2, r3
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	60da      	str	r2, [r3, #12]
 8001898:	e004      	b.n	80018a4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	461a      	mov	r2, r3
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	3301      	adds	r3, #1
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2b03      	cmp	r3, #3
 80018ae:	d9b5      	bls.n	800181c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	691a      	ldr	r2, [r3, #16]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018da:	60da      	str	r2, [r3, #12]
}
 80018dc:	bf00      	nop
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b089      	sub	sp, #36	; 0x24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
 8001902:	e177      	b.n	8001bf4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001904:	2201      	movs	r2, #1
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	4013      	ands	r3, r2
 8001916:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	429a      	cmp	r2, r3
 800191e:	f040 8166 	bne.w	8001bee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	2b01      	cmp	r3, #1
 800192c:	d005      	beq.n	800193a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001936:	2b02      	cmp	r3, #2
 8001938:	d130      	bne.n	800199c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	2203      	movs	r2, #3
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43db      	mvns	r3, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4013      	ands	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	68da      	ldr	r2, [r3, #12]
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4313      	orrs	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001970:	2201      	movs	r2, #1
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	091b      	lsrs	r3, r3, #4
 8001986:	f003 0201 	and.w	r2, r3, #1
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	2b03      	cmp	r3, #3
 80019a6:	d017      	beq.n	80019d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	2203      	movs	r2, #3
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d123      	bne.n	8001a2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	08da      	lsrs	r2, r3, #3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3208      	adds	r2, #8
 80019ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	220f      	movs	r2, #15
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	691a      	ldr	r2, [r3, #16]
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	08da      	lsrs	r2, r3, #3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3208      	adds	r2, #8
 8001a26:	69b9      	ldr	r1, [r7, #24]
 8001a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	2203      	movs	r2, #3
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0203 	and.w	r2, r3, #3
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 80c0 	beq.w	8001bee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	4b66      	ldr	r3, [pc, #408]	; (8001c0c <HAL_GPIO_Init+0x324>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	4a65      	ldr	r2, [pc, #404]	; (8001c0c <HAL_GPIO_Init+0x324>)
 8001a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7e:	4b63      	ldr	r3, [pc, #396]	; (8001c0c <HAL_GPIO_Init+0x324>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a8a:	4a61      	ldr	r2, [pc, #388]	; (8001c10 <HAL_GPIO_Init+0x328>)
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	089b      	lsrs	r3, r3, #2
 8001a90:	3302      	adds	r3, #2
 8001a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	220f      	movs	r2, #15
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a58      	ldr	r2, [pc, #352]	; (8001c14 <HAL_GPIO_Init+0x32c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d037      	beq.n	8001b26 <HAL_GPIO_Init+0x23e>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a57      	ldr	r2, [pc, #348]	; (8001c18 <HAL_GPIO_Init+0x330>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d031      	beq.n	8001b22 <HAL_GPIO_Init+0x23a>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a56      	ldr	r2, [pc, #344]	; (8001c1c <HAL_GPIO_Init+0x334>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d02b      	beq.n	8001b1e <HAL_GPIO_Init+0x236>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a55      	ldr	r2, [pc, #340]	; (8001c20 <HAL_GPIO_Init+0x338>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d025      	beq.n	8001b1a <HAL_GPIO_Init+0x232>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a54      	ldr	r2, [pc, #336]	; (8001c24 <HAL_GPIO_Init+0x33c>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d01f      	beq.n	8001b16 <HAL_GPIO_Init+0x22e>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a53      	ldr	r2, [pc, #332]	; (8001c28 <HAL_GPIO_Init+0x340>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d019      	beq.n	8001b12 <HAL_GPIO_Init+0x22a>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a52      	ldr	r2, [pc, #328]	; (8001c2c <HAL_GPIO_Init+0x344>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d013      	beq.n	8001b0e <HAL_GPIO_Init+0x226>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a51      	ldr	r2, [pc, #324]	; (8001c30 <HAL_GPIO_Init+0x348>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d00d      	beq.n	8001b0a <HAL_GPIO_Init+0x222>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a50      	ldr	r2, [pc, #320]	; (8001c34 <HAL_GPIO_Init+0x34c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d007      	beq.n	8001b06 <HAL_GPIO_Init+0x21e>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a4f      	ldr	r2, [pc, #316]	; (8001c38 <HAL_GPIO_Init+0x350>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d101      	bne.n	8001b02 <HAL_GPIO_Init+0x21a>
 8001afe:	2309      	movs	r3, #9
 8001b00:	e012      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b02:	230a      	movs	r3, #10
 8001b04:	e010      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b06:	2308      	movs	r3, #8
 8001b08:	e00e      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b0a:	2307      	movs	r3, #7
 8001b0c:	e00c      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b0e:	2306      	movs	r3, #6
 8001b10:	e00a      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b12:	2305      	movs	r3, #5
 8001b14:	e008      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b16:	2304      	movs	r3, #4
 8001b18:	e006      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e004      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b1e:	2302      	movs	r3, #2
 8001b20:	e002      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b22:	2301      	movs	r3, #1
 8001b24:	e000      	b.n	8001b28 <HAL_GPIO_Init+0x240>
 8001b26:	2300      	movs	r3, #0
 8001b28:	69fa      	ldr	r2, [r7, #28]
 8001b2a:	f002 0203 	and.w	r2, r2, #3
 8001b2e:	0092      	lsls	r2, r2, #2
 8001b30:	4093      	lsls	r3, r2
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b38:	4935      	ldr	r1, [pc, #212]	; (8001c10 <HAL_GPIO_Init+0x328>)
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	089b      	lsrs	r3, r3, #2
 8001b3e:	3302      	adds	r3, #2
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b46:	4b3d      	ldr	r3, [pc, #244]	; (8001c3c <HAL_GPIO_Init+0x354>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4013      	ands	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b6a:	4a34      	ldr	r2, [pc, #208]	; (8001c3c <HAL_GPIO_Init+0x354>)
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b70:	4b32      	ldr	r3, [pc, #200]	; (8001c3c <HAL_GPIO_Init+0x354>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b94:	4a29      	ldr	r2, [pc, #164]	; (8001c3c <HAL_GPIO_Init+0x354>)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b9a:	4b28      	ldr	r3, [pc, #160]	; (8001c3c <HAL_GPIO_Init+0x354>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bbe:	4a1f      	ldr	r2, [pc, #124]	; (8001c3c <HAL_GPIO_Init+0x354>)
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bc4:	4b1d      	ldr	r3, [pc, #116]	; (8001c3c <HAL_GPIO_Init+0x354>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001be8:	4a14      	ldr	r2, [pc, #80]	; (8001c3c <HAL_GPIO_Init+0x354>)
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	61fb      	str	r3, [r7, #28]
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	2b0f      	cmp	r3, #15
 8001bf8:	f67f ae84 	bls.w	8001904 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	bf00      	nop
 8001c00:	3724      	adds	r7, #36	; 0x24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40013800 	.word	0x40013800
 8001c14:	40020000 	.word	0x40020000
 8001c18:	40020400 	.word	0x40020400
 8001c1c:	40020800 	.word	0x40020800
 8001c20:	40020c00 	.word	0x40020c00
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40021400 	.word	0x40021400
 8001c2c:	40021800 	.word	0x40021800
 8001c30:	40021c00 	.word	0x40021c00
 8001c34:	40022000 	.word	0x40022000
 8001c38:	40022400 	.word	0x40022400
 8001c3c:	40013c00 	.word	0x40013c00

08001c40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691a      	ldr	r2, [r3, #16]
 8001c50:	887b      	ldrh	r3, [r7, #2]
 8001c52:	4013      	ands	r3, r2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d002      	beq.n	8001c5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	73fb      	strb	r3, [r7, #15]
 8001c5c:	e001      	b.n	8001c62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	807b      	strh	r3, [r7, #2]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c80:	787b      	ldrb	r3, [r7, #1]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c86:	887a      	ldrh	r2, [r7, #2]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c8c:	e003      	b.n	8001c96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c8e:	887b      	ldrh	r3, [r7, #2]
 8001c90:	041a      	lsls	r2, r3, #16
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	619a      	str	r2, [r3, #24]
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b086      	sub	sp, #24
 8001ca6:	af02      	add	r7, sp, #8
 8001ca8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e101      	b.n	8001eb8 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d106      	bne.n	8001cd4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff f830 	bl	8000d34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2203      	movs	r2, #3
 8001cd8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ce2:	d102      	bne.n	8001cea <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f001 fd4e 	bl	8003790 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6818      	ldr	r0, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	7c1a      	ldrb	r2, [r3, #16]
 8001cfc:	f88d 2000 	strb.w	r2, [sp]
 8001d00:	3304      	adds	r3, #4
 8001d02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d04:	f001 fce0 	bl	80036c8 <USB_CoreInit>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d005      	beq.n	8001d1a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2202      	movs	r2, #2
 8001d12:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e0ce      	b.n	8001eb8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4618      	mov	r0, r3
 8001d22:	f001 fd46 	bl	80037b2 <USB_SetCurrentMode>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d005      	beq.n	8001d38 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2202      	movs	r2, #2
 8001d30:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e0bf      	b.n	8001eb8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d38:	2300      	movs	r3, #0
 8001d3a:	73fb      	strb	r3, [r7, #15]
 8001d3c:	e04a      	b.n	8001dd4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d3e:	7bfa      	ldrb	r2, [r7, #15]
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	4413      	add	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	3315      	adds	r3, #21
 8001d4e:	2201      	movs	r2, #1
 8001d50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d52:	7bfa      	ldrb	r2, [r7, #15]
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	4613      	mov	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	440b      	add	r3, r1
 8001d60:	3314      	adds	r3, #20
 8001d62:	7bfa      	ldrb	r2, [r7, #15]
 8001d64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d66:	7bfa      	ldrb	r2, [r7, #15]
 8001d68:	7bfb      	ldrb	r3, [r7, #15]
 8001d6a:	b298      	uxth	r0, r3
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	4413      	add	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	440b      	add	r3, r1
 8001d78:	332e      	adds	r3, #46	; 0x2e
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d7e:	7bfa      	ldrb	r2, [r7, #15]
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	4613      	mov	r3, r2
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	4413      	add	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	440b      	add	r3, r1
 8001d8c:	3318      	adds	r3, #24
 8001d8e:	2200      	movs	r2, #0
 8001d90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d92:	7bfa      	ldrb	r2, [r7, #15]
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	4613      	mov	r3, r2
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	440b      	add	r3, r1
 8001da0:	331c      	adds	r3, #28
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001da6:	7bfa      	ldrb	r2, [r7, #15]
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	4413      	add	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	440b      	add	r3, r1
 8001db4:	3320      	adds	r3, #32
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001dba:	7bfa      	ldrb	r2, [r7, #15]
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	3324      	adds	r3, #36	; 0x24
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	73fb      	strb	r3, [r7, #15]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	791b      	ldrb	r3, [r3, #4]
 8001dd8:	7bfa      	ldrb	r2, [r7, #15]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d3af      	bcc.n	8001d3e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dde:	2300      	movs	r3, #0
 8001de0:	73fb      	strb	r3, [r7, #15]
 8001de2:	e044      	b.n	8001e6e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001de4:	7bfa      	ldrb	r2, [r7, #15]
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	4613      	mov	r3, r2
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	4413      	add	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	440b      	add	r3, r1
 8001df2:	f203 2355 	addw	r3, r3, #597	; 0x255
 8001df6:	2200      	movs	r2, #0
 8001df8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001dfa:	7bfa      	ldrb	r2, [r7, #15]
 8001dfc:	6879      	ldr	r1, [r7, #4]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	4413      	add	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	440b      	add	r3, r1
 8001e08:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8001e0c:	7bfa      	ldrb	r2, [r7, #15]
 8001e0e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e10:	7bfa      	ldrb	r2, [r7, #15]
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	4613      	mov	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	4413      	add	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001e22:	2200      	movs	r2, #0
 8001e24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e26:	7bfa      	ldrb	r2, [r7, #15]
 8001e28:	6879      	ldr	r1, [r7, #4]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	4413      	add	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	440b      	add	r3, r1
 8001e34:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e3c:	7bfa      	ldrb	r2, [r7, #15]
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	4613      	mov	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	4413      	add	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e52:	7bfa      	ldrb	r2, [r7, #15]
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	4613      	mov	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	4413      	add	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	440b      	add	r3, r1
 8001e60:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	73fb      	strb	r3, [r7, #15]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	791b      	ldrb	r3, [r3, #4]
 8001e72:	7bfa      	ldrb	r2, [r7, #15]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d3b5      	bcc.n	8001de4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6818      	ldr	r0, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	7c1a      	ldrb	r2, [r3, #16]
 8001e80:	f88d 2000 	strb.w	r2, [sp]
 8001e84:	3304      	adds	r3, #4
 8001e86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e88:	f001 fce0 	bl	800384c <USB_DevInit>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d005      	beq.n	8001e9e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2202      	movs	r2, #2
 8001e96:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e00c      	b.n	8001eb8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f001 fea8 	bl	8003c06 <USB_DevDisconnect>

  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e267      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d075      	beq.n	8001fca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ede:	4b88      	ldr	r3, [pc, #544]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 030c 	and.w	r3, r3, #12
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	d00c      	beq.n	8001f04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eea:	4b85      	ldr	r3, [pc, #532]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ef2:	2b08      	cmp	r3, #8
 8001ef4:	d112      	bne.n	8001f1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ef6:	4b82      	ldr	r3, [pc, #520]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001efe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f02:	d10b      	bne.n	8001f1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f04:	4b7e      	ldr	r3, [pc, #504]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d05b      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x108>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d157      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e242      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f24:	d106      	bne.n	8001f34 <HAL_RCC_OscConfig+0x74>
 8001f26:	4b76      	ldr	r3, [pc, #472]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a75      	ldr	r2, [pc, #468]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	e01d      	b.n	8001f70 <HAL_RCC_OscConfig+0xb0>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f3c:	d10c      	bne.n	8001f58 <HAL_RCC_OscConfig+0x98>
 8001f3e:	4b70      	ldr	r3, [pc, #448]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a6f      	ldr	r2, [pc, #444]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	4b6d      	ldr	r3, [pc, #436]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a6c      	ldr	r2, [pc, #432]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	e00b      	b.n	8001f70 <HAL_RCC_OscConfig+0xb0>
 8001f58:	4b69      	ldr	r3, [pc, #420]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a68      	ldr	r2, [pc, #416]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f62:	6013      	str	r3, [r2, #0]
 8001f64:	4b66      	ldr	r3, [pc, #408]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a65      	ldr	r2, [pc, #404]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d013      	beq.n	8001fa0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f78:	f7ff f87c 	bl	8001074 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f80:	f7ff f878 	bl	8001074 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b64      	cmp	r3, #100	; 0x64
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e207      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f92:	4b5b      	ldr	r3, [pc, #364]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0f0      	beq.n	8001f80 <HAL_RCC_OscConfig+0xc0>
 8001f9e:	e014      	b.n	8001fca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa0:	f7ff f868 	bl	8001074 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fa8:	f7ff f864 	bl	8001074 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b64      	cmp	r3, #100	; 0x64
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e1f3      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fba:	4b51      	ldr	r3, [pc, #324]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f0      	bne.n	8001fa8 <HAL_RCC_OscConfig+0xe8>
 8001fc6:	e000      	b.n	8001fca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d063      	beq.n	800209e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fd6:	4b4a      	ldr	r3, [pc, #296]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 030c 	and.w	r3, r3, #12
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00b      	beq.n	8001ffa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fe2:	4b47      	ldr	r3, [pc, #284]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d11c      	bne.n	8002028 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fee:	4b44      	ldr	r3, [pc, #272]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d116      	bne.n	8002028 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ffa:	4b41      	ldr	r3, [pc, #260]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d005      	beq.n	8002012 <HAL_RCC_OscConfig+0x152>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d001      	beq.n	8002012 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e1c7      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002012:	4b3b      	ldr	r3, [pc, #236]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4937      	ldr	r1, [pc, #220]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8002022:	4313      	orrs	r3, r2
 8002024:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002026:	e03a      	b.n	800209e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d020      	beq.n	8002072 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002030:	4b34      	ldr	r3, [pc, #208]	; (8002104 <HAL_RCC_OscConfig+0x244>)
 8002032:	2201      	movs	r2, #1
 8002034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002036:	f7ff f81d 	bl	8001074 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800203e:	f7ff f819 	bl	8001074 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e1a8      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002050:	4b2b      	ldr	r3, [pc, #172]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0f0      	beq.n	800203e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205c:	4b28      	ldr	r3, [pc, #160]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	4925      	ldr	r1, [pc, #148]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 800206c:	4313      	orrs	r3, r2
 800206e:	600b      	str	r3, [r1, #0]
 8002070:	e015      	b.n	800209e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002072:	4b24      	ldr	r3, [pc, #144]	; (8002104 <HAL_RCC_OscConfig+0x244>)
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002078:	f7fe fffc 	bl	8001074 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002080:	f7fe fff8 	bl	8001074 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e187      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002092:	4b1b      	ldr	r3, [pc, #108]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d036      	beq.n	8002118 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d016      	beq.n	80020e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020b2:	4b15      	ldr	r3, [pc, #84]	; (8002108 <HAL_RCC_OscConfig+0x248>)
 80020b4:	2201      	movs	r2, #1
 80020b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b8:	f7fe ffdc 	bl	8001074 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020c0:	f7fe ffd8 	bl	8001074 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e167      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d2:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <HAL_RCC_OscConfig+0x240>)
 80020d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0x200>
 80020de:	e01b      	b.n	8002118 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020e0:	4b09      	ldr	r3, [pc, #36]	; (8002108 <HAL_RCC_OscConfig+0x248>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e6:	f7fe ffc5 	bl	8001074 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ec:	e00e      	b.n	800210c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ee:	f7fe ffc1 	bl	8001074 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d907      	bls.n	800210c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e150      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
 8002100:	40023800 	.word	0x40023800
 8002104:	42470000 	.word	0x42470000
 8002108:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800210c:	4b88      	ldr	r3, [pc, #544]	; (8002330 <HAL_RCC_OscConfig+0x470>)
 800210e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1ea      	bne.n	80020ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 8097 	beq.w	8002254 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002126:	2300      	movs	r3, #0
 8002128:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800212a:	4b81      	ldr	r3, [pc, #516]	; (8002330 <HAL_RCC_OscConfig+0x470>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10f      	bne.n	8002156 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	4b7d      	ldr	r3, [pc, #500]	; (8002330 <HAL_RCC_OscConfig+0x470>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	4a7c      	ldr	r2, [pc, #496]	; (8002330 <HAL_RCC_OscConfig+0x470>)
 8002140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002144:	6413      	str	r3, [r2, #64]	; 0x40
 8002146:	4b7a      	ldr	r3, [pc, #488]	; (8002330 <HAL_RCC_OscConfig+0x470>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002152:	2301      	movs	r3, #1
 8002154:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002156:	4b77      	ldr	r3, [pc, #476]	; (8002334 <HAL_RCC_OscConfig+0x474>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215e:	2b00      	cmp	r3, #0
 8002160:	d118      	bne.n	8002194 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002162:	4b74      	ldr	r3, [pc, #464]	; (8002334 <HAL_RCC_OscConfig+0x474>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a73      	ldr	r2, [pc, #460]	; (8002334 <HAL_RCC_OscConfig+0x474>)
 8002168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800216c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800216e:	f7fe ff81 	bl	8001074 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002176:	f7fe ff7d 	bl	8001074 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e10c      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002188:	4b6a      	ldr	r3, [pc, #424]	; (8002334 <HAL_RCC_OscConfig+0x474>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0f0      	beq.n	8002176 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d106      	bne.n	80021aa <HAL_RCC_OscConfig+0x2ea>
 800219c:	4b64      	ldr	r3, [pc, #400]	; (8002330 <HAL_RCC_OscConfig+0x470>)
 800219e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a0:	4a63      	ldr	r2, [pc, #396]	; (8002330 <HAL_RCC_OscConfig+0x470>)
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	6713      	str	r3, [r2, #112]	; 0x70
 80021a8:	e01c      	b.n	80021e4 <HAL_RCC_OscConfig+0x324>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2b05      	cmp	r3, #5
 80021b0:	d10c      	bne.n	80021cc <HAL_RCC_OscConfig+0x30c>
 80021b2:	4b5f      	ldr	r3, [pc, #380]	; (8002330 <HAL_RCC_OscConfig+0x470>)
 80021b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b6:	4a5e      	ldr	r2, [pc, #376]	; (8002330 <HAL_RCC_OscConfig+0x470>)
 80021b8:	f043 0304 	orr.w	r3, r3, #4
 80021bc:	6713      	str	r3, [r2, #112]	; 0x70
 80021be:	4b5c      	ldr	r3, [pc, #368]	; (8002330 <HAL_RCC_OscConfig+0x470>)
 80021c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c2:	4a5b      	ldr	r2, [pc, #364]	; (8002330 <HAL_RCC_OscConfig+0x470>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	6713      	str	r3, [r2, #112]	; 0x70
 80021ca:	e00b      	b.n	80021e4 <HAL_RCC_OscConfig+0x324>
 80021cc:	4b58      	ldr	r3, [pc, #352]	; (8002330 <HAL_RCC_OscConfig+0x470>)
 80021ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d0:	4a57      	ldr	r2, [pc, #348]	; (8002330 <HAL_RCC_OscConfig+0x470>)
 80021d2:	f023 0301 	bic.w	r3, r3, #1
 80021d6:	6713      	str	r3, [r2, #112]	; 0x70
 80021d8:	4b55      	ldr	r3, [pc, #340]	; (8002330 <HAL_RCC_OscConfig+0x470>)
 80021da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021dc:	4a54      	ldr	r2, [pc, #336]	; (8002330 <HAL_RCC_OscConfig+0x470>)
 80021de:	f023 0304 	bic.w	r3, r3, #4
 80021e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d015      	beq.n	8002218 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ec:	f7fe ff42 	bl	8001074 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f2:	e00a      	b.n	800220a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021f4:	f7fe ff3e 	bl	8001074 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002202:	4293      	cmp	r3, r2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e0cb      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800220a:	4b49      	ldr	r3, [pc, #292]	; (8002330 <HAL_RCC_OscConfig+0x470>)
 800220c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0ee      	beq.n	80021f4 <HAL_RCC_OscConfig+0x334>
 8002216:	e014      	b.n	8002242 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002218:	f7fe ff2c 	bl	8001074 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800221e:	e00a      	b.n	8002236 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002220:	f7fe ff28 	bl	8001074 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	f241 3288 	movw	r2, #5000	; 0x1388
 800222e:	4293      	cmp	r3, r2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e0b5      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002236:	4b3e      	ldr	r3, [pc, #248]	; (8002330 <HAL_RCC_OscConfig+0x470>)
 8002238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1ee      	bne.n	8002220 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002242:	7dfb      	ldrb	r3, [r7, #23]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d105      	bne.n	8002254 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002248:	4b39      	ldr	r3, [pc, #228]	; (8002330 <HAL_RCC_OscConfig+0x470>)
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	4a38      	ldr	r2, [pc, #224]	; (8002330 <HAL_RCC_OscConfig+0x470>)
 800224e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002252:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 80a1 	beq.w	80023a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800225e:	4b34      	ldr	r3, [pc, #208]	; (8002330 <HAL_RCC_OscConfig+0x470>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 030c 	and.w	r3, r3, #12
 8002266:	2b08      	cmp	r3, #8
 8002268:	d05c      	beq.n	8002324 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	2b02      	cmp	r3, #2
 8002270:	d141      	bne.n	80022f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002272:	4b31      	ldr	r3, [pc, #196]	; (8002338 <HAL_RCC_OscConfig+0x478>)
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002278:	f7fe fefc 	bl	8001074 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002280:	f7fe fef8 	bl	8001074 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e087      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002292:	4b27      	ldr	r3, [pc, #156]	; (8002330 <HAL_RCC_OscConfig+0x470>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f0      	bne.n	8002280 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69da      	ldr	r2, [r3, #28]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	019b      	lsls	r3, r3, #6
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b4:	085b      	lsrs	r3, r3, #1
 80022b6:	3b01      	subs	r3, #1
 80022b8:	041b      	lsls	r3, r3, #16
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c0:	061b      	lsls	r3, r3, #24
 80022c2:	491b      	ldr	r1, [pc, #108]	; (8002330 <HAL_RCC_OscConfig+0x470>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022c8:	4b1b      	ldr	r3, [pc, #108]	; (8002338 <HAL_RCC_OscConfig+0x478>)
 80022ca:	2201      	movs	r2, #1
 80022cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ce:	f7fe fed1 	bl	8001074 <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022d6:	f7fe fecd 	bl	8001074 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e05c      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e8:	4b11      	ldr	r3, [pc, #68]	; (8002330 <HAL_RCC_OscConfig+0x470>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0f0      	beq.n	80022d6 <HAL_RCC_OscConfig+0x416>
 80022f4:	e054      	b.n	80023a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f6:	4b10      	ldr	r3, [pc, #64]	; (8002338 <HAL_RCC_OscConfig+0x478>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fc:	f7fe feba 	bl	8001074 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002304:	f7fe feb6 	bl	8001074 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e045      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002316:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_RCC_OscConfig+0x470>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0x444>
 8002322:	e03d      	b.n	80023a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d107      	bne.n	800233c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e038      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
 8002330:	40023800 	.word	0x40023800
 8002334:	40007000 	.word	0x40007000
 8002338:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800233c:	4b1b      	ldr	r3, [pc, #108]	; (80023ac <HAL_RCC_OscConfig+0x4ec>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d028      	beq.n	800239c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002354:	429a      	cmp	r2, r3
 8002356:	d121      	bne.n	800239c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002362:	429a      	cmp	r2, r3
 8002364:	d11a      	bne.n	800239c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800236c:	4013      	ands	r3, r2
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002372:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002374:	4293      	cmp	r3, r2
 8002376:	d111      	bne.n	800239c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002382:	085b      	lsrs	r3, r3, #1
 8002384:	3b01      	subs	r3, #1
 8002386:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002388:	429a      	cmp	r2, r3
 800238a:	d107      	bne.n	800239c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002396:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002398:	429a      	cmp	r2, r3
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e000      	b.n	80023a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40023800 	.word	0x40023800

080023b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e0cc      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023c4:	4b68      	ldr	r3, [pc, #416]	; (8002568 <HAL_RCC_ClockConfig+0x1b8>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 030f 	and.w	r3, r3, #15
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d90c      	bls.n	80023ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d2:	4b65      	ldr	r3, [pc, #404]	; (8002568 <HAL_RCC_ClockConfig+0x1b8>)
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023da:	4b63      	ldr	r3, [pc, #396]	; (8002568 <HAL_RCC_ClockConfig+0x1b8>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d001      	beq.n	80023ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e0b8      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d020      	beq.n	800243a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b00      	cmp	r3, #0
 8002402:	d005      	beq.n	8002410 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002404:	4b59      	ldr	r3, [pc, #356]	; (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	4a58      	ldr	r2, [pc, #352]	; (800256c <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800240e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0308 	and.w	r3, r3, #8
 8002418:	2b00      	cmp	r3, #0
 800241a:	d005      	beq.n	8002428 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800241c:	4b53      	ldr	r3, [pc, #332]	; (800256c <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	4a52      	ldr	r2, [pc, #328]	; (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002422:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002426:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002428:	4b50      	ldr	r3, [pc, #320]	; (800256c <HAL_RCC_ClockConfig+0x1bc>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	494d      	ldr	r1, [pc, #308]	; (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	4313      	orrs	r3, r2
 8002438:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d044      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d107      	bne.n	800245e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244e:	4b47      	ldr	r3, [pc, #284]	; (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d119      	bne.n	800248e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e07f      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b02      	cmp	r3, #2
 8002464:	d003      	beq.n	800246e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800246a:	2b03      	cmp	r3, #3
 800246c:	d107      	bne.n	800247e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800246e:	4b3f      	ldr	r3, [pc, #252]	; (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d109      	bne.n	800248e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e06f      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800247e:	4b3b      	ldr	r3, [pc, #236]	; (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e067      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800248e:	4b37      	ldr	r3, [pc, #220]	; (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f023 0203 	bic.w	r2, r3, #3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	4934      	ldr	r1, [pc, #208]	; (800256c <HAL_RCC_ClockConfig+0x1bc>)
 800249c:	4313      	orrs	r3, r2
 800249e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024a0:	f7fe fde8 	bl	8001074 <HAL_GetTick>
 80024a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a6:	e00a      	b.n	80024be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a8:	f7fe fde4 	bl	8001074 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e04f      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024be:	4b2b      	ldr	r3, [pc, #172]	; (800256c <HAL_RCC_ClockConfig+0x1bc>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 020c 	and.w	r2, r3, #12
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d1eb      	bne.n	80024a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024d0:	4b25      	ldr	r3, [pc, #148]	; (8002568 <HAL_RCC_ClockConfig+0x1b8>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 030f 	and.w	r3, r3, #15
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d20c      	bcs.n	80024f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024de:	4b22      	ldr	r3, [pc, #136]	; (8002568 <HAL_RCC_ClockConfig+0x1b8>)
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e6:	4b20      	ldr	r3, [pc, #128]	; (8002568 <HAL_RCC_ClockConfig+0x1b8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d001      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e032      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	d008      	beq.n	8002516 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002504:	4b19      	ldr	r3, [pc, #100]	; (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	4916      	ldr	r1, [pc, #88]	; (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002512:	4313      	orrs	r3, r2
 8002514:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d009      	beq.n	8002536 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002522:	4b12      	ldr	r3, [pc, #72]	; (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	490e      	ldr	r1, [pc, #56]	; (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	4313      	orrs	r3, r2
 8002534:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002536:	f000 f821 	bl	800257c <HAL_RCC_GetSysClockFreq>
 800253a:	4602      	mov	r2, r0
 800253c:	4b0b      	ldr	r3, [pc, #44]	; (800256c <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	091b      	lsrs	r3, r3, #4
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	490a      	ldr	r1, [pc, #40]	; (8002570 <HAL_RCC_ClockConfig+0x1c0>)
 8002548:	5ccb      	ldrb	r3, [r1, r3]
 800254a:	fa22 f303 	lsr.w	r3, r2, r3
 800254e:	4a09      	ldr	r2, [pc, #36]	; (8002574 <HAL_RCC_ClockConfig+0x1c4>)
 8002550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002552:	4b09      	ldr	r3, [pc, #36]	; (8002578 <HAL_RCC_ClockConfig+0x1c8>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7fe fc46 	bl	8000de8 <HAL_InitTick>

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40023c00 	.word	0x40023c00
 800256c:	40023800 	.word	0x40023800
 8002570:	08008630 	.word	0x08008630
 8002574:	20000000 	.word	0x20000000
 8002578:	20000004 	.word	0x20000004

0800257c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800257c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002580:	b094      	sub	sp, #80	; 0x50
 8002582:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002584:	2300      	movs	r3, #0
 8002586:	647b      	str	r3, [r7, #68]	; 0x44
 8002588:	2300      	movs	r3, #0
 800258a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800258c:	2300      	movs	r3, #0
 800258e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002590:	2300      	movs	r3, #0
 8002592:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002594:	4b79      	ldr	r3, [pc, #484]	; (800277c <HAL_RCC_GetSysClockFreq+0x200>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f003 030c 	and.w	r3, r3, #12
 800259c:	2b08      	cmp	r3, #8
 800259e:	d00d      	beq.n	80025bc <HAL_RCC_GetSysClockFreq+0x40>
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	f200 80e1 	bhi.w	8002768 <HAL_RCC_GetSysClockFreq+0x1ec>
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d002      	beq.n	80025b0 <HAL_RCC_GetSysClockFreq+0x34>
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	d003      	beq.n	80025b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80025ae:	e0db      	b.n	8002768 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025b0:	4b73      	ldr	r3, [pc, #460]	; (8002780 <HAL_RCC_GetSysClockFreq+0x204>)
 80025b2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80025b4:	e0db      	b.n	800276e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025b6:	4b73      	ldr	r3, [pc, #460]	; (8002784 <HAL_RCC_GetSysClockFreq+0x208>)
 80025b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025ba:	e0d8      	b.n	800276e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025bc:	4b6f      	ldr	r3, [pc, #444]	; (800277c <HAL_RCC_GetSysClockFreq+0x200>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025c4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025c6:	4b6d      	ldr	r3, [pc, #436]	; (800277c <HAL_RCC_GetSysClockFreq+0x200>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d063      	beq.n	800269a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025d2:	4b6a      	ldr	r3, [pc, #424]	; (800277c <HAL_RCC_GetSysClockFreq+0x200>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	099b      	lsrs	r3, r3, #6
 80025d8:	2200      	movs	r2, #0
 80025da:	63bb      	str	r3, [r7, #56]	; 0x38
 80025dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80025de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025e4:	633b      	str	r3, [r7, #48]	; 0x30
 80025e6:	2300      	movs	r3, #0
 80025e8:	637b      	str	r3, [r7, #52]	; 0x34
 80025ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80025ee:	4622      	mov	r2, r4
 80025f0:	462b      	mov	r3, r5
 80025f2:	f04f 0000 	mov.w	r0, #0
 80025f6:	f04f 0100 	mov.w	r1, #0
 80025fa:	0159      	lsls	r1, r3, #5
 80025fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002600:	0150      	lsls	r0, r2, #5
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	4621      	mov	r1, r4
 8002608:	1a51      	subs	r1, r2, r1
 800260a:	6139      	str	r1, [r7, #16]
 800260c:	4629      	mov	r1, r5
 800260e:	eb63 0301 	sbc.w	r3, r3, r1
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	f04f 0200 	mov.w	r2, #0
 8002618:	f04f 0300 	mov.w	r3, #0
 800261c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002620:	4659      	mov	r1, fp
 8002622:	018b      	lsls	r3, r1, #6
 8002624:	4651      	mov	r1, sl
 8002626:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800262a:	4651      	mov	r1, sl
 800262c:	018a      	lsls	r2, r1, #6
 800262e:	4651      	mov	r1, sl
 8002630:	ebb2 0801 	subs.w	r8, r2, r1
 8002634:	4659      	mov	r1, fp
 8002636:	eb63 0901 	sbc.w	r9, r3, r1
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	f04f 0300 	mov.w	r3, #0
 8002642:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002646:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800264a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800264e:	4690      	mov	r8, r2
 8002650:	4699      	mov	r9, r3
 8002652:	4623      	mov	r3, r4
 8002654:	eb18 0303 	adds.w	r3, r8, r3
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	462b      	mov	r3, r5
 800265c:	eb49 0303 	adc.w	r3, r9, r3
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	f04f 0300 	mov.w	r3, #0
 800266a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800266e:	4629      	mov	r1, r5
 8002670:	024b      	lsls	r3, r1, #9
 8002672:	4621      	mov	r1, r4
 8002674:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002678:	4621      	mov	r1, r4
 800267a:	024a      	lsls	r2, r1, #9
 800267c:	4610      	mov	r0, r2
 800267e:	4619      	mov	r1, r3
 8002680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002682:	2200      	movs	r2, #0
 8002684:	62bb      	str	r3, [r7, #40]	; 0x28
 8002686:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002688:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800268c:	f7fd fe08 	bl	80002a0 <__aeabi_uldivmod>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4613      	mov	r3, r2
 8002696:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002698:	e058      	b.n	800274c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800269a:	4b38      	ldr	r3, [pc, #224]	; (800277c <HAL_RCC_GetSysClockFreq+0x200>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	099b      	lsrs	r3, r3, #6
 80026a0:	2200      	movs	r2, #0
 80026a2:	4618      	mov	r0, r3
 80026a4:	4611      	mov	r1, r2
 80026a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026aa:	623b      	str	r3, [r7, #32]
 80026ac:	2300      	movs	r3, #0
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24
 80026b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026b4:	4642      	mov	r2, r8
 80026b6:	464b      	mov	r3, r9
 80026b8:	f04f 0000 	mov.w	r0, #0
 80026bc:	f04f 0100 	mov.w	r1, #0
 80026c0:	0159      	lsls	r1, r3, #5
 80026c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026c6:	0150      	lsls	r0, r2, #5
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	4641      	mov	r1, r8
 80026ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80026d2:	4649      	mov	r1, r9
 80026d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	f04f 0300 	mov.w	r3, #0
 80026e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026ec:	ebb2 040a 	subs.w	r4, r2, sl
 80026f0:	eb63 050b 	sbc.w	r5, r3, fp
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	f04f 0300 	mov.w	r3, #0
 80026fc:	00eb      	lsls	r3, r5, #3
 80026fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002702:	00e2      	lsls	r2, r4, #3
 8002704:	4614      	mov	r4, r2
 8002706:	461d      	mov	r5, r3
 8002708:	4643      	mov	r3, r8
 800270a:	18e3      	adds	r3, r4, r3
 800270c:	603b      	str	r3, [r7, #0]
 800270e:	464b      	mov	r3, r9
 8002710:	eb45 0303 	adc.w	r3, r5, r3
 8002714:	607b      	str	r3, [r7, #4]
 8002716:	f04f 0200 	mov.w	r2, #0
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002722:	4629      	mov	r1, r5
 8002724:	028b      	lsls	r3, r1, #10
 8002726:	4621      	mov	r1, r4
 8002728:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800272c:	4621      	mov	r1, r4
 800272e:	028a      	lsls	r2, r1, #10
 8002730:	4610      	mov	r0, r2
 8002732:	4619      	mov	r1, r3
 8002734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002736:	2200      	movs	r2, #0
 8002738:	61bb      	str	r3, [r7, #24]
 800273a:	61fa      	str	r2, [r7, #28]
 800273c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002740:	f7fd fdae 	bl	80002a0 <__aeabi_uldivmod>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4613      	mov	r3, r2
 800274a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800274c:	4b0b      	ldr	r3, [pc, #44]	; (800277c <HAL_RCC_GetSysClockFreq+0x200>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	0c1b      	lsrs	r3, r3, #16
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	3301      	adds	r3, #1
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800275c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800275e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002760:	fbb2 f3f3 	udiv	r3, r2, r3
 8002764:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002766:	e002      	b.n	800276e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002768:	4b05      	ldr	r3, [pc, #20]	; (8002780 <HAL_RCC_GetSysClockFreq+0x204>)
 800276a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800276c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800276e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002770:	4618      	mov	r0, r3
 8002772:	3750      	adds	r7, #80	; 0x50
 8002774:	46bd      	mov	sp, r7
 8002776:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800277a:	bf00      	nop
 800277c:	40023800 	.word	0x40023800
 8002780:	00f42400 	.word	0x00f42400
 8002784:	007a1200 	.word	0x007a1200

08002788 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800278c:	4b03      	ldr	r3, [pc, #12]	; (800279c <HAL_RCC_GetHCLKFreq+0x14>)
 800278e:	681b      	ldr	r3, [r3, #0]
}
 8002790:	4618      	mov	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	20000000 	.word	0x20000000

080027a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027a4:	f7ff fff0 	bl	8002788 <HAL_RCC_GetHCLKFreq>
 80027a8:	4602      	mov	r2, r0
 80027aa:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	0a9b      	lsrs	r3, r3, #10
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	4903      	ldr	r1, [pc, #12]	; (80027c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027b6:	5ccb      	ldrb	r3, [r1, r3]
 80027b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027bc:	4618      	mov	r0, r3
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40023800 	.word	0x40023800
 80027c4:	08008640 	.word	0x08008640

080027c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027cc:	f7ff ffdc 	bl	8002788 <HAL_RCC_GetHCLKFreq>
 80027d0:	4602      	mov	r2, r0
 80027d2:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	0b5b      	lsrs	r3, r3, #13
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	4903      	ldr	r1, [pc, #12]	; (80027ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80027de:	5ccb      	ldrb	r3, [r1, r3]
 80027e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40023800 	.word	0x40023800
 80027ec:	08008640 	.word	0x08008640

080027f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	220f      	movs	r2, #15
 80027fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002800:	4b12      	ldr	r3, [pc, #72]	; (800284c <HAL_RCC_GetClockConfig+0x5c>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 0203 	and.w	r2, r3, #3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800280c:	4b0f      	ldr	r3, [pc, #60]	; (800284c <HAL_RCC_GetClockConfig+0x5c>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002818:	4b0c      	ldr	r3, [pc, #48]	; (800284c <HAL_RCC_GetClockConfig+0x5c>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002824:	4b09      	ldr	r3, [pc, #36]	; (800284c <HAL_RCC_GetClockConfig+0x5c>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	08db      	lsrs	r3, r3, #3
 800282a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002832:	4b07      	ldr	r3, [pc, #28]	; (8002850 <HAL_RCC_GetClockConfig+0x60>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 020f 	and.w	r2, r3, #15
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	601a      	str	r2, [r3, #0]
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	40023800 	.word	0x40023800
 8002850:	40023c00 	.word	0x40023c00

08002854 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e041      	b.n	80028ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d106      	bne.n	8002880 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7fe f9ec 	bl	8000c58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2202      	movs	r2, #2
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3304      	adds	r3, #4
 8002890:	4619      	mov	r1, r3
 8002892:	4610      	mov	r0, r2
 8002894:	f000 fa7e 	bl	8002d94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b01      	cmp	r3, #1
 8002906:	d001      	beq.n	800290c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e04e      	b.n	80029aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2202      	movs	r2, #2
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68da      	ldr	r2, [r3, #12]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0201 	orr.w	r2, r2, #1
 8002922:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a23      	ldr	r2, [pc, #140]	; (80029b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d022      	beq.n	8002974 <HAL_TIM_Base_Start_IT+0x80>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002936:	d01d      	beq.n	8002974 <HAL_TIM_Base_Start_IT+0x80>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a1f      	ldr	r2, [pc, #124]	; (80029bc <HAL_TIM_Base_Start_IT+0xc8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d018      	beq.n	8002974 <HAL_TIM_Base_Start_IT+0x80>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a1e      	ldr	r2, [pc, #120]	; (80029c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d013      	beq.n	8002974 <HAL_TIM_Base_Start_IT+0x80>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a1c      	ldr	r2, [pc, #112]	; (80029c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00e      	beq.n	8002974 <HAL_TIM_Base_Start_IT+0x80>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a1b      	ldr	r2, [pc, #108]	; (80029c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d009      	beq.n	8002974 <HAL_TIM_Base_Start_IT+0x80>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a19      	ldr	r2, [pc, #100]	; (80029cc <HAL_TIM_Base_Start_IT+0xd8>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d004      	beq.n	8002974 <HAL_TIM_Base_Start_IT+0x80>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a18      	ldr	r2, [pc, #96]	; (80029d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d111      	bne.n	8002998 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2b06      	cmp	r3, #6
 8002984:	d010      	beq.n	80029a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f042 0201 	orr.w	r2, r2, #1
 8002994:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002996:	e007      	b.n	80029a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 0201 	orr.w	r2, r2, #1
 80029a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	40010000 	.word	0x40010000
 80029bc:	40000400 	.word	0x40000400
 80029c0:	40000800 	.word	0x40000800
 80029c4:	40000c00 	.word	0x40000c00
 80029c8:	40010400 	.word	0x40010400
 80029cc:	40014000 	.word	0x40014000
 80029d0:	40001800 	.word	0x40001800

080029d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d020      	beq.n	8002a38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d01b      	beq.n	8002a38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f06f 0202 	mvn.w	r2, #2
 8002a08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f999 	bl	8002d56 <HAL_TIM_IC_CaptureCallback>
 8002a24:	e005      	b.n	8002a32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f98b 	bl	8002d42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f99c 	bl	8002d6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	f003 0304 	and.w	r3, r3, #4
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d020      	beq.n	8002a84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d01b      	beq.n	8002a84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f06f 0204 	mvn.w	r2, #4
 8002a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2202      	movs	r2, #2
 8002a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f973 	bl	8002d56 <HAL_TIM_IC_CaptureCallback>
 8002a70:	e005      	b.n	8002a7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f965 	bl	8002d42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 f976 	bl	8002d6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d020      	beq.n	8002ad0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f003 0308 	and.w	r3, r3, #8
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d01b      	beq.n	8002ad0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f06f 0208 	mvn.w	r2, #8
 8002aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2204      	movs	r2, #4
 8002aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f94d 	bl	8002d56 <HAL_TIM_IC_CaptureCallback>
 8002abc:	e005      	b.n	8002aca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f93f 	bl	8002d42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 f950 	bl	8002d6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	f003 0310 	and.w	r3, r3, #16
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d020      	beq.n	8002b1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f003 0310 	and.w	r3, r3, #16
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d01b      	beq.n	8002b1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f06f 0210 	mvn.w	r2, #16
 8002aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2208      	movs	r2, #8
 8002af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f927 	bl	8002d56 <HAL_TIM_IC_CaptureCallback>
 8002b08:	e005      	b.n	8002b16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f919 	bl	8002d42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 f92a 	bl	8002d6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00c      	beq.n	8002b40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d007      	beq.n	8002b40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f06f 0201 	mvn.w	r2, #1
 8002b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7fd ff76 	bl	8000a2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00c      	beq.n	8002b64 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d007      	beq.n	8002b64 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 fae4 	bl	800312c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00c      	beq.n	8002b88 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d007      	beq.n	8002b88 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f8fb 	bl	8002d7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	f003 0320 	and.w	r3, r3, #32
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00c      	beq.n	8002bac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f003 0320 	and.w	r3, r3, #32
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d007      	beq.n	8002bac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f06f 0220 	mvn.w	r2, #32
 8002ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 fab6 	bl	8003118 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bac:	bf00      	nop
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d101      	bne.n	8002bd0 <HAL_TIM_ConfigClockSource+0x1c>
 8002bcc:	2302      	movs	r3, #2
 8002bce:	e0b4      	b.n	8002d3a <HAL_TIM_ConfigClockSource+0x186>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bf6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68ba      	ldr	r2, [r7, #8]
 8002bfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c08:	d03e      	beq.n	8002c88 <HAL_TIM_ConfigClockSource+0xd4>
 8002c0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c0e:	f200 8087 	bhi.w	8002d20 <HAL_TIM_ConfigClockSource+0x16c>
 8002c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c16:	f000 8086 	beq.w	8002d26 <HAL_TIM_ConfigClockSource+0x172>
 8002c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c1e:	d87f      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x16c>
 8002c20:	2b70      	cmp	r3, #112	; 0x70
 8002c22:	d01a      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0xa6>
 8002c24:	2b70      	cmp	r3, #112	; 0x70
 8002c26:	d87b      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x16c>
 8002c28:	2b60      	cmp	r3, #96	; 0x60
 8002c2a:	d050      	beq.n	8002cce <HAL_TIM_ConfigClockSource+0x11a>
 8002c2c:	2b60      	cmp	r3, #96	; 0x60
 8002c2e:	d877      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x16c>
 8002c30:	2b50      	cmp	r3, #80	; 0x50
 8002c32:	d03c      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0xfa>
 8002c34:	2b50      	cmp	r3, #80	; 0x50
 8002c36:	d873      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x16c>
 8002c38:	2b40      	cmp	r3, #64	; 0x40
 8002c3a:	d058      	beq.n	8002cee <HAL_TIM_ConfigClockSource+0x13a>
 8002c3c:	2b40      	cmp	r3, #64	; 0x40
 8002c3e:	d86f      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x16c>
 8002c40:	2b30      	cmp	r3, #48	; 0x30
 8002c42:	d064      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0x15a>
 8002c44:	2b30      	cmp	r3, #48	; 0x30
 8002c46:	d86b      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x16c>
 8002c48:	2b20      	cmp	r3, #32
 8002c4a:	d060      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0x15a>
 8002c4c:	2b20      	cmp	r3, #32
 8002c4e:	d867      	bhi.n	8002d20 <HAL_TIM_ConfigClockSource+0x16c>
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d05c      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0x15a>
 8002c54:	2b10      	cmp	r3, #16
 8002c56:	d05a      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0x15a>
 8002c58:	e062      	b.n	8002d20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c6a:	f000 f9b9 	bl	8002fe0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	609a      	str	r2, [r3, #8]
      break;
 8002c86:	e04f      	b.n	8002d28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c98:	f000 f9a2 	bl	8002fe0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689a      	ldr	r2, [r3, #8]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002caa:	609a      	str	r2, [r3, #8]
      break;
 8002cac:	e03c      	b.n	8002d28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cba:	461a      	mov	r2, r3
 8002cbc:	f000 f916 	bl	8002eec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2150      	movs	r1, #80	; 0x50
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 f96f 	bl	8002faa <TIM_ITRx_SetConfig>
      break;
 8002ccc:	e02c      	b.n	8002d28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cda:	461a      	mov	r2, r3
 8002cdc:	f000 f935 	bl	8002f4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2160      	movs	r1, #96	; 0x60
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 f95f 	bl	8002faa <TIM_ITRx_SetConfig>
      break;
 8002cec:	e01c      	b.n	8002d28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	f000 f8f6 	bl	8002eec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2140      	movs	r1, #64	; 0x40
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 f94f 	bl	8002faa <TIM_ITRx_SetConfig>
      break;
 8002d0c:	e00c      	b.n	8002d28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4619      	mov	r1, r3
 8002d18:	4610      	mov	r0, r2
 8002d1a:	f000 f946 	bl	8002faa <TIM_ITRx_SetConfig>
      break;
 8002d1e:	e003      	b.n	8002d28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	73fb      	strb	r3, [r7, #15]
      break;
 8002d24:	e000      	b.n	8002d28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
	...

08002d94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a46      	ldr	r2, [pc, #280]	; (8002ec0 <TIM_Base_SetConfig+0x12c>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d013      	beq.n	8002dd4 <TIM_Base_SetConfig+0x40>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db2:	d00f      	beq.n	8002dd4 <TIM_Base_SetConfig+0x40>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a43      	ldr	r2, [pc, #268]	; (8002ec4 <TIM_Base_SetConfig+0x130>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d00b      	beq.n	8002dd4 <TIM_Base_SetConfig+0x40>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a42      	ldr	r2, [pc, #264]	; (8002ec8 <TIM_Base_SetConfig+0x134>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d007      	beq.n	8002dd4 <TIM_Base_SetConfig+0x40>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a41      	ldr	r2, [pc, #260]	; (8002ecc <TIM_Base_SetConfig+0x138>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d003      	beq.n	8002dd4 <TIM_Base_SetConfig+0x40>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a40      	ldr	r2, [pc, #256]	; (8002ed0 <TIM_Base_SetConfig+0x13c>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d108      	bne.n	8002de6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a35      	ldr	r2, [pc, #212]	; (8002ec0 <TIM_Base_SetConfig+0x12c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d02b      	beq.n	8002e46 <TIM_Base_SetConfig+0xb2>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df4:	d027      	beq.n	8002e46 <TIM_Base_SetConfig+0xb2>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a32      	ldr	r2, [pc, #200]	; (8002ec4 <TIM_Base_SetConfig+0x130>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d023      	beq.n	8002e46 <TIM_Base_SetConfig+0xb2>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a31      	ldr	r2, [pc, #196]	; (8002ec8 <TIM_Base_SetConfig+0x134>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d01f      	beq.n	8002e46 <TIM_Base_SetConfig+0xb2>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a30      	ldr	r2, [pc, #192]	; (8002ecc <TIM_Base_SetConfig+0x138>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d01b      	beq.n	8002e46 <TIM_Base_SetConfig+0xb2>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a2f      	ldr	r2, [pc, #188]	; (8002ed0 <TIM_Base_SetConfig+0x13c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d017      	beq.n	8002e46 <TIM_Base_SetConfig+0xb2>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a2e      	ldr	r2, [pc, #184]	; (8002ed4 <TIM_Base_SetConfig+0x140>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d013      	beq.n	8002e46 <TIM_Base_SetConfig+0xb2>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a2d      	ldr	r2, [pc, #180]	; (8002ed8 <TIM_Base_SetConfig+0x144>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d00f      	beq.n	8002e46 <TIM_Base_SetConfig+0xb2>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a2c      	ldr	r2, [pc, #176]	; (8002edc <TIM_Base_SetConfig+0x148>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d00b      	beq.n	8002e46 <TIM_Base_SetConfig+0xb2>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a2b      	ldr	r2, [pc, #172]	; (8002ee0 <TIM_Base_SetConfig+0x14c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d007      	beq.n	8002e46 <TIM_Base_SetConfig+0xb2>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a2a      	ldr	r2, [pc, #168]	; (8002ee4 <TIM_Base_SetConfig+0x150>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d003      	beq.n	8002e46 <TIM_Base_SetConfig+0xb2>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a29      	ldr	r2, [pc, #164]	; (8002ee8 <TIM_Base_SetConfig+0x154>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d108      	bne.n	8002e58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a10      	ldr	r2, [pc, #64]	; (8002ec0 <TIM_Base_SetConfig+0x12c>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d003      	beq.n	8002e8c <TIM_Base_SetConfig+0xf8>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a12      	ldr	r2, [pc, #72]	; (8002ed0 <TIM_Base_SetConfig+0x13c>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d103      	bne.n	8002e94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	691a      	ldr	r2, [r3, #16]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d105      	bne.n	8002eb2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	f023 0201 	bic.w	r2, r3, #1
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	611a      	str	r2, [r3, #16]
  }
}
 8002eb2:	bf00      	nop
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	40010000 	.word	0x40010000
 8002ec4:	40000400 	.word	0x40000400
 8002ec8:	40000800 	.word	0x40000800
 8002ecc:	40000c00 	.word	0x40000c00
 8002ed0:	40010400 	.word	0x40010400
 8002ed4:	40014000 	.word	0x40014000
 8002ed8:	40014400 	.word	0x40014400
 8002edc:	40014800 	.word	0x40014800
 8002ee0:	40001800 	.word	0x40001800
 8002ee4:	40001c00 	.word	0x40001c00
 8002ee8:	40002000 	.word	0x40002000

08002eec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b087      	sub	sp, #28
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	f023 0201 	bic.w	r2, r3, #1
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f023 030a 	bic.w	r3, r3, #10
 8002f28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	621a      	str	r2, [r3, #32]
}
 8002f3e:	bf00      	nop
 8002f40:	371c      	adds	r7, #28
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b087      	sub	sp, #28
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	60f8      	str	r0, [r7, #12]
 8002f52:	60b9      	str	r1, [r7, #8]
 8002f54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	f023 0210 	bic.w	r2, r3, #16
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	031b      	lsls	r3, r3, #12
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f86:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	011b      	lsls	r3, r3, #4
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	621a      	str	r2, [r3, #32]
}
 8002f9e:	bf00      	nop
 8002fa0:	371c      	adds	r7, #28
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b085      	sub	sp, #20
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
 8002fb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	f043 0307 	orr.w	r3, r3, #7
 8002fcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	609a      	str	r2, [r3, #8]
}
 8002fd4:	bf00      	nop
 8002fd6:	3714      	adds	r7, #20
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b087      	sub	sp, #28
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
 8002fec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ffa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	021a      	lsls	r2, r3, #8
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	431a      	orrs	r2, r3
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	4313      	orrs	r3, r2
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	4313      	orrs	r3, r2
 800300c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	609a      	str	r2, [r3, #8]
}
 8003014:	bf00      	nop
 8003016:	371c      	adds	r7, #28
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003030:	2b01      	cmp	r3, #1
 8003032:	d101      	bne.n	8003038 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003034:	2302      	movs	r3, #2
 8003036:	e05a      	b.n	80030ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800305e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a21      	ldr	r2, [pc, #132]	; (80030fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d022      	beq.n	80030c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003084:	d01d      	beq.n	80030c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a1d      	ldr	r2, [pc, #116]	; (8003100 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d018      	beq.n	80030c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a1b      	ldr	r2, [pc, #108]	; (8003104 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d013      	beq.n	80030c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a1a      	ldr	r2, [pc, #104]	; (8003108 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d00e      	beq.n	80030c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a18      	ldr	r2, [pc, #96]	; (800310c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d009      	beq.n	80030c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a17      	ldr	r2, [pc, #92]	; (8003110 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d004      	beq.n	80030c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a15      	ldr	r2, [pc, #84]	; (8003114 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d10c      	bne.n	80030dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	40010000 	.word	0x40010000
 8003100:	40000400 	.word	0x40000400
 8003104:	40000800 	.word	0x40000800
 8003108:	40000c00 	.word	0x40000c00
 800310c:	40010400 	.word	0x40010400
 8003110:	40014000 	.word	0x40014000
 8003114:	40001800 	.word	0x40001800

08003118 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e042      	b.n	80031d8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d106      	bne.n	800316c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7fd fd9c 	bl	8000ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2224      	movs	r2, #36	; 0x24
 8003170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003182:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 f82b 	bl	80031e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	691a      	ldr	r2, [r3, #16]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003198:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695a      	ldr	r2, [r3, #20]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68da      	ldr	r2, [r3, #12]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2220      	movs	r2, #32
 80031c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2220      	movs	r2, #32
 80031cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3708      	adds	r7, #8
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031e4:	b0c0      	sub	sp, #256	; 0x100
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80031f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031fc:	68d9      	ldr	r1, [r3, #12]
 80031fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	ea40 0301 	orr.w	r3, r0, r1
 8003208:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800320a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	431a      	orrs	r2, r3
 8003218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	431a      	orrs	r2, r3
 8003220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	4313      	orrs	r3, r2
 8003228:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800322c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003238:	f021 010c 	bic.w	r1, r1, #12
 800323c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003246:	430b      	orrs	r3, r1
 8003248:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800324a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800325a:	6999      	ldr	r1, [r3, #24]
 800325c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	ea40 0301 	orr.w	r3, r0, r1
 8003266:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	4b8f      	ldr	r3, [pc, #572]	; (80034ac <UART_SetConfig+0x2cc>)
 8003270:	429a      	cmp	r2, r3
 8003272:	d005      	beq.n	8003280 <UART_SetConfig+0xa0>
 8003274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	4b8d      	ldr	r3, [pc, #564]	; (80034b0 <UART_SetConfig+0x2d0>)
 800327c:	429a      	cmp	r2, r3
 800327e:	d104      	bne.n	800328a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003280:	f7ff faa2 	bl	80027c8 <HAL_RCC_GetPCLK2Freq>
 8003284:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003288:	e003      	b.n	8003292 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800328a:	f7ff fa89 	bl	80027a0 <HAL_RCC_GetPCLK1Freq>
 800328e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800329c:	f040 810c 	bne.w	80034b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032a4:	2200      	movs	r2, #0
 80032a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80032aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80032ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80032b2:	4622      	mov	r2, r4
 80032b4:	462b      	mov	r3, r5
 80032b6:	1891      	adds	r1, r2, r2
 80032b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80032ba:	415b      	adcs	r3, r3
 80032bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80032c2:	4621      	mov	r1, r4
 80032c4:	eb12 0801 	adds.w	r8, r2, r1
 80032c8:	4629      	mov	r1, r5
 80032ca:	eb43 0901 	adc.w	r9, r3, r1
 80032ce:	f04f 0200 	mov.w	r2, #0
 80032d2:	f04f 0300 	mov.w	r3, #0
 80032d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032e2:	4690      	mov	r8, r2
 80032e4:	4699      	mov	r9, r3
 80032e6:	4623      	mov	r3, r4
 80032e8:	eb18 0303 	adds.w	r3, r8, r3
 80032ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80032f0:	462b      	mov	r3, r5
 80032f2:	eb49 0303 	adc.w	r3, r9, r3
 80032f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80032fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003306:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800330a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800330e:	460b      	mov	r3, r1
 8003310:	18db      	adds	r3, r3, r3
 8003312:	653b      	str	r3, [r7, #80]	; 0x50
 8003314:	4613      	mov	r3, r2
 8003316:	eb42 0303 	adc.w	r3, r2, r3
 800331a:	657b      	str	r3, [r7, #84]	; 0x54
 800331c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003320:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003324:	f7fc ffbc 	bl	80002a0 <__aeabi_uldivmod>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	4b61      	ldr	r3, [pc, #388]	; (80034b4 <UART_SetConfig+0x2d4>)
 800332e:	fba3 2302 	umull	r2, r3, r3, r2
 8003332:	095b      	lsrs	r3, r3, #5
 8003334:	011c      	lsls	r4, r3, #4
 8003336:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800333a:	2200      	movs	r2, #0
 800333c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003340:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003344:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003348:	4642      	mov	r2, r8
 800334a:	464b      	mov	r3, r9
 800334c:	1891      	adds	r1, r2, r2
 800334e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003350:	415b      	adcs	r3, r3
 8003352:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003354:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003358:	4641      	mov	r1, r8
 800335a:	eb12 0a01 	adds.w	sl, r2, r1
 800335e:	4649      	mov	r1, r9
 8003360:	eb43 0b01 	adc.w	fp, r3, r1
 8003364:	f04f 0200 	mov.w	r2, #0
 8003368:	f04f 0300 	mov.w	r3, #0
 800336c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003370:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003374:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003378:	4692      	mov	sl, r2
 800337a:	469b      	mov	fp, r3
 800337c:	4643      	mov	r3, r8
 800337e:	eb1a 0303 	adds.w	r3, sl, r3
 8003382:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003386:	464b      	mov	r3, r9
 8003388:	eb4b 0303 	adc.w	r3, fp, r3
 800338c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800339c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80033a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80033a4:	460b      	mov	r3, r1
 80033a6:	18db      	adds	r3, r3, r3
 80033a8:	643b      	str	r3, [r7, #64]	; 0x40
 80033aa:	4613      	mov	r3, r2
 80033ac:	eb42 0303 	adc.w	r3, r2, r3
 80033b0:	647b      	str	r3, [r7, #68]	; 0x44
 80033b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80033b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80033ba:	f7fc ff71 	bl	80002a0 <__aeabi_uldivmod>
 80033be:	4602      	mov	r2, r0
 80033c0:	460b      	mov	r3, r1
 80033c2:	4611      	mov	r1, r2
 80033c4:	4b3b      	ldr	r3, [pc, #236]	; (80034b4 <UART_SetConfig+0x2d4>)
 80033c6:	fba3 2301 	umull	r2, r3, r3, r1
 80033ca:	095b      	lsrs	r3, r3, #5
 80033cc:	2264      	movs	r2, #100	; 0x64
 80033ce:	fb02 f303 	mul.w	r3, r2, r3
 80033d2:	1acb      	subs	r3, r1, r3
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80033da:	4b36      	ldr	r3, [pc, #216]	; (80034b4 <UART_SetConfig+0x2d4>)
 80033dc:	fba3 2302 	umull	r2, r3, r3, r2
 80033e0:	095b      	lsrs	r3, r3, #5
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033e8:	441c      	add	r4, r3
 80033ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033ee:	2200      	movs	r2, #0
 80033f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80033f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80033fc:	4642      	mov	r2, r8
 80033fe:	464b      	mov	r3, r9
 8003400:	1891      	adds	r1, r2, r2
 8003402:	63b9      	str	r1, [r7, #56]	; 0x38
 8003404:	415b      	adcs	r3, r3
 8003406:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003408:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800340c:	4641      	mov	r1, r8
 800340e:	1851      	adds	r1, r2, r1
 8003410:	6339      	str	r1, [r7, #48]	; 0x30
 8003412:	4649      	mov	r1, r9
 8003414:	414b      	adcs	r3, r1
 8003416:	637b      	str	r3, [r7, #52]	; 0x34
 8003418:	f04f 0200 	mov.w	r2, #0
 800341c:	f04f 0300 	mov.w	r3, #0
 8003420:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003424:	4659      	mov	r1, fp
 8003426:	00cb      	lsls	r3, r1, #3
 8003428:	4651      	mov	r1, sl
 800342a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800342e:	4651      	mov	r1, sl
 8003430:	00ca      	lsls	r2, r1, #3
 8003432:	4610      	mov	r0, r2
 8003434:	4619      	mov	r1, r3
 8003436:	4603      	mov	r3, r0
 8003438:	4642      	mov	r2, r8
 800343a:	189b      	adds	r3, r3, r2
 800343c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003440:	464b      	mov	r3, r9
 8003442:	460a      	mov	r2, r1
 8003444:	eb42 0303 	adc.w	r3, r2, r3
 8003448:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800344c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003458:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800345c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003460:	460b      	mov	r3, r1
 8003462:	18db      	adds	r3, r3, r3
 8003464:	62bb      	str	r3, [r7, #40]	; 0x28
 8003466:	4613      	mov	r3, r2
 8003468:	eb42 0303 	adc.w	r3, r2, r3
 800346c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800346e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003472:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003476:	f7fc ff13 	bl	80002a0 <__aeabi_uldivmod>
 800347a:	4602      	mov	r2, r0
 800347c:	460b      	mov	r3, r1
 800347e:	4b0d      	ldr	r3, [pc, #52]	; (80034b4 <UART_SetConfig+0x2d4>)
 8003480:	fba3 1302 	umull	r1, r3, r3, r2
 8003484:	095b      	lsrs	r3, r3, #5
 8003486:	2164      	movs	r1, #100	; 0x64
 8003488:	fb01 f303 	mul.w	r3, r1, r3
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	3332      	adds	r3, #50	; 0x32
 8003492:	4a08      	ldr	r2, [pc, #32]	; (80034b4 <UART_SetConfig+0x2d4>)
 8003494:	fba2 2303 	umull	r2, r3, r2, r3
 8003498:	095b      	lsrs	r3, r3, #5
 800349a:	f003 0207 	and.w	r2, r3, #7
 800349e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4422      	add	r2, r4
 80034a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80034a8:	e106      	b.n	80036b8 <UART_SetConfig+0x4d8>
 80034aa:	bf00      	nop
 80034ac:	40011000 	.word	0x40011000
 80034b0:	40011400 	.word	0x40011400
 80034b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034bc:	2200      	movs	r2, #0
 80034be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80034c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80034c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80034ca:	4642      	mov	r2, r8
 80034cc:	464b      	mov	r3, r9
 80034ce:	1891      	adds	r1, r2, r2
 80034d0:	6239      	str	r1, [r7, #32]
 80034d2:	415b      	adcs	r3, r3
 80034d4:	627b      	str	r3, [r7, #36]	; 0x24
 80034d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034da:	4641      	mov	r1, r8
 80034dc:	1854      	adds	r4, r2, r1
 80034de:	4649      	mov	r1, r9
 80034e0:	eb43 0501 	adc.w	r5, r3, r1
 80034e4:	f04f 0200 	mov.w	r2, #0
 80034e8:	f04f 0300 	mov.w	r3, #0
 80034ec:	00eb      	lsls	r3, r5, #3
 80034ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034f2:	00e2      	lsls	r2, r4, #3
 80034f4:	4614      	mov	r4, r2
 80034f6:	461d      	mov	r5, r3
 80034f8:	4643      	mov	r3, r8
 80034fa:	18e3      	adds	r3, r4, r3
 80034fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003500:	464b      	mov	r3, r9
 8003502:	eb45 0303 	adc.w	r3, r5, r3
 8003506:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800350a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003516:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800351a:	f04f 0200 	mov.w	r2, #0
 800351e:	f04f 0300 	mov.w	r3, #0
 8003522:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003526:	4629      	mov	r1, r5
 8003528:	008b      	lsls	r3, r1, #2
 800352a:	4621      	mov	r1, r4
 800352c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003530:	4621      	mov	r1, r4
 8003532:	008a      	lsls	r2, r1, #2
 8003534:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003538:	f7fc feb2 	bl	80002a0 <__aeabi_uldivmod>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	4b60      	ldr	r3, [pc, #384]	; (80036c4 <UART_SetConfig+0x4e4>)
 8003542:	fba3 2302 	umull	r2, r3, r3, r2
 8003546:	095b      	lsrs	r3, r3, #5
 8003548:	011c      	lsls	r4, r3, #4
 800354a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800354e:	2200      	movs	r2, #0
 8003550:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003554:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003558:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800355c:	4642      	mov	r2, r8
 800355e:	464b      	mov	r3, r9
 8003560:	1891      	adds	r1, r2, r2
 8003562:	61b9      	str	r1, [r7, #24]
 8003564:	415b      	adcs	r3, r3
 8003566:	61fb      	str	r3, [r7, #28]
 8003568:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800356c:	4641      	mov	r1, r8
 800356e:	1851      	adds	r1, r2, r1
 8003570:	6139      	str	r1, [r7, #16]
 8003572:	4649      	mov	r1, r9
 8003574:	414b      	adcs	r3, r1
 8003576:	617b      	str	r3, [r7, #20]
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003584:	4659      	mov	r1, fp
 8003586:	00cb      	lsls	r3, r1, #3
 8003588:	4651      	mov	r1, sl
 800358a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800358e:	4651      	mov	r1, sl
 8003590:	00ca      	lsls	r2, r1, #3
 8003592:	4610      	mov	r0, r2
 8003594:	4619      	mov	r1, r3
 8003596:	4603      	mov	r3, r0
 8003598:	4642      	mov	r2, r8
 800359a:	189b      	adds	r3, r3, r2
 800359c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80035a0:	464b      	mov	r3, r9
 80035a2:	460a      	mov	r2, r1
 80035a4:	eb42 0303 	adc.w	r3, r2, r3
 80035a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80035ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80035b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80035b8:	f04f 0200 	mov.w	r2, #0
 80035bc:	f04f 0300 	mov.w	r3, #0
 80035c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80035c4:	4649      	mov	r1, r9
 80035c6:	008b      	lsls	r3, r1, #2
 80035c8:	4641      	mov	r1, r8
 80035ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035ce:	4641      	mov	r1, r8
 80035d0:	008a      	lsls	r2, r1, #2
 80035d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80035d6:	f7fc fe63 	bl	80002a0 <__aeabi_uldivmod>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	4611      	mov	r1, r2
 80035e0:	4b38      	ldr	r3, [pc, #224]	; (80036c4 <UART_SetConfig+0x4e4>)
 80035e2:	fba3 2301 	umull	r2, r3, r3, r1
 80035e6:	095b      	lsrs	r3, r3, #5
 80035e8:	2264      	movs	r2, #100	; 0x64
 80035ea:	fb02 f303 	mul.w	r3, r2, r3
 80035ee:	1acb      	subs	r3, r1, r3
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	3332      	adds	r3, #50	; 0x32
 80035f4:	4a33      	ldr	r2, [pc, #204]	; (80036c4 <UART_SetConfig+0x4e4>)
 80035f6:	fba2 2303 	umull	r2, r3, r2, r3
 80035fa:	095b      	lsrs	r3, r3, #5
 80035fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003600:	441c      	add	r4, r3
 8003602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003606:	2200      	movs	r2, #0
 8003608:	673b      	str	r3, [r7, #112]	; 0x70
 800360a:	677a      	str	r2, [r7, #116]	; 0x74
 800360c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003610:	4642      	mov	r2, r8
 8003612:	464b      	mov	r3, r9
 8003614:	1891      	adds	r1, r2, r2
 8003616:	60b9      	str	r1, [r7, #8]
 8003618:	415b      	adcs	r3, r3
 800361a:	60fb      	str	r3, [r7, #12]
 800361c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003620:	4641      	mov	r1, r8
 8003622:	1851      	adds	r1, r2, r1
 8003624:	6039      	str	r1, [r7, #0]
 8003626:	4649      	mov	r1, r9
 8003628:	414b      	adcs	r3, r1
 800362a:	607b      	str	r3, [r7, #4]
 800362c:	f04f 0200 	mov.w	r2, #0
 8003630:	f04f 0300 	mov.w	r3, #0
 8003634:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003638:	4659      	mov	r1, fp
 800363a:	00cb      	lsls	r3, r1, #3
 800363c:	4651      	mov	r1, sl
 800363e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003642:	4651      	mov	r1, sl
 8003644:	00ca      	lsls	r2, r1, #3
 8003646:	4610      	mov	r0, r2
 8003648:	4619      	mov	r1, r3
 800364a:	4603      	mov	r3, r0
 800364c:	4642      	mov	r2, r8
 800364e:	189b      	adds	r3, r3, r2
 8003650:	66bb      	str	r3, [r7, #104]	; 0x68
 8003652:	464b      	mov	r3, r9
 8003654:	460a      	mov	r2, r1
 8003656:	eb42 0303 	adc.w	r3, r2, r3
 800365a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800365c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	663b      	str	r3, [r7, #96]	; 0x60
 8003666:	667a      	str	r2, [r7, #100]	; 0x64
 8003668:	f04f 0200 	mov.w	r2, #0
 800366c:	f04f 0300 	mov.w	r3, #0
 8003670:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003674:	4649      	mov	r1, r9
 8003676:	008b      	lsls	r3, r1, #2
 8003678:	4641      	mov	r1, r8
 800367a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800367e:	4641      	mov	r1, r8
 8003680:	008a      	lsls	r2, r1, #2
 8003682:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003686:	f7fc fe0b 	bl	80002a0 <__aeabi_uldivmod>
 800368a:	4602      	mov	r2, r0
 800368c:	460b      	mov	r3, r1
 800368e:	4b0d      	ldr	r3, [pc, #52]	; (80036c4 <UART_SetConfig+0x4e4>)
 8003690:	fba3 1302 	umull	r1, r3, r3, r2
 8003694:	095b      	lsrs	r3, r3, #5
 8003696:	2164      	movs	r1, #100	; 0x64
 8003698:	fb01 f303 	mul.w	r3, r1, r3
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	011b      	lsls	r3, r3, #4
 80036a0:	3332      	adds	r3, #50	; 0x32
 80036a2:	4a08      	ldr	r2, [pc, #32]	; (80036c4 <UART_SetConfig+0x4e4>)
 80036a4:	fba2 2303 	umull	r2, r3, r2, r3
 80036a8:	095b      	lsrs	r3, r3, #5
 80036aa:	f003 020f 	and.w	r2, r3, #15
 80036ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4422      	add	r2, r4
 80036b6:	609a      	str	r2, [r3, #8]
}
 80036b8:	bf00      	nop
 80036ba:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80036be:	46bd      	mov	sp, r7
 80036c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036c4:	51eb851f 	.word	0x51eb851f

080036c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80036c8:	b084      	sub	sp, #16
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b084      	sub	sp, #16
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
 80036d2:	f107 001c 	add.w	r0, r7, #28
 80036d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80036da:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d123      	bne.n	800372a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80036f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800370a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800370e:	2b01      	cmp	r3, #1
 8003710:	d105      	bne.n	800371e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 faa0 	bl	8003c64 <USB_CoreReset>
 8003724:	4603      	mov	r3, r0
 8003726:	73fb      	strb	r3, [r7, #15]
 8003728:	e01b      	b.n	8003762 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 fa94 	bl	8003c64 <USB_CoreReset>
 800373c:	4603      	mov	r3, r0
 800373e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003740:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003744:	2b00      	cmp	r3, #0
 8003746:	d106      	bne.n	8003756 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	639a      	str	r2, [r3, #56]	; 0x38
 8003754:	e005      	b.n	8003762 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003762:	7fbb      	ldrb	r3, [r7, #30]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d10b      	bne.n	8003780 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f043 0206 	orr.w	r2, r3, #6
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f043 0220 	orr.w	r2, r3, #32
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003780:	7bfb      	ldrb	r3, [r7, #15]
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800378c:	b004      	add	sp, #16
 800378e:	4770      	bx	lr

08003790 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f023 0201 	bic.w	r2, r3, #1
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b084      	sub	sp, #16
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
 80037ba:	460b      	mov	r3, r1
 80037bc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80037be:	2300      	movs	r3, #0
 80037c0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80037ce:	78fb      	ldrb	r3, [r7, #3]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d115      	bne.n	8003800 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80037e0:	200a      	movs	r0, #10
 80037e2:	f7fd fc53 	bl	800108c <HAL_Delay>
      ms += 10U;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	330a      	adds	r3, #10
 80037ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 fa2b 	bl	8003c48 <USB_GetMode>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d01e      	beq.n	8003836 <USB_SetCurrentMode+0x84>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2bc7      	cmp	r3, #199	; 0xc7
 80037fc:	d9f0      	bls.n	80037e0 <USB_SetCurrentMode+0x2e>
 80037fe:	e01a      	b.n	8003836 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003800:	78fb      	ldrb	r3, [r7, #3]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d115      	bne.n	8003832 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003812:	200a      	movs	r0, #10
 8003814:	f7fd fc3a 	bl	800108c <HAL_Delay>
      ms += 10U;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	330a      	adds	r3, #10
 800381c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 fa12 	bl	8003c48 <USB_GetMode>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d005      	beq.n	8003836 <USB_SetCurrentMode+0x84>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2bc7      	cmp	r3, #199	; 0xc7
 800382e:	d9f0      	bls.n	8003812 <USB_SetCurrentMode+0x60>
 8003830:	e001      	b.n	8003836 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e005      	b.n	8003842 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2bc8      	cmp	r3, #200	; 0xc8
 800383a:	d101      	bne.n	8003840 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e000      	b.n	8003842 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
	...

0800384c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800384c:	b084      	sub	sp, #16
 800384e:	b580      	push	{r7, lr}
 8003850:	b086      	sub	sp, #24
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
 8003856:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800385a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800385e:	2300      	movs	r3, #0
 8003860:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003866:	2300      	movs	r3, #0
 8003868:	613b      	str	r3, [r7, #16]
 800386a:	e009      	b.n	8003880 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	3340      	adds	r3, #64	; 0x40
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	2200      	movs	r2, #0
 8003878:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	3301      	adds	r3, #1
 800387e:	613b      	str	r3, [r7, #16]
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	2b0e      	cmp	r3, #14
 8003884:	d9f2      	bls.n	800386c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003886:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800388a:	2b00      	cmp	r3, #0
 800388c:	d11c      	bne.n	80038c8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800389c:	f043 0302 	orr.w	r3, r3, #2
 80038a0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038be:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	639a      	str	r2, [r3, #56]	; 0x38
 80038c6:	e00b      	b.n	80038e0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038cc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80038e6:	461a      	mov	r2, r3
 80038e8:	2300      	movs	r3, #0
 80038ea:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80038ec:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d10d      	bne.n	8003910 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80038f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d104      	bne.n	8003906 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80038fc:	2100      	movs	r1, #0
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f968 	bl	8003bd4 <USB_SetDevSpeed>
 8003904:	e008      	b.n	8003918 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003906:	2101      	movs	r1, #1
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f963 	bl	8003bd4 <USB_SetDevSpeed>
 800390e:	e003      	b.n	8003918 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003910:	2103      	movs	r1, #3
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f95e 	bl	8003bd4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003918:	2110      	movs	r1, #16
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f8fa 	bl	8003b14 <USB_FlushTxFifo>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f924 	bl	8003b78 <USB_FlushRxFifo>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003940:	461a      	mov	r2, r3
 8003942:	2300      	movs	r3, #0
 8003944:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800394c:	461a      	mov	r2, r3
 800394e:	2300      	movs	r3, #0
 8003950:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003958:	461a      	mov	r2, r3
 800395a:	2300      	movs	r3, #0
 800395c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800395e:	2300      	movs	r3, #0
 8003960:	613b      	str	r3, [r7, #16]
 8003962:	e043      	b.n	80039ec <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	015a      	lsls	r2, r3, #5
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4413      	add	r3, r2
 800396c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003976:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800397a:	d118      	bne.n	80039ae <USB_DevInit+0x162>
    {
      if (i == 0U)
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10a      	bne.n	8003998 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	015a      	lsls	r2, r3, #5
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	4413      	add	r3, r2
 800398a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800398e:	461a      	mov	r2, r3
 8003990:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	e013      	b.n	80039c0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039a4:	461a      	mov	r2, r3
 80039a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80039aa:	6013      	str	r3, [r2, #0]
 80039ac:	e008      	b.n	80039c0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	015a      	lsls	r2, r3, #5
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ba:	461a      	mov	r2, r3
 80039bc:	2300      	movs	r3, #0
 80039be:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	015a      	lsls	r2, r3, #5
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4413      	add	r3, r2
 80039c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039cc:	461a      	mov	r2, r3
 80039ce:	2300      	movs	r3, #0
 80039d0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	015a      	lsls	r2, r3, #5
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	4413      	add	r3, r2
 80039da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039de:	461a      	mov	r2, r3
 80039e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	3301      	adds	r3, #1
 80039ea:	613b      	str	r3, [r7, #16]
 80039ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80039f0:	461a      	mov	r2, r3
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d3b5      	bcc.n	8003964 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039f8:	2300      	movs	r3, #0
 80039fa:	613b      	str	r3, [r7, #16]
 80039fc:	e043      	b.n	8003a86 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	015a      	lsls	r2, r3, #5
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a14:	d118      	bne.n	8003a48 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10a      	bne.n	8003a32 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a28:	461a      	mov	r2, r3
 8003a2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a2e:	6013      	str	r3, [r2, #0]
 8003a30:	e013      	b.n	8003a5a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	015a      	lsls	r2, r3, #5
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	4413      	add	r3, r2
 8003a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	e008      	b.n	8003a5a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	015a      	lsls	r2, r3, #5
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a54:	461a      	mov	r2, r3
 8003a56:	2300      	movs	r3, #0
 8003a58:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	015a      	lsls	r2, r3, #5
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	4413      	add	r3, r2
 8003a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a66:	461a      	mov	r2, r3
 8003a68:	2300      	movs	r3, #0
 8003a6a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a78:	461a      	mov	r2, r3
 8003a7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a7e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	3301      	adds	r3, #1
 8003a84:	613b      	str	r3, [r7, #16]
 8003a86:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d3b5      	bcc.n	80039fe <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aa4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003ab2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003ab4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d105      	bne.n	8003ac8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	f043 0210 	orr.w	r2, r3, #16
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	699a      	ldr	r2, [r3, #24]
 8003acc:	4b10      	ldr	r3, [pc, #64]	; (8003b10 <USB_DevInit+0x2c4>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003ad4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d005      	beq.n	8003ae8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	f043 0208 	orr.w	r2, r3, #8
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003ae8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d107      	bne.n	8003b00 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003af8:	f043 0304 	orr.w	r3, r3, #4
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b00:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3718      	adds	r7, #24
 8003b06:	46bd      	mov	sp, r7
 8003b08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b0c:	b004      	add	sp, #16
 8003b0e:	4770      	bx	lr
 8003b10:	803c3800 	.word	0x803c3800

08003b14 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	3301      	adds	r3, #1
 8003b26:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003b2e:	d901      	bls.n	8003b34 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e01b      	b.n	8003b6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	daf2      	bge.n	8003b22 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	019b      	lsls	r3, r3, #6
 8003b44:	f043 0220 	orr.w	r2, r3, #32
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003b58:	d901      	bls.n	8003b5e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e006      	b.n	8003b6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	2b20      	cmp	r3, #32
 8003b68:	d0f0      	beq.n	8003b4c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3714      	adds	r7, #20
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	3301      	adds	r3, #1
 8003b88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003b90:	d901      	bls.n	8003b96 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e018      	b.n	8003bc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	daf2      	bge.n	8003b84 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2210      	movs	r2, #16
 8003ba6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	3301      	adds	r3, #1
 8003bac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003bb4:	d901      	bls.n	8003bba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e006      	b.n	8003bc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	f003 0310 	and.w	r3, r3, #16
 8003bc2:	2b10      	cmp	r3, #16
 8003bc4:	d0f0      	beq.n	8003ba8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3714      	adds	r7, #20
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	460b      	mov	r3, r1
 8003bde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	78fb      	ldrb	r3, [r7, #3]
 8003bee:	68f9      	ldr	r1, [r7, #12]
 8003bf0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b085      	sub	sp, #20
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003c20:	f023 0303 	bic.w	r3, r3, #3
 8003c24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c34:	f043 0302 	orr.w	r3, r3, #2
 8003c38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	f003 0301 	and.w	r3, r3, #1
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	3301      	adds	r3, #1
 8003c74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003c7c:	d901      	bls.n	8003c82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e01b      	b.n	8003cba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	daf2      	bge.n	8003c70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	f043 0201 	orr.w	r2, r3, #1
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003ca6:	d901      	bls.n	8003cac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e006      	b.n	8003cba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d0f0      	beq.n	8003c9a <USB_CoreReset+0x36>

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003cca:	f000 ff35 	bl	8004b38 <vTaskStartScheduler>
  
  return osOK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f103 0208 	add.w	r2, r3, #8
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003cec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f103 0208 	add.w	r2, r3, #8
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f103 0208 	add.w	r2, r3, #8
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b085      	sub	sp, #20
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
 8003d36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	1c5a      	adds	r2, r3, #1
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	601a      	str	r2, [r3, #0]
}
 8003d6a:	bf00      	nop
 8003d6c:	3714      	adds	r7, #20
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d76:	b480      	push	{r7}
 8003d78:	b085      	sub	sp, #20
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
 8003d7e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d8c:	d103      	bne.n	8003d96 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	e00c      	b.n	8003db0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	3308      	adds	r3, #8
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	e002      	b.n	8003da4 <vListInsert+0x2e>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d2f6      	bcs.n	8003d9e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	601a      	str	r2, [r3, #0]
}
 8003ddc:	bf00      	nop
 8003dde:	3714      	adds	r7, #20
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6892      	ldr	r2, [r2, #8]
 8003dfe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6852      	ldr	r2, [r2, #4]
 8003e08:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d103      	bne.n	8003e1c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	1e5a      	subs	r2, r3, #1
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10a      	bne.n	8003e66 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e54:	f383 8811 	msr	BASEPRI, r3
 8003e58:	f3bf 8f6f 	isb	sy
 8003e5c:	f3bf 8f4f 	dsb	sy
 8003e60:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003e62:	bf00      	nop
 8003e64:	e7fe      	b.n	8003e64 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003e66:	f001 fd9d 	bl	80059a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e72:	68f9      	ldr	r1, [r7, #12]
 8003e74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003e76:	fb01 f303 	mul.w	r3, r1, r3
 8003e7a:	441a      	add	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e96:	3b01      	subs	r3, #1
 8003e98:	68f9      	ldr	r1, [r7, #12]
 8003e9a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003e9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ea0:	441a      	add	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	22ff      	movs	r2, #255	; 0xff
 8003eaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	22ff      	movs	r2, #255	; 0xff
 8003eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d114      	bne.n	8003ee6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d01a      	beq.n	8003efa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	3310      	adds	r3, #16
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f001 f87b 	bl	8004fc4 <xTaskRemoveFromEventList>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d012      	beq.n	8003efa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003ed4:	4b0c      	ldr	r3, [pc, #48]	; (8003f08 <xQueueGenericReset+0xcc>)
 8003ed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	f3bf 8f4f 	dsb	sy
 8003ee0:	f3bf 8f6f 	isb	sy
 8003ee4:	e009      	b.n	8003efa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	3310      	adds	r3, #16
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff fef2 	bl	8003cd4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	3324      	adds	r3, #36	; 0x24
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7ff feed 	bl	8003cd4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003efa:	f001 fd83 	bl	8005a04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003efe:	2301      	movs	r3, #1
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	e000ed04 	.word	0xe000ed04

08003f0c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08a      	sub	sp, #40	; 0x28
 8003f10:	af02      	add	r7, sp, #8
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	4613      	mov	r3, r2
 8003f18:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10a      	bne.n	8003f36 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f24:	f383 8811 	msr	BASEPRI, r3
 8003f28:	f3bf 8f6f 	isb	sy
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	613b      	str	r3, [r7, #16]
}
 8003f32:	bf00      	nop
 8003f34:	e7fe      	b.n	8003f34 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	fb02 f303 	mul.w	r3, r2, r3
 8003f3e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	3350      	adds	r3, #80	; 0x50
 8003f44:	4618      	mov	r0, r3
 8003f46:	f001 fe0f 	bl	8005b68 <pvPortMalloc>
 8003f4a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00d      	beq.n	8003f6e <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	3350      	adds	r3, #80	; 0x50
 8003f5a:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f5c:	79fa      	ldrb	r2, [r7, #7]
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	4613      	mov	r3, r2
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	68b9      	ldr	r1, [r7, #8]
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 f805 	bl	8003f78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003f6e:	69bb      	ldr	r3, [r7, #24]
	}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3720      	adds	r7, #32
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
 8003f84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d103      	bne.n	8003f94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	e002      	b.n	8003f9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	69b8      	ldr	r0, [r7, #24]
 8003faa:	f7ff ff47 	bl	8003e3c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	78fa      	ldrb	r2, [r7, #3]
 8003fb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003fb6:	bf00      	nop
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b086      	sub	sp, #24
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
 8003fc6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10a      	bne.n	8003fe4 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8003fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd2:	f383 8811 	msr	BASEPRI, r3
 8003fd6:	f3bf 8f6f 	isb	sy
 8003fda:	f3bf 8f4f 	dsb	sy
 8003fde:	613b      	str	r3, [r7, #16]
}
 8003fe0:	bf00      	nop
 8003fe2:	e7fe      	b.n	8003fe2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d90a      	bls.n	8004002 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8003fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff0:	f383 8811 	msr	BASEPRI, r3
 8003ff4:	f3bf 8f6f 	isb	sy
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	60fb      	str	r3, [r7, #12]
}
 8003ffe:	bf00      	nop
 8004000:	e7fe      	b.n	8004000 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004002:	2202      	movs	r2, #2
 8004004:	2100      	movs	r1, #0
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7ff ff80 	bl	8003f0c <xQueueGenericCreate>
 800400c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d002      	beq.n	800401a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800401a:	697b      	ldr	r3, [r7, #20]
	}
 800401c:	4618      	mov	r0, r3
 800401e:	3718      	adds	r7, #24
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b08e      	sub	sp, #56	; 0x38
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
 8004030:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004032:	2300      	movs	r3, #0
 8004034:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800403a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10a      	bne.n	8004056 <xQueueGenericSend+0x32>
	__asm volatile
 8004040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004052:	bf00      	nop
 8004054:	e7fe      	b.n	8004054 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d103      	bne.n	8004064 <xQueueGenericSend+0x40>
 800405c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <xQueueGenericSend+0x44>
 8004064:	2301      	movs	r3, #1
 8004066:	e000      	b.n	800406a <xQueueGenericSend+0x46>
 8004068:	2300      	movs	r3, #0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d10a      	bne.n	8004084 <xQueueGenericSend+0x60>
	__asm volatile
 800406e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004072:	f383 8811 	msr	BASEPRI, r3
 8004076:	f3bf 8f6f 	isb	sy
 800407a:	f3bf 8f4f 	dsb	sy
 800407e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004080:	bf00      	nop
 8004082:	e7fe      	b.n	8004082 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	2b02      	cmp	r3, #2
 8004088:	d103      	bne.n	8004092 <xQueueGenericSend+0x6e>
 800408a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408e:	2b01      	cmp	r3, #1
 8004090:	d101      	bne.n	8004096 <xQueueGenericSend+0x72>
 8004092:	2301      	movs	r3, #1
 8004094:	e000      	b.n	8004098 <xQueueGenericSend+0x74>
 8004096:	2300      	movs	r3, #0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10a      	bne.n	80040b2 <xQueueGenericSend+0x8e>
	__asm volatile
 800409c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a0:	f383 8811 	msr	BASEPRI, r3
 80040a4:	f3bf 8f6f 	isb	sy
 80040a8:	f3bf 8f4f 	dsb	sy
 80040ac:	623b      	str	r3, [r7, #32]
}
 80040ae:	bf00      	nop
 80040b0:	e7fe      	b.n	80040b0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040b2:	f001 f925 	bl	8005300 <xTaskGetSchedulerState>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d102      	bne.n	80040c2 <xQueueGenericSend+0x9e>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <xQueueGenericSend+0xa2>
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <xQueueGenericSend+0xa4>
 80040c6:	2300      	movs	r3, #0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10a      	bne.n	80040e2 <xQueueGenericSend+0xbe>
	__asm volatile
 80040cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d0:	f383 8811 	msr	BASEPRI, r3
 80040d4:	f3bf 8f6f 	isb	sy
 80040d8:	f3bf 8f4f 	dsb	sy
 80040dc:	61fb      	str	r3, [r7, #28]
}
 80040de:	bf00      	nop
 80040e0:	e7fe      	b.n	80040e0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80040e2:	f001 fc5f 	bl	80059a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d302      	bcc.n	80040f8 <xQueueGenericSend+0xd4>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d129      	bne.n	800414c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040f8:	683a      	ldr	r2, [r7, #0]
 80040fa:	68b9      	ldr	r1, [r7, #8]
 80040fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040fe:	f000 fa93 	bl	8004628 <prvCopyDataToQueue>
 8004102:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	2b00      	cmp	r3, #0
 800410a:	d010      	beq.n	800412e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800410c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410e:	3324      	adds	r3, #36	; 0x24
 8004110:	4618      	mov	r0, r3
 8004112:	f000 ff57 	bl	8004fc4 <xTaskRemoveFromEventList>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d013      	beq.n	8004144 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800411c:	4b3f      	ldr	r3, [pc, #252]	; (800421c <xQueueGenericSend+0x1f8>)
 800411e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	f3bf 8f4f 	dsb	sy
 8004128:	f3bf 8f6f 	isb	sy
 800412c:	e00a      	b.n	8004144 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800412e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004130:	2b00      	cmp	r3, #0
 8004132:	d007      	beq.n	8004144 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004134:	4b39      	ldr	r3, [pc, #228]	; (800421c <xQueueGenericSend+0x1f8>)
 8004136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	f3bf 8f4f 	dsb	sy
 8004140:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004144:	f001 fc5e 	bl	8005a04 <vPortExitCritical>
				return pdPASS;
 8004148:	2301      	movs	r3, #1
 800414a:	e063      	b.n	8004214 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d103      	bne.n	800415a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004152:	f001 fc57 	bl	8005a04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004156:	2300      	movs	r3, #0
 8004158:	e05c      	b.n	8004214 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800415a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800415c:	2b00      	cmp	r3, #0
 800415e:	d106      	bne.n	800416e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004160:	f107 0314 	add.w	r3, r7, #20
 8004164:	4618      	mov	r0, r3
 8004166:	f000 ff8f 	bl	8005088 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800416a:	2301      	movs	r3, #1
 800416c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800416e:	f001 fc49 	bl	8005a04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004172:	f000 fd2b 	bl	8004bcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004176:	f001 fc15 	bl	80059a4 <vPortEnterCritical>
 800417a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004180:	b25b      	sxtb	r3, r3
 8004182:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004186:	d103      	bne.n	8004190 <xQueueGenericSend+0x16c>
 8004188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004192:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004196:	b25b      	sxtb	r3, r3
 8004198:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800419c:	d103      	bne.n	80041a6 <xQueueGenericSend+0x182>
 800419e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041a6:	f001 fc2d 	bl	8005a04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041aa:	1d3a      	adds	r2, r7, #4
 80041ac:	f107 0314 	add.w	r3, r7, #20
 80041b0:	4611      	mov	r1, r2
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 ff7e 	bl	80050b4 <xTaskCheckForTimeOut>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d124      	bne.n	8004208 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80041be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041c0:	f000 fb2a 	bl	8004818 <prvIsQueueFull>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d018      	beq.n	80041fc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80041ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041cc:	3310      	adds	r3, #16
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	4611      	mov	r1, r2
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 fed2 	bl	8004f7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80041d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041da:	f000 fab5 	bl	8004748 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80041de:	f000 fd03 	bl	8004be8 <xTaskResumeAll>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f47f af7c 	bne.w	80040e2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80041ea:	4b0c      	ldr	r3, [pc, #48]	; (800421c <xQueueGenericSend+0x1f8>)
 80041ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041f0:	601a      	str	r2, [r3, #0]
 80041f2:	f3bf 8f4f 	dsb	sy
 80041f6:	f3bf 8f6f 	isb	sy
 80041fa:	e772      	b.n	80040e2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80041fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041fe:	f000 faa3 	bl	8004748 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004202:	f000 fcf1 	bl	8004be8 <xTaskResumeAll>
 8004206:	e76c      	b.n	80040e2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004208:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800420a:	f000 fa9d 	bl	8004748 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800420e:	f000 fceb 	bl	8004be8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004212:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004214:	4618      	mov	r0, r3
 8004216:	3738      	adds	r7, #56	; 0x38
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	e000ed04 	.word	0xe000ed04

08004220 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b08c      	sub	sp, #48	; 0x30
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800422c:	2300      	movs	r3, #0
 800422e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10a      	bne.n	8004250 <xQueueReceive+0x30>
	__asm volatile
 800423a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423e:	f383 8811 	msr	BASEPRI, r3
 8004242:	f3bf 8f6f 	isb	sy
 8004246:	f3bf 8f4f 	dsb	sy
 800424a:	623b      	str	r3, [r7, #32]
}
 800424c:	bf00      	nop
 800424e:	e7fe      	b.n	800424e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d103      	bne.n	800425e <xQueueReceive+0x3e>
 8004256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <xQueueReceive+0x42>
 800425e:	2301      	movs	r3, #1
 8004260:	e000      	b.n	8004264 <xQueueReceive+0x44>
 8004262:	2300      	movs	r3, #0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10a      	bne.n	800427e <xQueueReceive+0x5e>
	__asm volatile
 8004268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426c:	f383 8811 	msr	BASEPRI, r3
 8004270:	f3bf 8f6f 	isb	sy
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	61fb      	str	r3, [r7, #28]
}
 800427a:	bf00      	nop
 800427c:	e7fe      	b.n	800427c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800427e:	f001 f83f 	bl	8005300 <xTaskGetSchedulerState>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d102      	bne.n	800428e <xQueueReceive+0x6e>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <xQueueReceive+0x72>
 800428e:	2301      	movs	r3, #1
 8004290:	e000      	b.n	8004294 <xQueueReceive+0x74>
 8004292:	2300      	movs	r3, #0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10a      	bne.n	80042ae <xQueueReceive+0x8e>
	__asm volatile
 8004298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429c:	f383 8811 	msr	BASEPRI, r3
 80042a0:	f3bf 8f6f 	isb	sy
 80042a4:	f3bf 8f4f 	dsb	sy
 80042a8:	61bb      	str	r3, [r7, #24]
}
 80042aa:	bf00      	nop
 80042ac:	e7fe      	b.n	80042ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80042ae:	f001 fb79 	bl	80059a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d01f      	beq.n	80042fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80042be:	68b9      	ldr	r1, [r7, #8]
 80042c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042c2:	f000 fa1b 	bl	80046fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	1e5a      	subs	r2, r3, #1
 80042ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00f      	beq.n	80042f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d8:	3310      	adds	r3, #16
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 fe72 	bl	8004fc4 <xTaskRemoveFromEventList>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d007      	beq.n	80042f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80042e6:	4b3d      	ldr	r3, [pc, #244]	; (80043dc <xQueueReceive+0x1bc>)
 80042e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	f3bf 8f4f 	dsb	sy
 80042f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80042f6:	f001 fb85 	bl	8005a04 <vPortExitCritical>
				return pdPASS;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e069      	b.n	80043d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d103      	bne.n	800430c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004304:	f001 fb7e 	bl	8005a04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004308:	2300      	movs	r3, #0
 800430a:	e062      	b.n	80043d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800430c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430e:	2b00      	cmp	r3, #0
 8004310:	d106      	bne.n	8004320 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004312:	f107 0310 	add.w	r3, r7, #16
 8004316:	4618      	mov	r0, r3
 8004318:	f000 feb6 	bl	8005088 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800431c:	2301      	movs	r3, #1
 800431e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004320:	f001 fb70 	bl	8005a04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004324:	f000 fc52 	bl	8004bcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004328:	f001 fb3c 	bl	80059a4 <vPortEnterCritical>
 800432c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004332:	b25b      	sxtb	r3, r3
 8004334:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004338:	d103      	bne.n	8004342 <xQueueReceive+0x122>
 800433a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004344:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004348:	b25b      	sxtb	r3, r3
 800434a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800434e:	d103      	bne.n	8004358 <xQueueReceive+0x138>
 8004350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004352:	2200      	movs	r2, #0
 8004354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004358:	f001 fb54 	bl	8005a04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800435c:	1d3a      	adds	r2, r7, #4
 800435e:	f107 0310 	add.w	r3, r7, #16
 8004362:	4611      	mov	r1, r2
 8004364:	4618      	mov	r0, r3
 8004366:	f000 fea5 	bl	80050b4 <xTaskCheckForTimeOut>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d123      	bne.n	80043b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004370:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004372:	f000 fa3b 	bl	80047ec <prvIsQueueEmpty>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d017      	beq.n	80043ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800437c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437e:	3324      	adds	r3, #36	; 0x24
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	4611      	mov	r1, r2
 8004384:	4618      	mov	r0, r3
 8004386:	f000 fdf9 	bl	8004f7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800438a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800438c:	f000 f9dc 	bl	8004748 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004390:	f000 fc2a 	bl	8004be8 <xTaskResumeAll>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d189      	bne.n	80042ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800439a:	4b10      	ldr	r3, [pc, #64]	; (80043dc <xQueueReceive+0x1bc>)
 800439c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043a0:	601a      	str	r2, [r3, #0]
 80043a2:	f3bf 8f4f 	dsb	sy
 80043a6:	f3bf 8f6f 	isb	sy
 80043aa:	e780      	b.n	80042ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80043ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043ae:	f000 f9cb 	bl	8004748 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043b2:	f000 fc19 	bl	8004be8 <xTaskResumeAll>
 80043b6:	e77a      	b.n	80042ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80043b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043ba:	f000 f9c5 	bl	8004748 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043be:	f000 fc13 	bl	8004be8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043c4:	f000 fa12 	bl	80047ec <prvIsQueueEmpty>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f43f af6f 	beq.w	80042ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80043d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3730      	adds	r7, #48	; 0x30
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	e000ed04 	.word	0xe000ed04

080043e0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b08e      	sub	sp, #56	; 0x38
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80043ea:	2300      	movs	r3, #0
 80043ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80043f2:	2300      	movs	r3, #0
 80043f4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80043f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10a      	bne.n	8004412 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80043fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004400:	f383 8811 	msr	BASEPRI, r3
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	623b      	str	r3, [r7, #32]
}
 800440e:	bf00      	nop
 8004410:	e7fe      	b.n	8004410 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800441a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441e:	f383 8811 	msr	BASEPRI, r3
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	f3bf 8f4f 	dsb	sy
 800442a:	61fb      	str	r3, [r7, #28]
}
 800442c:	bf00      	nop
 800442e:	e7fe      	b.n	800442e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004430:	f000 ff66 	bl	8005300 <xTaskGetSchedulerState>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d102      	bne.n	8004440 <xQueueSemaphoreTake+0x60>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <xQueueSemaphoreTake+0x64>
 8004440:	2301      	movs	r3, #1
 8004442:	e000      	b.n	8004446 <xQueueSemaphoreTake+0x66>
 8004444:	2300      	movs	r3, #0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10a      	bne.n	8004460 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800444a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444e:	f383 8811 	msr	BASEPRI, r3
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	61bb      	str	r3, [r7, #24]
}
 800445c:	bf00      	nop
 800445e:	e7fe      	b.n	800445e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004460:	f001 faa0 	bl	80059a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004468:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800446a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446c:	2b00      	cmp	r3, #0
 800446e:	d024      	beq.n	80044ba <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004472:	1e5a      	subs	r2, r3, #1
 8004474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004476:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d104      	bne.n	800448a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004480:	f001 f8e6 	bl	8005650 <pvTaskIncrementMutexHeldCount>
 8004484:	4602      	mov	r2, r0
 8004486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004488:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800448a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00f      	beq.n	80044b2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004494:	3310      	adds	r3, #16
 8004496:	4618      	mov	r0, r3
 8004498:	f000 fd94 	bl	8004fc4 <xTaskRemoveFromEventList>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d007      	beq.n	80044b2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80044a2:	4b54      	ldr	r3, [pc, #336]	; (80045f4 <xQueueSemaphoreTake+0x214>)
 80044a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80044b2:	f001 faa7 	bl	8005a04 <vPortExitCritical>
				return pdPASS;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e097      	b.n	80045ea <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d111      	bne.n	80044e4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80044c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00a      	beq.n	80044dc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80044c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ca:	f383 8811 	msr	BASEPRI, r3
 80044ce:	f3bf 8f6f 	isb	sy
 80044d2:	f3bf 8f4f 	dsb	sy
 80044d6:	617b      	str	r3, [r7, #20]
}
 80044d8:	bf00      	nop
 80044da:	e7fe      	b.n	80044da <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80044dc:	f001 fa92 	bl	8005a04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80044e0:	2300      	movs	r3, #0
 80044e2:	e082      	b.n	80045ea <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80044e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d106      	bne.n	80044f8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80044ea:	f107 030c 	add.w	r3, r7, #12
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 fdca 	bl	8005088 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80044f4:	2301      	movs	r3, #1
 80044f6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80044f8:	f001 fa84 	bl	8005a04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80044fc:	f000 fb66 	bl	8004bcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004500:	f001 fa50 	bl	80059a4 <vPortEnterCritical>
 8004504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004506:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800450a:	b25b      	sxtb	r3, r3
 800450c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004510:	d103      	bne.n	800451a <xQueueSemaphoreTake+0x13a>
 8004512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800451a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004520:	b25b      	sxtb	r3, r3
 8004522:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004526:	d103      	bne.n	8004530 <xQueueSemaphoreTake+0x150>
 8004528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800452a:	2200      	movs	r2, #0
 800452c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004530:	f001 fa68 	bl	8005a04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004534:	463a      	mov	r2, r7
 8004536:	f107 030c 	add.w	r3, r7, #12
 800453a:	4611      	mov	r1, r2
 800453c:	4618      	mov	r0, r3
 800453e:	f000 fdb9 	bl	80050b4 <xTaskCheckForTimeOut>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d132      	bne.n	80045ae <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004548:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800454a:	f000 f94f 	bl	80047ec <prvIsQueueEmpty>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d026      	beq.n	80045a2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d109      	bne.n	8004570 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800455c:	f001 fa22 	bl	80059a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	4618      	mov	r0, r3
 8004566:	f000 fee9 	bl	800533c <xTaskPriorityInherit>
 800456a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800456c:	f001 fa4a 	bl	8005a04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004572:	3324      	adds	r3, #36	; 0x24
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	4611      	mov	r1, r2
 8004578:	4618      	mov	r0, r3
 800457a:	f000 fcff 	bl	8004f7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800457e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004580:	f000 f8e2 	bl	8004748 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004584:	f000 fb30 	bl	8004be8 <xTaskResumeAll>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	f47f af68 	bne.w	8004460 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004590:	4b18      	ldr	r3, [pc, #96]	; (80045f4 <xQueueSemaphoreTake+0x214>)
 8004592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	e75e      	b.n	8004460 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80045a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80045a4:	f000 f8d0 	bl	8004748 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045a8:	f000 fb1e 	bl	8004be8 <xTaskResumeAll>
 80045ac:	e758      	b.n	8004460 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80045ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80045b0:	f000 f8ca 	bl	8004748 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045b4:	f000 fb18 	bl	8004be8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80045ba:	f000 f917 	bl	80047ec <prvIsQueueEmpty>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f43f af4d 	beq.w	8004460 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80045c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00d      	beq.n	80045e8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80045cc:	f001 f9ea 	bl	80059a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80045d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80045d2:	f000 f811 	bl	80045f8 <prvGetDisinheritPriorityAfterTimeout>
 80045d6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80045d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 ffa8 	bl	8005534 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80045e4:	f001 fa0e 	bl	8005a04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80045e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3738      	adds	r7, #56	; 0x38
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	e000ed04 	.word	0xe000ed04

080045f8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	2b00      	cmp	r3, #0
 8004606:	d006      	beq.n	8004616 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f1c3 0307 	rsb	r3, r3, #7
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	e001      	b.n	800461a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004616:	2300      	movs	r3, #0
 8004618:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800461a:	68fb      	ldr	r3, [r7, #12]
	}
 800461c:	4618      	mov	r0, r3
 800461e:	3714      	adds	r7, #20
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004634:	2300      	movs	r3, #0
 8004636:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10d      	bne.n	8004662 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d14d      	bne.n	80046ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	4618      	mov	r0, r3
 8004654:	f000 fee8 	bl	8005428 <xTaskPriorityDisinherit>
 8004658:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	609a      	str	r2, [r3, #8]
 8004660:	e043      	b.n	80046ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d119      	bne.n	800469c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6858      	ldr	r0, [r3, #4]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004670:	461a      	mov	r2, r3
 8004672:	68b9      	ldr	r1, [r7, #8]
 8004674:	f003 f84b 	bl	800770e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004680:	441a      	add	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	429a      	cmp	r2, r3
 8004690:	d32b      	bcc.n	80046ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	605a      	str	r2, [r3, #4]
 800469a:	e026      	b.n	80046ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	68d8      	ldr	r0, [r3, #12]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a4:	461a      	mov	r2, r3
 80046a6:	68b9      	ldr	r1, [r7, #8]
 80046a8:	f003 f831 	bl	800770e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	68da      	ldr	r2, [r3, #12]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b4:	425b      	negs	r3, r3
 80046b6:	441a      	add	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	68da      	ldr	r2, [r3, #12]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d207      	bcs.n	80046d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d0:	425b      	negs	r3, r3
 80046d2:	441a      	add	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d105      	bne.n	80046ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d002      	beq.n	80046ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	3b01      	subs	r3, #1
 80046e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80046f2:	697b      	ldr	r3, [r7, #20]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3718      	adds	r7, #24
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	2b00      	cmp	r3, #0
 800470c:	d018      	beq.n	8004740 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68da      	ldr	r2, [r3, #12]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	441a      	add	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68da      	ldr	r2, [r3, #12]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	429a      	cmp	r2, r3
 8004726:	d303      	bcc.n	8004730 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68d9      	ldr	r1, [r3, #12]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004738:	461a      	mov	r2, r3
 800473a:	6838      	ldr	r0, [r7, #0]
 800473c:	f002 ffe7 	bl	800770e <memcpy>
	}
}
 8004740:	bf00      	nop
 8004742:	3708      	adds	r7, #8
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004750:	f001 f928 	bl	80059a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800475a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800475c:	e011      	b.n	8004782 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004762:	2b00      	cmp	r3, #0
 8004764:	d012      	beq.n	800478c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	3324      	adds	r3, #36	; 0x24
 800476a:	4618      	mov	r0, r3
 800476c:	f000 fc2a 	bl	8004fc4 <xTaskRemoveFromEventList>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004776:	f000 fcff 	bl	8005178 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800477a:	7bfb      	ldrb	r3, [r7, #15]
 800477c:	3b01      	subs	r3, #1
 800477e:	b2db      	uxtb	r3, r3
 8004780:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004786:	2b00      	cmp	r3, #0
 8004788:	dce9      	bgt.n	800475e <prvUnlockQueue+0x16>
 800478a:	e000      	b.n	800478e <prvUnlockQueue+0x46>
					break;
 800478c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	22ff      	movs	r2, #255	; 0xff
 8004792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004796:	f001 f935 	bl	8005a04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800479a:	f001 f903 	bl	80059a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047a6:	e011      	b.n	80047cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d012      	beq.n	80047d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3310      	adds	r3, #16
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 fc05 	bl	8004fc4 <xTaskRemoveFromEventList>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d001      	beq.n	80047c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80047c0:	f000 fcda 	bl	8005178 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80047c4:	7bbb      	ldrb	r3, [r7, #14]
 80047c6:	3b01      	subs	r3, #1
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	dce9      	bgt.n	80047a8 <prvUnlockQueue+0x60>
 80047d4:	e000      	b.n	80047d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80047d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	22ff      	movs	r2, #255	; 0xff
 80047dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80047e0:	f001 f910 	bl	8005a04 <vPortExitCritical>
}
 80047e4:	bf00      	nop
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80047f4:	f001 f8d6 	bl	80059a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d102      	bne.n	8004806 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004800:	2301      	movs	r3, #1
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	e001      	b.n	800480a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004806:	2300      	movs	r3, #0
 8004808:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800480a:	f001 f8fb 	bl	8005a04 <vPortExitCritical>

	return xReturn;
 800480e:	68fb      	ldr	r3, [r7, #12]
}
 8004810:	4618      	mov	r0, r3
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004820:	f001 f8c0 	bl	80059a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482c:	429a      	cmp	r2, r3
 800482e:	d102      	bne.n	8004836 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004830:	2301      	movs	r3, #1
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	e001      	b.n	800483a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004836:	2300      	movs	r3, #0
 8004838:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800483a:	f001 f8e3 	bl	8005a04 <vPortExitCritical>

	return xReturn;
 800483e:	68fb      	ldr	r3, [r7, #12]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004848:	b580      	push	{r7, lr}
 800484a:	b08c      	sub	sp, #48	; 0x30
 800484c:	af04      	add	r7, sp, #16
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	603b      	str	r3, [r7, #0]
 8004854:	4613      	mov	r3, r2
 8004856:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004858:	88fb      	ldrh	r3, [r7, #6]
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4618      	mov	r0, r3
 800485e:	f001 f983 	bl	8005b68 <pvPortMalloc>
 8004862:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00e      	beq.n	8004888 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800486a:	2064      	movs	r0, #100	; 0x64
 800486c:	f001 f97c 	bl	8005b68 <pvPortMalloc>
 8004870:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d003      	beq.n	8004880 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	631a      	str	r2, [r3, #48]	; 0x30
 800487e:	e005      	b.n	800488c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004880:	6978      	ldr	r0, [r7, #20]
 8004882:	f001 fa3d 	bl	8005d00 <vPortFree>
 8004886:	e001      	b.n	800488c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004888:	2300      	movs	r3, #0
 800488a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d013      	beq.n	80048ba <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004892:	88fa      	ldrh	r2, [r7, #6]
 8004894:	2300      	movs	r3, #0
 8004896:	9303      	str	r3, [sp, #12]
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	9302      	str	r3, [sp, #8]
 800489c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489e:	9301      	str	r3, [sp, #4]
 80048a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	68b9      	ldr	r1, [r7, #8]
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f000 f80e 	bl	80048ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048ae:	69f8      	ldr	r0, [r7, #28]
 80048b0:	f000 f8a0 	bl	80049f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80048b4:	2301      	movs	r3, #1
 80048b6:	61bb      	str	r3, [r7, #24]
 80048b8:	e002      	b.n	80048c0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80048ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80048c0:	69bb      	ldr	r3, [r7, #24]
	}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3720      	adds	r7, #32
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b088      	sub	sp, #32
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	60f8      	str	r0, [r7, #12]
 80048d2:	60b9      	str	r1, [r7, #8]
 80048d4:	607a      	str	r2, [r7, #4]
 80048d6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80048d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048da:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	461a      	mov	r2, r3
 80048e2:	21a5      	movs	r1, #165	; 0xa5
 80048e4:	f002 fe97 	bl	8007616 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80048e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80048f2:	3b01      	subs	r3, #1
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	4413      	add	r3, r2
 80048f8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	f023 0307 	bic.w	r3, r3, #7
 8004900:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	f003 0307 	and.w	r3, r3, #7
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00a      	beq.n	8004922 <prvInitialiseNewTask+0x58>
	__asm volatile
 800490c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004910:	f383 8811 	msr	BASEPRI, r3
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	617b      	str	r3, [r7, #20]
}
 800491e:	bf00      	nop
 8004920:	e7fe      	b.n	8004920 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8004922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d01f      	beq.n	800496e <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800492e:	2300      	movs	r3, #0
 8004930:	61fb      	str	r3, [r7, #28]
 8004932:	e012      	b.n	800495a <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	4413      	add	r3, r2
 800493a:	7819      	ldrb	r1, [r3, #0]
 800493c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	4413      	add	r3, r2
 8004942:	3334      	adds	r3, #52	; 0x34
 8004944:	460a      	mov	r2, r1
 8004946:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	4413      	add	r3, r2
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d006      	beq.n	8004962 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	3301      	adds	r3, #1
 8004958:	61fb      	str	r3, [r7, #28]
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	2b0f      	cmp	r3, #15
 800495e:	d9e9      	bls.n	8004934 <prvInitialiseNewTask+0x6a>
 8004960:	e000      	b.n	8004964 <prvInitialiseNewTask+0x9a>
			{
				break;
 8004962:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800496c:	e003      	b.n	8004976 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800496e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004978:	2b06      	cmp	r3, #6
 800497a:	d901      	bls.n	8004980 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800497c:	2306      	movs	r3, #6
 800497e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004982:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004984:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004988:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800498a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800498c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498e:	2200      	movs	r2, #0
 8004990:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004994:	3304      	adds	r3, #4
 8004996:	4618      	mov	r0, r3
 8004998:	f7ff f9bc 	bl	8003d14 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800499c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499e:	3318      	adds	r3, #24
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7ff f9b7 	bl	8003d14 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80049a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ae:	f1c3 0207 	rsb	r2, r3, #7
 80049b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80049b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80049bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049be:	2200      	movs	r2, #0
 80049c0:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80049c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c4:	2200      	movs	r2, #0
 80049c6:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80049c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	68f9      	ldr	r1, [r7, #12]
 80049d4:	69b8      	ldr	r0, [r7, #24]
 80049d6:	f000 feb5 	bl	8005744 <pxPortInitialiseStack>
 80049da:	4602      	mov	r2, r0
 80049dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049de:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80049e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d002      	beq.n	80049ec <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80049e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049ec:	bf00      	nop
 80049ee:	3720      	adds	r7, #32
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80049fc:	f000 ffd2 	bl	80059a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a00:	4b2c      	ldr	r3, [pc, #176]	; (8004ab4 <prvAddNewTaskToReadyList+0xc0>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	3301      	adds	r3, #1
 8004a06:	4a2b      	ldr	r2, [pc, #172]	; (8004ab4 <prvAddNewTaskToReadyList+0xc0>)
 8004a08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a0a:	4b2b      	ldr	r3, [pc, #172]	; (8004ab8 <prvAddNewTaskToReadyList+0xc4>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d109      	bne.n	8004a26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a12:	4a29      	ldr	r2, [pc, #164]	; (8004ab8 <prvAddNewTaskToReadyList+0xc4>)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a18:	4b26      	ldr	r3, [pc, #152]	; (8004ab4 <prvAddNewTaskToReadyList+0xc0>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d110      	bne.n	8004a42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a20:	f000 fbd0 	bl	80051c4 <prvInitialiseTaskLists>
 8004a24:	e00d      	b.n	8004a42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004a26:	4b25      	ldr	r3, [pc, #148]	; (8004abc <prvAddNewTaskToReadyList+0xc8>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d109      	bne.n	8004a42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a2e:	4b22      	ldr	r3, [pc, #136]	; (8004ab8 <prvAddNewTaskToReadyList+0xc4>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d802      	bhi.n	8004a42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004a3c:	4a1e      	ldr	r2, [pc, #120]	; (8004ab8 <prvAddNewTaskToReadyList+0xc4>)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004a42:	4b1f      	ldr	r3, [pc, #124]	; (8004ac0 <prvAddNewTaskToReadyList+0xcc>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	3301      	adds	r3, #1
 8004a48:	4a1d      	ldr	r2, [pc, #116]	; (8004ac0 <prvAddNewTaskToReadyList+0xcc>)
 8004a4a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004a4c:	4b1c      	ldr	r3, [pc, #112]	; (8004ac0 <prvAddNewTaskToReadyList+0xcc>)
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a58:	2201      	movs	r2, #1
 8004a5a:	409a      	lsls	r2, r3
 8004a5c:	4b19      	ldr	r3, [pc, #100]	; (8004ac4 <prvAddNewTaskToReadyList+0xd0>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	4a18      	ldr	r2, [pc, #96]	; (8004ac4 <prvAddNewTaskToReadyList+0xd0>)
 8004a64:	6013      	str	r3, [r2, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4a15      	ldr	r2, [pc, #84]	; (8004ac8 <prvAddNewTaskToReadyList+0xd4>)
 8004a74:	441a      	add	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	3304      	adds	r3, #4
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	4610      	mov	r0, r2
 8004a7e:	f7ff f956 	bl	8003d2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004a82:	f000 ffbf 	bl	8005a04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004a86:	4b0d      	ldr	r3, [pc, #52]	; (8004abc <prvAddNewTaskToReadyList+0xc8>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00e      	beq.n	8004aac <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a8e:	4b0a      	ldr	r3, [pc, #40]	; (8004ab8 <prvAddNewTaskToReadyList+0xc4>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d207      	bcs.n	8004aac <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004a9c:	4b0b      	ldr	r3, [pc, #44]	; (8004acc <prvAddNewTaskToReadyList+0xd8>)
 8004a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	f3bf 8f4f 	dsb	sy
 8004aa8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004aac:	bf00      	nop
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	20000988 	.word	0x20000988
 8004ab8:	20000888 	.word	0x20000888
 8004abc:	20000994 	.word	0x20000994
 8004ac0:	200009a4 	.word	0x200009a4
 8004ac4:	20000990 	.word	0x20000990
 8004ac8:	2000088c 	.word	0x2000088c
 8004acc:	e000ed04 	.word	0xe000ed04

08004ad0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d017      	beq.n	8004b12 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004ae2:	4b13      	ldr	r3, [pc, #76]	; (8004b30 <vTaskDelay+0x60>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00a      	beq.n	8004b00 <vTaskDelay+0x30>
	__asm volatile
 8004aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aee:	f383 8811 	msr	BASEPRI, r3
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	60bb      	str	r3, [r7, #8]
}
 8004afc:	bf00      	nop
 8004afe:	e7fe      	b.n	8004afe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004b00:	f000 f864 	bl	8004bcc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004b04:	2100      	movs	r1, #0
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 fdb6 	bl	8005678 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004b0c:	f000 f86c 	bl	8004be8 <xTaskResumeAll>
 8004b10:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d107      	bne.n	8004b28 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004b18:	4b06      	ldr	r3, [pc, #24]	; (8004b34 <vTaskDelay+0x64>)
 8004b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	f3bf 8f4f 	dsb	sy
 8004b24:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b28:	bf00      	nop
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	200009b0 	.word	0x200009b0
 8004b34:	e000ed04 	.word	0xe000ed04

08004b38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004b3e:	4b1d      	ldr	r3, [pc, #116]	; (8004bb4 <vTaskStartScheduler+0x7c>)
 8004b40:	9301      	str	r3, [sp, #4]
 8004b42:	2300      	movs	r3, #0
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	2300      	movs	r3, #0
 8004b48:	2280      	movs	r2, #128	; 0x80
 8004b4a:	491b      	ldr	r1, [pc, #108]	; (8004bb8 <vTaskStartScheduler+0x80>)
 8004b4c:	481b      	ldr	r0, [pc, #108]	; (8004bbc <vTaskStartScheduler+0x84>)
 8004b4e:	f7ff fe7b 	bl	8004848 <xTaskCreate>
 8004b52:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d118      	bne.n	8004b8c <vTaskStartScheduler+0x54>
	__asm volatile
 8004b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5e:	f383 8811 	msr	BASEPRI, r3
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	60bb      	str	r3, [r7, #8]
}
 8004b6c:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004b6e:	4b14      	ldr	r3, [pc, #80]	; (8004bc0 <vTaskStartScheduler+0x88>)
 8004b70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b74:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004b76:	4b13      	ldr	r3, [pc, #76]	; (8004bc4 <vTaskStartScheduler+0x8c>)
 8004b78:	2201      	movs	r2, #1
 8004b7a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004b7c:	4b12      	ldr	r3, [pc, #72]	; (8004bc8 <vTaskStartScheduler+0x90>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8004b82:	f7fb ff33 	bl	80009ec <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004b86:	f000 fe6b 	bl	8005860 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004b8a:	e00e      	b.n	8004baa <vTaskStartScheduler+0x72>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b92:	d10a      	bne.n	8004baa <vTaskStartScheduler+0x72>
	__asm volatile
 8004b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b98:	f383 8811 	msr	BASEPRI, r3
 8004b9c:	f3bf 8f6f 	isb	sy
 8004ba0:	f3bf 8f4f 	dsb	sy
 8004ba4:	607b      	str	r3, [r7, #4]
}
 8004ba6:	bf00      	nop
 8004ba8:	e7fe      	b.n	8004ba8 <vTaskStartScheduler+0x70>
}
 8004baa:	bf00      	nop
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	200009ac 	.word	0x200009ac
 8004bb8:	08008484 	.word	0x08008484
 8004bbc:	08005191 	.word	0x08005191
 8004bc0:	200009a8 	.word	0x200009a8
 8004bc4:	20000994 	.word	0x20000994
 8004bc8:	2000098c 	.word	0x2000098c

08004bcc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004bd0:	4b04      	ldr	r3, [pc, #16]	; (8004be4 <vTaskSuspendAll+0x18>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	4a03      	ldr	r2, [pc, #12]	; (8004be4 <vTaskSuspendAll+0x18>)
 8004bd8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004bda:	bf00      	nop
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	200009b0 	.word	0x200009b0

08004be8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004bf6:	4b41      	ldr	r3, [pc, #260]	; (8004cfc <xTaskResumeAll+0x114>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10a      	bne.n	8004c14 <xTaskResumeAll+0x2c>
	__asm volatile
 8004bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c02:	f383 8811 	msr	BASEPRI, r3
 8004c06:	f3bf 8f6f 	isb	sy
 8004c0a:	f3bf 8f4f 	dsb	sy
 8004c0e:	603b      	str	r3, [r7, #0]
}
 8004c10:	bf00      	nop
 8004c12:	e7fe      	b.n	8004c12 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004c14:	f000 fec6 	bl	80059a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004c18:	4b38      	ldr	r3, [pc, #224]	; (8004cfc <xTaskResumeAll+0x114>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	4a37      	ldr	r2, [pc, #220]	; (8004cfc <xTaskResumeAll+0x114>)
 8004c20:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c22:	4b36      	ldr	r3, [pc, #216]	; (8004cfc <xTaskResumeAll+0x114>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d161      	bne.n	8004cee <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004c2a:	4b35      	ldr	r3, [pc, #212]	; (8004d00 <xTaskResumeAll+0x118>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d05d      	beq.n	8004cee <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c32:	e02e      	b.n	8004c92 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c34:	4b33      	ldr	r3, [pc, #204]	; (8004d04 <xTaskResumeAll+0x11c>)
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	3318      	adds	r3, #24
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7ff f8d1 	bl	8003de8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	3304      	adds	r3, #4
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7ff f8cc 	bl	8003de8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c54:	2201      	movs	r2, #1
 8004c56:	409a      	lsls	r2, r3
 8004c58:	4b2b      	ldr	r3, [pc, #172]	; (8004d08 <xTaskResumeAll+0x120>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	4a2a      	ldr	r2, [pc, #168]	; (8004d08 <xTaskResumeAll+0x120>)
 8004c60:	6013      	str	r3, [r2, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c66:	4613      	mov	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4a27      	ldr	r2, [pc, #156]	; (8004d0c <xTaskResumeAll+0x124>)
 8004c70:	441a      	add	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	3304      	adds	r3, #4
 8004c76:	4619      	mov	r1, r3
 8004c78:	4610      	mov	r0, r2
 8004c7a:	f7ff f858 	bl	8003d2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c82:	4b23      	ldr	r3, [pc, #140]	; (8004d10 <xTaskResumeAll+0x128>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d302      	bcc.n	8004c92 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004c8c:	4b21      	ldr	r3, [pc, #132]	; (8004d14 <xTaskResumeAll+0x12c>)
 8004c8e:	2201      	movs	r2, #1
 8004c90:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c92:	4b1c      	ldr	r3, [pc, #112]	; (8004d04 <xTaskResumeAll+0x11c>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1cc      	bne.n	8004c34 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d001      	beq.n	8004ca4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ca0:	f000 fb0e 	bl	80052c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004ca4:	4b1c      	ldr	r3, [pc, #112]	; (8004d18 <xTaskResumeAll+0x130>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d010      	beq.n	8004cd2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004cb0:	f000 f836 	bl	8004d20 <xTaskIncrementTick>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d002      	beq.n	8004cc0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004cba:	4b16      	ldr	r3, [pc, #88]	; (8004d14 <xTaskResumeAll+0x12c>)
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1f1      	bne.n	8004cb0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004ccc:	4b12      	ldr	r3, [pc, #72]	; (8004d18 <xTaskResumeAll+0x130>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004cd2:	4b10      	ldr	r3, [pc, #64]	; (8004d14 <xTaskResumeAll+0x12c>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d009      	beq.n	8004cee <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004cde:	4b0f      	ldr	r3, [pc, #60]	; (8004d1c <xTaskResumeAll+0x134>)
 8004ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004cee:	f000 fe89 	bl	8005a04 <vPortExitCritical>

	return xAlreadyYielded;
 8004cf2:	68bb      	ldr	r3, [r7, #8]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	200009b0 	.word	0x200009b0
 8004d00:	20000988 	.word	0x20000988
 8004d04:	20000948 	.word	0x20000948
 8004d08:	20000990 	.word	0x20000990
 8004d0c:	2000088c 	.word	0x2000088c
 8004d10:	20000888 	.word	0x20000888
 8004d14:	2000099c 	.word	0x2000099c
 8004d18:	20000998 	.word	0x20000998
 8004d1c:	e000ed04 	.word	0xe000ed04

08004d20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004d26:	2300      	movs	r3, #0
 8004d28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d2a:	4b4e      	ldr	r3, [pc, #312]	; (8004e64 <xTaskIncrementTick+0x144>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f040 808e 	bne.w	8004e50 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d34:	4b4c      	ldr	r3, [pc, #304]	; (8004e68 <xTaskIncrementTick+0x148>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004d3c:	4a4a      	ldr	r2, [pc, #296]	; (8004e68 <xTaskIncrementTick+0x148>)
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d120      	bne.n	8004d8a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d48:	4b48      	ldr	r3, [pc, #288]	; (8004e6c <xTaskIncrementTick+0x14c>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00a      	beq.n	8004d68 <xTaskIncrementTick+0x48>
	__asm volatile
 8004d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d56:	f383 8811 	msr	BASEPRI, r3
 8004d5a:	f3bf 8f6f 	isb	sy
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	603b      	str	r3, [r7, #0]
}
 8004d64:	bf00      	nop
 8004d66:	e7fe      	b.n	8004d66 <xTaskIncrementTick+0x46>
 8004d68:	4b40      	ldr	r3, [pc, #256]	; (8004e6c <xTaskIncrementTick+0x14c>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	60fb      	str	r3, [r7, #12]
 8004d6e:	4b40      	ldr	r3, [pc, #256]	; (8004e70 <xTaskIncrementTick+0x150>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a3e      	ldr	r2, [pc, #248]	; (8004e6c <xTaskIncrementTick+0x14c>)
 8004d74:	6013      	str	r3, [r2, #0]
 8004d76:	4a3e      	ldr	r2, [pc, #248]	; (8004e70 <xTaskIncrementTick+0x150>)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6013      	str	r3, [r2, #0]
 8004d7c:	4b3d      	ldr	r3, [pc, #244]	; (8004e74 <xTaskIncrementTick+0x154>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	3301      	adds	r3, #1
 8004d82:	4a3c      	ldr	r2, [pc, #240]	; (8004e74 <xTaskIncrementTick+0x154>)
 8004d84:	6013      	str	r3, [r2, #0]
 8004d86:	f000 fa9b 	bl	80052c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d8a:	4b3b      	ldr	r3, [pc, #236]	; (8004e78 <xTaskIncrementTick+0x158>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d348      	bcc.n	8004e26 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d94:	4b35      	ldr	r3, [pc, #212]	; (8004e6c <xTaskIncrementTick+0x14c>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d104      	bne.n	8004da8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d9e:	4b36      	ldr	r3, [pc, #216]	; (8004e78 <xTaskIncrementTick+0x158>)
 8004da0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004da4:	601a      	str	r2, [r3, #0]
					break;
 8004da6:	e03e      	b.n	8004e26 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004da8:	4b30      	ldr	r3, [pc, #192]	; (8004e6c <xTaskIncrementTick+0x14c>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d203      	bcs.n	8004dc8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004dc0:	4a2d      	ldr	r2, [pc, #180]	; (8004e78 <xTaskIncrementTick+0x158>)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004dc6:	e02e      	b.n	8004e26 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	3304      	adds	r3, #4
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7ff f80b 	bl	8003de8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d004      	beq.n	8004de4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	3318      	adds	r3, #24
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7ff f802 	bl	8003de8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de8:	2201      	movs	r2, #1
 8004dea:	409a      	lsls	r2, r3
 8004dec:	4b23      	ldr	r3, [pc, #140]	; (8004e7c <xTaskIncrementTick+0x15c>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	4a22      	ldr	r2, [pc, #136]	; (8004e7c <xTaskIncrementTick+0x15c>)
 8004df4:	6013      	str	r3, [r2, #0]
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	4413      	add	r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	4a1f      	ldr	r2, [pc, #124]	; (8004e80 <xTaskIncrementTick+0x160>)
 8004e04:	441a      	add	r2, r3
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	3304      	adds	r3, #4
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	4610      	mov	r0, r2
 8004e0e:	f7fe ff8e 	bl	8003d2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e16:	4b1b      	ldr	r3, [pc, #108]	; (8004e84 <xTaskIncrementTick+0x164>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d3b9      	bcc.n	8004d94 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004e20:	2301      	movs	r3, #1
 8004e22:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e24:	e7b6      	b.n	8004d94 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e26:	4b17      	ldr	r3, [pc, #92]	; (8004e84 <xTaskIncrementTick+0x164>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e2c:	4914      	ldr	r1, [pc, #80]	; (8004e80 <xTaskIncrementTick+0x160>)
 8004e2e:	4613      	mov	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	440b      	add	r3, r1
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d901      	bls.n	8004e42 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004e42:	4b11      	ldr	r3, [pc, #68]	; (8004e88 <xTaskIncrementTick+0x168>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d007      	beq.n	8004e5a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	617b      	str	r3, [r7, #20]
 8004e4e:	e004      	b.n	8004e5a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004e50:	4b0e      	ldr	r3, [pc, #56]	; (8004e8c <xTaskIncrementTick+0x16c>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	3301      	adds	r3, #1
 8004e56:	4a0d      	ldr	r2, [pc, #52]	; (8004e8c <xTaskIncrementTick+0x16c>)
 8004e58:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004e5a:	697b      	ldr	r3, [r7, #20]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3718      	adds	r7, #24
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	200009b0 	.word	0x200009b0
 8004e68:	2000098c 	.word	0x2000098c
 8004e6c:	20000940 	.word	0x20000940
 8004e70:	20000944 	.word	0x20000944
 8004e74:	200009a0 	.word	0x200009a0
 8004e78:	200009a8 	.word	0x200009a8
 8004e7c:	20000990 	.word	0x20000990
 8004e80:	2000088c 	.word	0x2000088c
 8004e84:	20000888 	.word	0x20000888
 8004e88:	2000099c 	.word	0x2000099c
 8004e8c:	20000998 	.word	0x20000998

08004e90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e96:	4b32      	ldr	r3, [pc, #200]	; (8004f60 <vTaskSwitchContext+0xd0>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004e9e:	4b31      	ldr	r3, [pc, #196]	; (8004f64 <vTaskSwitchContext+0xd4>)
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ea4:	e058      	b.n	8004f58 <vTaskSwitchContext+0xc8>
		xYieldPending = pdFALSE;
 8004ea6:	4b2f      	ldr	r3, [pc, #188]	; (8004f64 <vTaskSwitchContext+0xd4>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8004eac:	f7fb fdaa 	bl	8000a04 <getRunTimeCounterValue>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	4a2d      	ldr	r2, [pc, #180]	; (8004f68 <vTaskSwitchContext+0xd8>)
 8004eb4:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8004eb6:	4b2c      	ldr	r3, [pc, #176]	; (8004f68 <vTaskSwitchContext+0xd8>)
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	4b2c      	ldr	r3, [pc, #176]	; (8004f6c <vTaskSwitchContext+0xdc>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d909      	bls.n	8004ed6 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8004ec2:	4b2b      	ldr	r3, [pc, #172]	; (8004f70 <vTaskSwitchContext+0xe0>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8004ec8:	4a27      	ldr	r2, [pc, #156]	; (8004f68 <vTaskSwitchContext+0xd8>)
 8004eca:	6810      	ldr	r0, [r2, #0]
 8004ecc:	4a27      	ldr	r2, [pc, #156]	; (8004f6c <vTaskSwitchContext+0xdc>)
 8004ece:	6812      	ldr	r2, [r2, #0]
 8004ed0:	1a82      	subs	r2, r0, r2
 8004ed2:	440a      	add	r2, r1
 8004ed4:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8004ed6:	4b24      	ldr	r3, [pc, #144]	; (8004f68 <vTaskSwitchContext+0xd8>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a24      	ldr	r2, [pc, #144]	; (8004f6c <vTaskSwitchContext+0xdc>)
 8004edc:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ede:	4b25      	ldr	r3, [pc, #148]	; (8004f74 <vTaskSwitchContext+0xe4>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	fab3 f383 	clz	r3, r3
 8004eea:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004eec:	7afb      	ldrb	r3, [r7, #11]
 8004eee:	f1c3 031f 	rsb	r3, r3, #31
 8004ef2:	617b      	str	r3, [r7, #20]
 8004ef4:	4920      	ldr	r1, [pc, #128]	; (8004f78 <vTaskSwitchContext+0xe8>)
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	440b      	add	r3, r1
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10a      	bne.n	8004f1e <vTaskSwitchContext+0x8e>
	__asm volatile
 8004f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0c:	f383 8811 	msr	BASEPRI, r3
 8004f10:	f3bf 8f6f 	isb	sy
 8004f14:	f3bf 8f4f 	dsb	sy
 8004f18:	607b      	str	r3, [r7, #4]
}
 8004f1a:	bf00      	nop
 8004f1c:	e7fe      	b.n	8004f1c <vTaskSwitchContext+0x8c>
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	4613      	mov	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4413      	add	r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	4a13      	ldr	r2, [pc, #76]	; (8004f78 <vTaskSwitchContext+0xe8>)
 8004f2a:	4413      	add	r3, r2
 8004f2c:	613b      	str	r3, [r7, #16]
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	685a      	ldr	r2, [r3, #4]
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	605a      	str	r2, [r3, #4]
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	3308      	adds	r3, #8
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d104      	bne.n	8004f4e <vTaskSwitchContext+0xbe>
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	685a      	ldr	r2, [r3, #4]
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	605a      	str	r2, [r3, #4]
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	4a06      	ldr	r2, [pc, #24]	; (8004f70 <vTaskSwitchContext+0xe0>)
 8004f56:	6013      	str	r3, [r2, #0]
}
 8004f58:	bf00      	nop
 8004f5a:	3718      	adds	r7, #24
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	200009b0 	.word	0x200009b0
 8004f64:	2000099c 	.word	0x2000099c
 8004f68:	200009b8 	.word	0x200009b8
 8004f6c:	200009b4 	.word	0x200009b4
 8004f70:	20000888 	.word	0x20000888
 8004f74:	20000990 	.word	0x20000990
 8004f78:	2000088c 	.word	0x2000088c

08004f7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10a      	bne.n	8004fa2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	60fb      	str	r3, [r7, #12]
}
 8004f9e:	bf00      	nop
 8004fa0:	e7fe      	b.n	8004fa0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004fa2:	4b07      	ldr	r3, [pc, #28]	; (8004fc0 <vTaskPlaceOnEventList+0x44>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	3318      	adds	r3, #24
 8004fa8:	4619      	mov	r1, r3
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f7fe fee3 	bl	8003d76 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004fb0:	2101      	movs	r1, #1
 8004fb2:	6838      	ldr	r0, [r7, #0]
 8004fb4:	f000 fb60 	bl	8005678 <prvAddCurrentTaskToDelayedList>
}
 8004fb8:	bf00      	nop
 8004fba:	3710      	adds	r7, #16
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	20000888 	.word	0x20000888

08004fc4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10a      	bne.n	8004ff0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fde:	f383 8811 	msr	BASEPRI, r3
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	60fb      	str	r3, [r7, #12]
}
 8004fec:	bf00      	nop
 8004fee:	e7fe      	b.n	8004fee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	3318      	adds	r3, #24
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7fe fef7 	bl	8003de8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ffa:	4b1d      	ldr	r3, [pc, #116]	; (8005070 <xTaskRemoveFromEventList+0xac>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d11c      	bne.n	800503c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	3304      	adds	r3, #4
 8005006:	4618      	mov	r0, r3
 8005008:	f7fe feee 	bl	8003de8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005010:	2201      	movs	r2, #1
 8005012:	409a      	lsls	r2, r3
 8005014:	4b17      	ldr	r3, [pc, #92]	; (8005074 <xTaskRemoveFromEventList+0xb0>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4313      	orrs	r3, r2
 800501a:	4a16      	ldr	r2, [pc, #88]	; (8005074 <xTaskRemoveFromEventList+0xb0>)
 800501c:	6013      	str	r3, [r2, #0]
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005022:	4613      	mov	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4413      	add	r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	4a13      	ldr	r2, [pc, #76]	; (8005078 <xTaskRemoveFromEventList+0xb4>)
 800502c:	441a      	add	r2, r3
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	3304      	adds	r3, #4
 8005032:	4619      	mov	r1, r3
 8005034:	4610      	mov	r0, r2
 8005036:	f7fe fe7a 	bl	8003d2e <vListInsertEnd>
 800503a:	e005      	b.n	8005048 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	3318      	adds	r3, #24
 8005040:	4619      	mov	r1, r3
 8005042:	480e      	ldr	r0, [pc, #56]	; (800507c <xTaskRemoveFromEventList+0xb8>)
 8005044:	f7fe fe73 	bl	8003d2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800504c:	4b0c      	ldr	r3, [pc, #48]	; (8005080 <xTaskRemoveFromEventList+0xbc>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005052:	429a      	cmp	r2, r3
 8005054:	d905      	bls.n	8005062 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005056:	2301      	movs	r3, #1
 8005058:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800505a:	4b0a      	ldr	r3, [pc, #40]	; (8005084 <xTaskRemoveFromEventList+0xc0>)
 800505c:	2201      	movs	r2, #1
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	e001      	b.n	8005066 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005062:	2300      	movs	r3, #0
 8005064:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005066:	697b      	ldr	r3, [r7, #20]
}
 8005068:	4618      	mov	r0, r3
 800506a:	3718      	adds	r7, #24
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	200009b0 	.word	0x200009b0
 8005074:	20000990 	.word	0x20000990
 8005078:	2000088c 	.word	0x2000088c
 800507c:	20000948 	.word	0x20000948
 8005080:	20000888 	.word	0x20000888
 8005084:	2000099c 	.word	0x2000099c

08005088 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005090:	4b06      	ldr	r3, [pc, #24]	; (80050ac <vTaskInternalSetTimeOutState+0x24>)
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005098:	4b05      	ldr	r3, [pc, #20]	; (80050b0 <vTaskInternalSetTimeOutState+0x28>)
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	605a      	str	r2, [r3, #4]
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	200009a0 	.word	0x200009a0
 80050b0:	2000098c 	.word	0x2000098c

080050b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b088      	sub	sp, #32
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10a      	bne.n	80050da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80050c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c8:	f383 8811 	msr	BASEPRI, r3
 80050cc:	f3bf 8f6f 	isb	sy
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	613b      	str	r3, [r7, #16]
}
 80050d6:	bf00      	nop
 80050d8:	e7fe      	b.n	80050d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10a      	bne.n	80050f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80050e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e4:	f383 8811 	msr	BASEPRI, r3
 80050e8:	f3bf 8f6f 	isb	sy
 80050ec:	f3bf 8f4f 	dsb	sy
 80050f0:	60fb      	str	r3, [r7, #12]
}
 80050f2:	bf00      	nop
 80050f4:	e7fe      	b.n	80050f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80050f6:	f000 fc55 	bl	80059a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80050fa:	4b1d      	ldr	r3, [pc, #116]	; (8005170 <xTaskCheckForTimeOut+0xbc>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005112:	d102      	bne.n	800511a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005114:	2300      	movs	r3, #0
 8005116:	61fb      	str	r3, [r7, #28]
 8005118:	e023      	b.n	8005162 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	4b15      	ldr	r3, [pc, #84]	; (8005174 <xTaskCheckForTimeOut+0xc0>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	429a      	cmp	r2, r3
 8005124:	d007      	beq.n	8005136 <xTaskCheckForTimeOut+0x82>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	69ba      	ldr	r2, [r7, #24]
 800512c:	429a      	cmp	r2, r3
 800512e:	d302      	bcc.n	8005136 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005130:	2301      	movs	r3, #1
 8005132:	61fb      	str	r3, [r7, #28]
 8005134:	e015      	b.n	8005162 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	429a      	cmp	r2, r3
 800513e:	d20b      	bcs.n	8005158 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	1ad2      	subs	r2, r2, r3
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f7ff ff9b 	bl	8005088 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005152:	2300      	movs	r3, #0
 8005154:	61fb      	str	r3, [r7, #28]
 8005156:	e004      	b.n	8005162 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	2200      	movs	r2, #0
 800515c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800515e:	2301      	movs	r3, #1
 8005160:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005162:	f000 fc4f 	bl	8005a04 <vPortExitCritical>

	return xReturn;
 8005166:	69fb      	ldr	r3, [r7, #28]
}
 8005168:	4618      	mov	r0, r3
 800516a:	3720      	adds	r7, #32
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	2000098c 	.word	0x2000098c
 8005174:	200009a0 	.word	0x200009a0

08005178 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005178:	b480      	push	{r7}
 800517a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800517c:	4b03      	ldr	r3, [pc, #12]	; (800518c <vTaskMissedYield+0x14>)
 800517e:	2201      	movs	r2, #1
 8005180:	601a      	str	r2, [r3, #0]
}
 8005182:	bf00      	nop
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	2000099c 	.word	0x2000099c

08005190 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005198:	f000 f854 	bl	8005244 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800519c:	4b07      	ldr	r3, [pc, #28]	; (80051bc <prvIdleTask+0x2c>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d907      	bls.n	80051b4 <prvIdleTask+0x24>
			{
				taskYIELD();
 80051a4:	4b06      	ldr	r3, [pc, #24]	; (80051c0 <prvIdleTask+0x30>)
 80051a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051aa:	601a      	str	r2, [r3, #0]
 80051ac:	f3bf 8f4f 	dsb	sy
 80051b0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80051b4:	f7fb fc32 	bl	8000a1c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80051b8:	e7ee      	b.n	8005198 <prvIdleTask+0x8>
 80051ba:	bf00      	nop
 80051bc:	2000088c 	.word	0x2000088c
 80051c0:	e000ed04 	.word	0xe000ed04

080051c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051ca:	2300      	movs	r3, #0
 80051cc:	607b      	str	r3, [r7, #4]
 80051ce:	e00c      	b.n	80051ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	4613      	mov	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4413      	add	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4a12      	ldr	r2, [pc, #72]	; (8005224 <prvInitialiseTaskLists+0x60>)
 80051dc:	4413      	add	r3, r2
 80051de:	4618      	mov	r0, r3
 80051e0:	f7fe fd78 	bl	8003cd4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3301      	adds	r3, #1
 80051e8:	607b      	str	r3, [r7, #4]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b06      	cmp	r3, #6
 80051ee:	d9ef      	bls.n	80051d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80051f0:	480d      	ldr	r0, [pc, #52]	; (8005228 <prvInitialiseTaskLists+0x64>)
 80051f2:	f7fe fd6f 	bl	8003cd4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80051f6:	480d      	ldr	r0, [pc, #52]	; (800522c <prvInitialiseTaskLists+0x68>)
 80051f8:	f7fe fd6c 	bl	8003cd4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80051fc:	480c      	ldr	r0, [pc, #48]	; (8005230 <prvInitialiseTaskLists+0x6c>)
 80051fe:	f7fe fd69 	bl	8003cd4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005202:	480c      	ldr	r0, [pc, #48]	; (8005234 <prvInitialiseTaskLists+0x70>)
 8005204:	f7fe fd66 	bl	8003cd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005208:	480b      	ldr	r0, [pc, #44]	; (8005238 <prvInitialiseTaskLists+0x74>)
 800520a:	f7fe fd63 	bl	8003cd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800520e:	4b0b      	ldr	r3, [pc, #44]	; (800523c <prvInitialiseTaskLists+0x78>)
 8005210:	4a05      	ldr	r2, [pc, #20]	; (8005228 <prvInitialiseTaskLists+0x64>)
 8005212:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005214:	4b0a      	ldr	r3, [pc, #40]	; (8005240 <prvInitialiseTaskLists+0x7c>)
 8005216:	4a05      	ldr	r2, [pc, #20]	; (800522c <prvInitialiseTaskLists+0x68>)
 8005218:	601a      	str	r2, [r3, #0]
}
 800521a:	bf00      	nop
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	2000088c 	.word	0x2000088c
 8005228:	20000918 	.word	0x20000918
 800522c:	2000092c 	.word	0x2000092c
 8005230:	20000948 	.word	0x20000948
 8005234:	2000095c 	.word	0x2000095c
 8005238:	20000974 	.word	0x20000974
 800523c:	20000940 	.word	0x20000940
 8005240:	20000944 	.word	0x20000944

08005244 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800524a:	e019      	b.n	8005280 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800524c:	f000 fbaa 	bl	80059a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005250:	4b10      	ldr	r3, [pc, #64]	; (8005294 <prvCheckTasksWaitingTermination+0x50>)
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	3304      	adds	r3, #4
 800525c:	4618      	mov	r0, r3
 800525e:	f7fe fdc3 	bl	8003de8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005262:	4b0d      	ldr	r3, [pc, #52]	; (8005298 <prvCheckTasksWaitingTermination+0x54>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	3b01      	subs	r3, #1
 8005268:	4a0b      	ldr	r2, [pc, #44]	; (8005298 <prvCheckTasksWaitingTermination+0x54>)
 800526a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800526c:	4b0b      	ldr	r3, [pc, #44]	; (800529c <prvCheckTasksWaitingTermination+0x58>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	3b01      	subs	r3, #1
 8005272:	4a0a      	ldr	r2, [pc, #40]	; (800529c <prvCheckTasksWaitingTermination+0x58>)
 8005274:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005276:	f000 fbc5 	bl	8005a04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f810 	bl	80052a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005280:	4b06      	ldr	r3, [pc, #24]	; (800529c <prvCheckTasksWaitingTermination+0x58>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1e1      	bne.n	800524c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005288:	bf00      	nop
 800528a:	bf00      	nop
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	2000095c 	.word	0x2000095c
 8005298:	20000988 	.word	0x20000988
 800529c:	20000970 	.word	0x20000970

080052a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 fd27 	bl	8005d00 <vPortFree>
			vPortFree( pxTCB );
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 fd24 	bl	8005d00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80052b8:	bf00      	nop
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052c6:	4b0c      	ldr	r3, [pc, #48]	; (80052f8 <prvResetNextTaskUnblockTime+0x38>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d104      	bne.n	80052da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80052d0:	4b0a      	ldr	r3, [pc, #40]	; (80052fc <prvResetNextTaskUnblockTime+0x3c>)
 80052d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80052d8:	e008      	b.n	80052ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052da:	4b07      	ldr	r3, [pc, #28]	; (80052f8 <prvResetNextTaskUnblockTime+0x38>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	4a04      	ldr	r2, [pc, #16]	; (80052fc <prvResetNextTaskUnblockTime+0x3c>)
 80052ea:	6013      	str	r3, [r2, #0]
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr
 80052f8:	20000940 	.word	0x20000940
 80052fc:	200009a8 	.word	0x200009a8

08005300 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005306:	4b0b      	ldr	r3, [pc, #44]	; (8005334 <xTaskGetSchedulerState+0x34>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d102      	bne.n	8005314 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800530e:	2301      	movs	r3, #1
 8005310:	607b      	str	r3, [r7, #4]
 8005312:	e008      	b.n	8005326 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005314:	4b08      	ldr	r3, [pc, #32]	; (8005338 <xTaskGetSchedulerState+0x38>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d102      	bne.n	8005322 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800531c:	2302      	movs	r3, #2
 800531e:	607b      	str	r3, [r7, #4]
 8005320:	e001      	b.n	8005326 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005322:	2300      	movs	r3, #0
 8005324:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005326:	687b      	ldr	r3, [r7, #4]
	}
 8005328:	4618      	mov	r0, r3
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr
 8005334:	20000994 	.word	0x20000994
 8005338:	200009b0 	.word	0x200009b0

0800533c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005348:	2300      	movs	r3, #0
 800534a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d05e      	beq.n	8005410 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005356:	4b31      	ldr	r3, [pc, #196]	; (800541c <xTaskPriorityInherit+0xe0>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535c:	429a      	cmp	r2, r3
 800535e:	d24e      	bcs.n	80053fe <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	2b00      	cmp	r3, #0
 8005366:	db06      	blt.n	8005376 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005368:	4b2c      	ldr	r3, [pc, #176]	; (800541c <xTaskPriorityInherit+0xe0>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536e:	f1c3 0207 	rsb	r2, r3, #7
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	6959      	ldr	r1, [r3, #20]
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800537e:	4613      	mov	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4413      	add	r3, r2
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	4a26      	ldr	r2, [pc, #152]	; (8005420 <xTaskPriorityInherit+0xe4>)
 8005388:	4413      	add	r3, r2
 800538a:	4299      	cmp	r1, r3
 800538c:	d12f      	bne.n	80053ee <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	3304      	adds	r3, #4
 8005392:	4618      	mov	r0, r3
 8005394:	f7fe fd28 	bl	8003de8 <uxListRemove>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10a      	bne.n	80053b4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a2:	2201      	movs	r2, #1
 80053a4:	fa02 f303 	lsl.w	r3, r2, r3
 80053a8:	43da      	mvns	r2, r3
 80053aa:	4b1e      	ldr	r3, [pc, #120]	; (8005424 <xTaskPriorityInherit+0xe8>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4013      	ands	r3, r2
 80053b0:	4a1c      	ldr	r2, [pc, #112]	; (8005424 <xTaskPriorityInherit+0xe8>)
 80053b2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80053b4:	4b19      	ldr	r3, [pc, #100]	; (800541c <xTaskPriorityInherit+0xe0>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c2:	2201      	movs	r2, #1
 80053c4:	409a      	lsls	r2, r3
 80053c6:	4b17      	ldr	r3, [pc, #92]	; (8005424 <xTaskPriorityInherit+0xe8>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	4a15      	ldr	r2, [pc, #84]	; (8005424 <xTaskPriorityInherit+0xe8>)
 80053ce:	6013      	str	r3, [r2, #0]
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d4:	4613      	mov	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	4413      	add	r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4a10      	ldr	r2, [pc, #64]	; (8005420 <xTaskPriorityInherit+0xe4>)
 80053de:	441a      	add	r2, r3
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	3304      	adds	r3, #4
 80053e4:	4619      	mov	r1, r3
 80053e6:	4610      	mov	r0, r2
 80053e8:	f7fe fca1 	bl	8003d2e <vListInsertEnd>
 80053ec:	e004      	b.n	80053f8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80053ee:	4b0b      	ldr	r3, [pc, #44]	; (800541c <xTaskPriorityInherit+0xe0>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80053f8:	2301      	movs	r3, #1
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	e008      	b.n	8005410 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005402:	4b06      	ldr	r3, [pc, #24]	; (800541c <xTaskPriorityInherit+0xe0>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005408:	429a      	cmp	r2, r3
 800540a:	d201      	bcs.n	8005410 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800540c:	2301      	movs	r3, #1
 800540e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005410:	68fb      	ldr	r3, [r7, #12]
	}
 8005412:	4618      	mov	r0, r3
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	20000888 	.word	0x20000888
 8005420:	2000088c 	.word	0x2000088c
 8005424:	20000990 	.word	0x20000990

08005428 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005434:	2300      	movs	r3, #0
 8005436:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d06e      	beq.n	800551c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800543e:	4b3a      	ldr	r3, [pc, #232]	; (8005528 <xTaskPriorityDisinherit+0x100>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	429a      	cmp	r2, r3
 8005446:	d00a      	beq.n	800545e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544c:	f383 8811 	msr	BASEPRI, r3
 8005450:	f3bf 8f6f 	isb	sy
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	60fb      	str	r3, [r7, #12]
}
 800545a:	bf00      	nop
 800545c:	e7fe      	b.n	800545c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10a      	bne.n	800547c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546a:	f383 8811 	msr	BASEPRI, r3
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	f3bf 8f4f 	dsb	sy
 8005476:	60bb      	str	r3, [r7, #8]
}
 8005478:	bf00      	nop
 800547a:	e7fe      	b.n	800547a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005480:	1e5a      	subs	r2, r3, #1
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800548e:	429a      	cmp	r2, r3
 8005490:	d044      	beq.n	800551c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005496:	2b00      	cmp	r3, #0
 8005498:	d140      	bne.n	800551c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	3304      	adds	r3, #4
 800549e:	4618      	mov	r0, r3
 80054a0:	f7fe fca2 	bl	8003de8 <uxListRemove>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d115      	bne.n	80054d6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ae:	491f      	ldr	r1, [pc, #124]	; (800552c <xTaskPriorityDisinherit+0x104>)
 80054b0:	4613      	mov	r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4413      	add	r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	440b      	add	r3, r1
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10a      	bne.n	80054d6 <xTaskPriorityDisinherit+0xae>
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c4:	2201      	movs	r2, #1
 80054c6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ca:	43da      	mvns	r2, r3
 80054cc:	4b18      	ldr	r3, [pc, #96]	; (8005530 <xTaskPriorityDisinherit+0x108>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4013      	ands	r3, r2
 80054d2:	4a17      	ldr	r2, [pc, #92]	; (8005530 <xTaskPriorityDisinherit+0x108>)
 80054d4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e2:	f1c3 0207 	rsb	r2, r3, #7
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ee:	2201      	movs	r2, #1
 80054f0:	409a      	lsls	r2, r3
 80054f2:	4b0f      	ldr	r3, [pc, #60]	; (8005530 <xTaskPriorityDisinherit+0x108>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	4a0d      	ldr	r2, [pc, #52]	; (8005530 <xTaskPriorityDisinherit+0x108>)
 80054fa:	6013      	str	r3, [r2, #0]
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005500:	4613      	mov	r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4413      	add	r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	4a08      	ldr	r2, [pc, #32]	; (800552c <xTaskPriorityDisinherit+0x104>)
 800550a:	441a      	add	r2, r3
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	3304      	adds	r3, #4
 8005510:	4619      	mov	r1, r3
 8005512:	4610      	mov	r0, r2
 8005514:	f7fe fc0b 	bl	8003d2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005518:	2301      	movs	r3, #1
 800551a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800551c:	697b      	ldr	r3, [r7, #20]
	}
 800551e:	4618      	mov	r0, r3
 8005520:	3718      	adds	r7, #24
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	20000888 	.word	0x20000888
 800552c:	2000088c 	.word	0x2000088c
 8005530:	20000990 	.word	0x20000990

08005534 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005534:	b580      	push	{r7, lr}
 8005536:	b088      	sub	sp, #32
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005542:	2301      	movs	r3, #1
 8005544:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d077      	beq.n	800563c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10a      	bne.n	800556a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005558:	f383 8811 	msr	BASEPRI, r3
 800555c:	f3bf 8f6f 	isb	sy
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	60fb      	str	r3, [r7, #12]
}
 8005566:	bf00      	nop
 8005568:	e7fe      	b.n	8005568 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	429a      	cmp	r2, r3
 8005572:	d902      	bls.n	800557a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	61fb      	str	r3, [r7, #28]
 8005578:	e002      	b.n	8005580 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800557e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005584:	69fa      	ldr	r2, [r7, #28]
 8005586:	429a      	cmp	r2, r3
 8005588:	d058      	beq.n	800563c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	429a      	cmp	r2, r3
 8005592:	d153      	bne.n	800563c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005594:	4b2b      	ldr	r3, [pc, #172]	; (8005644 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	429a      	cmp	r2, r3
 800559c:	d10a      	bne.n	80055b4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800559e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a2:	f383 8811 	msr	BASEPRI, r3
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	60bb      	str	r3, [r7, #8]
}
 80055b0:	bf00      	nop
 80055b2:	e7fe      	b.n	80055b2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	69fa      	ldr	r2, [r7, #28]
 80055be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	db04      	blt.n	80055d2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	f1c3 0207 	rsb	r2, r3, #7
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	6959      	ldr	r1, [r3, #20]
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	4613      	mov	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4413      	add	r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	4a19      	ldr	r2, [pc, #100]	; (8005648 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80055e2:	4413      	add	r3, r2
 80055e4:	4299      	cmp	r1, r3
 80055e6:	d129      	bne.n	800563c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	3304      	adds	r3, #4
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7fe fbfb 	bl	8003de8 <uxListRemove>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10a      	bne.n	800560e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fc:	2201      	movs	r2, #1
 80055fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005602:	43da      	mvns	r2, r3
 8005604:	4b11      	ldr	r3, [pc, #68]	; (800564c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4013      	ands	r3, r2
 800560a:	4a10      	ldr	r2, [pc, #64]	; (800564c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800560c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005612:	2201      	movs	r2, #1
 8005614:	409a      	lsls	r2, r3
 8005616:	4b0d      	ldr	r3, [pc, #52]	; (800564c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4313      	orrs	r3, r2
 800561c:	4a0b      	ldr	r2, [pc, #44]	; (800564c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800561e:	6013      	str	r3, [r2, #0]
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005624:	4613      	mov	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4413      	add	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4a06      	ldr	r2, [pc, #24]	; (8005648 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800562e:	441a      	add	r2, r3
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	3304      	adds	r3, #4
 8005634:	4619      	mov	r1, r3
 8005636:	4610      	mov	r0, r2
 8005638:	f7fe fb79 	bl	8003d2e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800563c:	bf00      	nop
 800563e:	3720      	adds	r7, #32
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	20000888 	.word	0x20000888
 8005648:	2000088c 	.word	0x2000088c
 800564c:	20000990 	.word	0x20000990

08005650 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005650:	b480      	push	{r7}
 8005652:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005654:	4b07      	ldr	r3, [pc, #28]	; (8005674 <pvTaskIncrementMutexHeldCount+0x24>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d004      	beq.n	8005666 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800565c:	4b05      	ldr	r3, [pc, #20]	; (8005674 <pvTaskIncrementMutexHeldCount+0x24>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005662:	3201      	adds	r2, #1
 8005664:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 8005666:	4b03      	ldr	r3, [pc, #12]	; (8005674 <pvTaskIncrementMutexHeldCount+0x24>)
 8005668:	681b      	ldr	r3, [r3, #0]
	}
 800566a:	4618      	mov	r0, r3
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr
 8005674:	20000888 	.word	0x20000888

08005678 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005682:	4b29      	ldr	r3, [pc, #164]	; (8005728 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005688:	4b28      	ldr	r3, [pc, #160]	; (800572c <prvAddCurrentTaskToDelayedList+0xb4>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	3304      	adds	r3, #4
 800568e:	4618      	mov	r0, r3
 8005690:	f7fe fbaa 	bl	8003de8 <uxListRemove>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10b      	bne.n	80056b2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800569a:	4b24      	ldr	r3, [pc, #144]	; (800572c <prvAddCurrentTaskToDelayedList+0xb4>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a0:	2201      	movs	r2, #1
 80056a2:	fa02 f303 	lsl.w	r3, r2, r3
 80056a6:	43da      	mvns	r2, r3
 80056a8:	4b21      	ldr	r3, [pc, #132]	; (8005730 <prvAddCurrentTaskToDelayedList+0xb8>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4013      	ands	r3, r2
 80056ae:	4a20      	ldr	r2, [pc, #128]	; (8005730 <prvAddCurrentTaskToDelayedList+0xb8>)
 80056b0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056b8:	d10a      	bne.n	80056d0 <prvAddCurrentTaskToDelayedList+0x58>
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d007      	beq.n	80056d0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056c0:	4b1a      	ldr	r3, [pc, #104]	; (800572c <prvAddCurrentTaskToDelayedList+0xb4>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	3304      	adds	r3, #4
 80056c6:	4619      	mov	r1, r3
 80056c8:	481a      	ldr	r0, [pc, #104]	; (8005734 <prvAddCurrentTaskToDelayedList+0xbc>)
 80056ca:	f7fe fb30 	bl	8003d2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80056ce:	e026      	b.n	800571e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4413      	add	r3, r2
 80056d6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80056d8:	4b14      	ldr	r3, [pc, #80]	; (800572c <prvAddCurrentTaskToDelayedList+0xb4>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d209      	bcs.n	80056fc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056e8:	4b13      	ldr	r3, [pc, #76]	; (8005738 <prvAddCurrentTaskToDelayedList+0xc0>)
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	4b0f      	ldr	r3, [pc, #60]	; (800572c <prvAddCurrentTaskToDelayedList+0xb4>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	3304      	adds	r3, #4
 80056f2:	4619      	mov	r1, r3
 80056f4:	4610      	mov	r0, r2
 80056f6:	f7fe fb3e 	bl	8003d76 <vListInsert>
}
 80056fa:	e010      	b.n	800571e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056fc:	4b0f      	ldr	r3, [pc, #60]	; (800573c <prvAddCurrentTaskToDelayedList+0xc4>)
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	4b0a      	ldr	r3, [pc, #40]	; (800572c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	3304      	adds	r3, #4
 8005706:	4619      	mov	r1, r3
 8005708:	4610      	mov	r0, r2
 800570a:	f7fe fb34 	bl	8003d76 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800570e:	4b0c      	ldr	r3, [pc, #48]	; (8005740 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	429a      	cmp	r2, r3
 8005716:	d202      	bcs.n	800571e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005718:	4a09      	ldr	r2, [pc, #36]	; (8005740 <prvAddCurrentTaskToDelayedList+0xc8>)
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	6013      	str	r3, [r2, #0]
}
 800571e:	bf00      	nop
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	2000098c 	.word	0x2000098c
 800572c:	20000888 	.word	0x20000888
 8005730:	20000990 	.word	0x20000990
 8005734:	20000974 	.word	0x20000974
 8005738:	20000944 	.word	0x20000944
 800573c:	20000940 	.word	0x20000940
 8005740:	200009a8 	.word	0x200009a8

08005744 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	3b04      	subs	r3, #4
 8005754:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800575c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	3b04      	subs	r3, #4
 8005762:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	f023 0201 	bic.w	r2, r3, #1
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	3b04      	subs	r3, #4
 8005772:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005774:	4a0c      	ldr	r2, [pc, #48]	; (80057a8 <pxPortInitialiseStack+0x64>)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	3b14      	subs	r3, #20
 800577e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	3b04      	subs	r3, #4
 800578a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f06f 0202 	mvn.w	r2, #2
 8005792:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	3b20      	subs	r3, #32
 8005798:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800579a:	68fb      	ldr	r3, [r7, #12]
}
 800579c:	4618      	mov	r0, r3
 800579e:	3714      	adds	r7, #20
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	080057ad 	.word	0x080057ad

080057ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80057b2:	2300      	movs	r3, #0
 80057b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80057b6:	4b12      	ldr	r3, [pc, #72]	; (8005800 <prvTaskExitError+0x54>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057be:	d00a      	beq.n	80057d6 <prvTaskExitError+0x2a>
	__asm volatile
 80057c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c4:	f383 8811 	msr	BASEPRI, r3
 80057c8:	f3bf 8f6f 	isb	sy
 80057cc:	f3bf 8f4f 	dsb	sy
 80057d0:	60fb      	str	r3, [r7, #12]
}
 80057d2:	bf00      	nop
 80057d4:	e7fe      	b.n	80057d4 <prvTaskExitError+0x28>
	__asm volatile
 80057d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057da:	f383 8811 	msr	BASEPRI, r3
 80057de:	f3bf 8f6f 	isb	sy
 80057e2:	f3bf 8f4f 	dsb	sy
 80057e6:	60bb      	str	r3, [r7, #8]
}
 80057e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80057ea:	bf00      	nop
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d0fc      	beq.n	80057ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80057f2:	bf00      	nop
 80057f4:	bf00      	nop
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr
 8005800:	2000000c 	.word	0x2000000c
	...

08005810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005810:	4b07      	ldr	r3, [pc, #28]	; (8005830 <pxCurrentTCBConst2>)
 8005812:	6819      	ldr	r1, [r3, #0]
 8005814:	6808      	ldr	r0, [r1, #0]
 8005816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800581a:	f380 8809 	msr	PSP, r0
 800581e:	f3bf 8f6f 	isb	sy
 8005822:	f04f 0000 	mov.w	r0, #0
 8005826:	f380 8811 	msr	BASEPRI, r0
 800582a:	4770      	bx	lr
 800582c:	f3af 8000 	nop.w

08005830 <pxCurrentTCBConst2>:
 8005830:	20000888 	.word	0x20000888
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005834:	bf00      	nop
 8005836:	bf00      	nop

08005838 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005838:	4808      	ldr	r0, [pc, #32]	; (800585c <prvPortStartFirstTask+0x24>)
 800583a:	6800      	ldr	r0, [r0, #0]
 800583c:	6800      	ldr	r0, [r0, #0]
 800583e:	f380 8808 	msr	MSP, r0
 8005842:	f04f 0000 	mov.w	r0, #0
 8005846:	f380 8814 	msr	CONTROL, r0
 800584a:	b662      	cpsie	i
 800584c:	b661      	cpsie	f
 800584e:	f3bf 8f4f 	dsb	sy
 8005852:	f3bf 8f6f 	isb	sy
 8005856:	df00      	svc	0
 8005858:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800585a:	bf00      	nop
 800585c:	e000ed08 	.word	0xe000ed08

08005860 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b086      	sub	sp, #24
 8005864:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005866:	4b46      	ldr	r3, [pc, #280]	; (8005980 <xPortStartScheduler+0x120>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a46      	ldr	r2, [pc, #280]	; (8005984 <xPortStartScheduler+0x124>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d10a      	bne.n	8005886 <xPortStartScheduler+0x26>
	__asm volatile
 8005870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005874:	f383 8811 	msr	BASEPRI, r3
 8005878:	f3bf 8f6f 	isb	sy
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	613b      	str	r3, [r7, #16]
}
 8005882:	bf00      	nop
 8005884:	e7fe      	b.n	8005884 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005886:	4b3e      	ldr	r3, [pc, #248]	; (8005980 <xPortStartScheduler+0x120>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a3f      	ldr	r2, [pc, #252]	; (8005988 <xPortStartScheduler+0x128>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d10a      	bne.n	80058a6 <xPortStartScheduler+0x46>
	__asm volatile
 8005890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005894:	f383 8811 	msr	BASEPRI, r3
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	60fb      	str	r3, [r7, #12]
}
 80058a2:	bf00      	nop
 80058a4:	e7fe      	b.n	80058a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80058a6:	4b39      	ldr	r3, [pc, #228]	; (800598c <xPortStartScheduler+0x12c>)
 80058a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	22ff      	movs	r2, #255	; 0xff
 80058b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80058c0:	78fb      	ldrb	r3, [r7, #3]
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80058c8:	b2da      	uxtb	r2, r3
 80058ca:	4b31      	ldr	r3, [pc, #196]	; (8005990 <xPortStartScheduler+0x130>)
 80058cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80058ce:	4b31      	ldr	r3, [pc, #196]	; (8005994 <xPortStartScheduler+0x134>)
 80058d0:	2207      	movs	r2, #7
 80058d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80058d4:	e009      	b.n	80058ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80058d6:	4b2f      	ldr	r3, [pc, #188]	; (8005994 <xPortStartScheduler+0x134>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	3b01      	subs	r3, #1
 80058dc:	4a2d      	ldr	r2, [pc, #180]	; (8005994 <xPortStartScheduler+0x134>)
 80058de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80058e0:	78fb      	ldrb	r3, [r7, #3]
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	005b      	lsls	r3, r3, #1
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80058ea:	78fb      	ldrb	r3, [r7, #3]
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f2:	2b80      	cmp	r3, #128	; 0x80
 80058f4:	d0ef      	beq.n	80058d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80058f6:	4b27      	ldr	r3, [pc, #156]	; (8005994 <xPortStartScheduler+0x134>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f1c3 0307 	rsb	r3, r3, #7
 80058fe:	2b04      	cmp	r3, #4
 8005900:	d00a      	beq.n	8005918 <xPortStartScheduler+0xb8>
	__asm volatile
 8005902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005906:	f383 8811 	msr	BASEPRI, r3
 800590a:	f3bf 8f6f 	isb	sy
 800590e:	f3bf 8f4f 	dsb	sy
 8005912:	60bb      	str	r3, [r7, #8]
}
 8005914:	bf00      	nop
 8005916:	e7fe      	b.n	8005916 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005918:	4b1e      	ldr	r3, [pc, #120]	; (8005994 <xPortStartScheduler+0x134>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	021b      	lsls	r3, r3, #8
 800591e:	4a1d      	ldr	r2, [pc, #116]	; (8005994 <xPortStartScheduler+0x134>)
 8005920:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005922:	4b1c      	ldr	r3, [pc, #112]	; (8005994 <xPortStartScheduler+0x134>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800592a:	4a1a      	ldr	r2, [pc, #104]	; (8005994 <xPortStartScheduler+0x134>)
 800592c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	b2da      	uxtb	r2, r3
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005936:	4b18      	ldr	r3, [pc, #96]	; (8005998 <xPortStartScheduler+0x138>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a17      	ldr	r2, [pc, #92]	; (8005998 <xPortStartScheduler+0x138>)
 800593c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005940:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005942:	4b15      	ldr	r3, [pc, #84]	; (8005998 <xPortStartScheduler+0x138>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a14      	ldr	r2, [pc, #80]	; (8005998 <xPortStartScheduler+0x138>)
 8005948:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800594c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800594e:	f000 f8dd 	bl	8005b0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005952:	4b12      	ldr	r3, [pc, #72]	; (800599c <xPortStartScheduler+0x13c>)
 8005954:	2200      	movs	r2, #0
 8005956:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005958:	f000 f8fc 	bl	8005b54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800595c:	4b10      	ldr	r3, [pc, #64]	; (80059a0 <xPortStartScheduler+0x140>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a0f      	ldr	r2, [pc, #60]	; (80059a0 <xPortStartScheduler+0x140>)
 8005962:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005966:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005968:	f7ff ff66 	bl	8005838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800596c:	f7ff fa90 	bl	8004e90 <vTaskSwitchContext>
	prvTaskExitError();
 8005970:	f7ff ff1c 	bl	80057ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3718      	adds	r7, #24
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	e000ed00 	.word	0xe000ed00
 8005984:	410fc271 	.word	0x410fc271
 8005988:	410fc270 	.word	0x410fc270
 800598c:	e000e400 	.word	0xe000e400
 8005990:	200009bc 	.word	0x200009bc
 8005994:	200009c0 	.word	0x200009c0
 8005998:	e000ed20 	.word	0xe000ed20
 800599c:	2000000c 	.word	0x2000000c
 80059a0:	e000ef34 	.word	0xe000ef34

080059a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
	__asm volatile
 80059aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ae:	f383 8811 	msr	BASEPRI, r3
 80059b2:	f3bf 8f6f 	isb	sy
 80059b6:	f3bf 8f4f 	dsb	sy
 80059ba:	607b      	str	r3, [r7, #4]
}
 80059bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80059be:	4b0f      	ldr	r3, [pc, #60]	; (80059fc <vPortEnterCritical+0x58>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	3301      	adds	r3, #1
 80059c4:	4a0d      	ldr	r2, [pc, #52]	; (80059fc <vPortEnterCritical+0x58>)
 80059c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80059c8:	4b0c      	ldr	r3, [pc, #48]	; (80059fc <vPortEnterCritical+0x58>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d10f      	bne.n	80059f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80059d0:	4b0b      	ldr	r3, [pc, #44]	; (8005a00 <vPortEnterCritical+0x5c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00a      	beq.n	80059f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80059da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059de:	f383 8811 	msr	BASEPRI, r3
 80059e2:	f3bf 8f6f 	isb	sy
 80059e6:	f3bf 8f4f 	dsb	sy
 80059ea:	603b      	str	r3, [r7, #0]
}
 80059ec:	bf00      	nop
 80059ee:	e7fe      	b.n	80059ee <vPortEnterCritical+0x4a>
	}
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr
 80059fc:	2000000c 	.word	0x2000000c
 8005a00:	e000ed04 	.word	0xe000ed04

08005a04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a0a:	4b12      	ldr	r3, [pc, #72]	; (8005a54 <vPortExitCritical+0x50>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10a      	bne.n	8005a28 <vPortExitCritical+0x24>
	__asm volatile
 8005a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a16:	f383 8811 	msr	BASEPRI, r3
 8005a1a:	f3bf 8f6f 	isb	sy
 8005a1e:	f3bf 8f4f 	dsb	sy
 8005a22:	607b      	str	r3, [r7, #4]
}
 8005a24:	bf00      	nop
 8005a26:	e7fe      	b.n	8005a26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005a28:	4b0a      	ldr	r3, [pc, #40]	; (8005a54 <vPortExitCritical+0x50>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	4a09      	ldr	r2, [pc, #36]	; (8005a54 <vPortExitCritical+0x50>)
 8005a30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a32:	4b08      	ldr	r3, [pc, #32]	; (8005a54 <vPortExitCritical+0x50>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d105      	bne.n	8005a46 <vPortExitCritical+0x42>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005a44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005a46:	bf00      	nop
 8005a48:	370c      	adds	r7, #12
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	2000000c 	.word	0x2000000c
	...

08005a60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005a60:	f3ef 8009 	mrs	r0, PSP
 8005a64:	f3bf 8f6f 	isb	sy
 8005a68:	4b15      	ldr	r3, [pc, #84]	; (8005ac0 <pxCurrentTCBConst>)
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	f01e 0f10 	tst.w	lr, #16
 8005a70:	bf08      	it	eq
 8005a72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a7a:	6010      	str	r0, [r2, #0]
 8005a7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005a80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005a84:	f380 8811 	msr	BASEPRI, r0
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	f3bf 8f6f 	isb	sy
 8005a90:	f7ff f9fe 	bl	8004e90 <vTaskSwitchContext>
 8005a94:	f04f 0000 	mov.w	r0, #0
 8005a98:	f380 8811 	msr	BASEPRI, r0
 8005a9c:	bc09      	pop	{r0, r3}
 8005a9e:	6819      	ldr	r1, [r3, #0]
 8005aa0:	6808      	ldr	r0, [r1, #0]
 8005aa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa6:	f01e 0f10 	tst.w	lr, #16
 8005aaa:	bf08      	it	eq
 8005aac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ab0:	f380 8809 	msr	PSP, r0
 8005ab4:	f3bf 8f6f 	isb	sy
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	f3af 8000 	nop.w

08005ac0 <pxCurrentTCBConst>:
 8005ac0:	20000888 	.word	0x20000888
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ac4:	bf00      	nop
 8005ac6:	bf00      	nop

08005ac8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
	__asm volatile
 8005ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad2:	f383 8811 	msr	BASEPRI, r3
 8005ad6:	f3bf 8f6f 	isb	sy
 8005ada:	f3bf 8f4f 	dsb	sy
 8005ade:	607b      	str	r3, [r7, #4]
}
 8005ae0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ae2:	f7ff f91d 	bl	8004d20 <xTaskIncrementTick>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d003      	beq.n	8005af4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005aec:	4b06      	ldr	r3, [pc, #24]	; (8005b08 <SysTick_Handler+0x40>)
 8005aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005af2:	601a      	str	r2, [r3, #0]
 8005af4:	2300      	movs	r3, #0
 8005af6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	f383 8811 	msr	BASEPRI, r3
}
 8005afe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b00:	bf00      	nop
 8005b02:	3708      	adds	r7, #8
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	e000ed04 	.word	0xe000ed04

08005b0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b10:	4b0b      	ldr	r3, [pc, #44]	; (8005b40 <vPortSetupTimerInterrupt+0x34>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b16:	4b0b      	ldr	r3, [pc, #44]	; (8005b44 <vPortSetupTimerInterrupt+0x38>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b1c:	4b0a      	ldr	r3, [pc, #40]	; (8005b48 <vPortSetupTimerInterrupt+0x3c>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a0a      	ldr	r2, [pc, #40]	; (8005b4c <vPortSetupTimerInterrupt+0x40>)
 8005b22:	fba2 2303 	umull	r2, r3, r2, r3
 8005b26:	099b      	lsrs	r3, r3, #6
 8005b28:	4a09      	ldr	r2, [pc, #36]	; (8005b50 <vPortSetupTimerInterrupt+0x44>)
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b2e:	4b04      	ldr	r3, [pc, #16]	; (8005b40 <vPortSetupTimerInterrupt+0x34>)
 8005b30:	2207      	movs	r2, #7
 8005b32:	601a      	str	r2, [r3, #0]
}
 8005b34:	bf00      	nop
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	e000e010 	.word	0xe000e010
 8005b44:	e000e018 	.word	0xe000e018
 8005b48:	20000000 	.word	0x20000000
 8005b4c:	10624dd3 	.word	0x10624dd3
 8005b50:	e000e014 	.word	0xe000e014

08005b54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005b54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005b64 <vPortEnableVFP+0x10>
 8005b58:	6801      	ldr	r1, [r0, #0]
 8005b5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005b5e:	6001      	str	r1, [r0, #0]
 8005b60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005b62:	bf00      	nop
 8005b64:	e000ed88 	.word	0xe000ed88

08005b68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b08a      	sub	sp, #40	; 0x28
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b70:	2300      	movs	r3, #0
 8005b72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b74:	f7ff f82a 	bl	8004bcc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b78:	4b5b      	ldr	r3, [pc, #364]	; (8005ce8 <pvPortMalloc+0x180>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d101      	bne.n	8005b84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b80:	f000 f920 	bl	8005dc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b84:	4b59      	ldr	r3, [pc, #356]	; (8005cec <pvPortMalloc+0x184>)
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f040 8093 	bne.w	8005cb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d01d      	beq.n	8005bd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005b98:	2208      	movs	r2, #8
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f003 0307 	and.w	r3, r3, #7
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d014      	beq.n	8005bd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f023 0307 	bic.w	r3, r3, #7
 8005bb0:	3308      	adds	r3, #8
 8005bb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f003 0307 	and.w	r3, r3, #7
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00a      	beq.n	8005bd4 <pvPortMalloc+0x6c>
	__asm volatile
 8005bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc2:	f383 8811 	msr	BASEPRI, r3
 8005bc6:	f3bf 8f6f 	isb	sy
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	617b      	str	r3, [r7, #20]
}
 8005bd0:	bf00      	nop
 8005bd2:	e7fe      	b.n	8005bd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d06e      	beq.n	8005cb8 <pvPortMalloc+0x150>
 8005bda:	4b45      	ldr	r3, [pc, #276]	; (8005cf0 <pvPortMalloc+0x188>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d869      	bhi.n	8005cb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005be4:	4b43      	ldr	r3, [pc, #268]	; (8005cf4 <pvPortMalloc+0x18c>)
 8005be6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005be8:	4b42      	ldr	r3, [pc, #264]	; (8005cf4 <pvPortMalloc+0x18c>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bee:	e004      	b.n	8005bfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d903      	bls.n	8005c0c <pvPortMalloc+0xa4>
 8005c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1f1      	bne.n	8005bf0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c0c:	4b36      	ldr	r3, [pc, #216]	; (8005ce8 <pvPortMalloc+0x180>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d050      	beq.n	8005cb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c16:	6a3b      	ldr	r3, [r7, #32]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2208      	movs	r2, #8
 8005c1c:	4413      	add	r3, r2
 8005c1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	6a3b      	ldr	r3, [r7, #32]
 8005c26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	1ad2      	subs	r2, r2, r3
 8005c30:	2308      	movs	r3, #8
 8005c32:	005b      	lsls	r3, r3, #1
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d91f      	bls.n	8005c78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	f003 0307 	and.w	r3, r3, #7
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00a      	beq.n	8005c60 <pvPortMalloc+0xf8>
	__asm volatile
 8005c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4e:	f383 8811 	msr	BASEPRI, r3
 8005c52:	f3bf 8f6f 	isb	sy
 8005c56:	f3bf 8f4f 	dsb	sy
 8005c5a:	613b      	str	r3, [r7, #16]
}
 8005c5c:	bf00      	nop
 8005c5e:	e7fe      	b.n	8005c5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	685a      	ldr	r2, [r3, #4]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	1ad2      	subs	r2, r2, r3
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c72:	69b8      	ldr	r0, [r7, #24]
 8005c74:	f000 f908 	bl	8005e88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c78:	4b1d      	ldr	r3, [pc, #116]	; (8005cf0 <pvPortMalloc+0x188>)
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	4a1b      	ldr	r2, [pc, #108]	; (8005cf0 <pvPortMalloc+0x188>)
 8005c84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c86:	4b1a      	ldr	r3, [pc, #104]	; (8005cf0 <pvPortMalloc+0x188>)
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	4b1b      	ldr	r3, [pc, #108]	; (8005cf8 <pvPortMalloc+0x190>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d203      	bcs.n	8005c9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c92:	4b17      	ldr	r3, [pc, #92]	; (8005cf0 <pvPortMalloc+0x188>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a18      	ldr	r2, [pc, #96]	; (8005cf8 <pvPortMalloc+0x190>)
 8005c98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	4b13      	ldr	r3, [pc, #76]	; (8005cec <pvPortMalloc+0x184>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	431a      	orrs	r2, r3
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005caa:	2200      	movs	r2, #0
 8005cac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005cae:	4b13      	ldr	r3, [pc, #76]	; (8005cfc <pvPortMalloc+0x194>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	4a11      	ldr	r2, [pc, #68]	; (8005cfc <pvPortMalloc+0x194>)
 8005cb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005cb8:	f7fe ff96 	bl	8004be8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	f003 0307 	and.w	r3, r3, #7
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00a      	beq.n	8005cdc <pvPortMalloc+0x174>
	__asm volatile
 8005cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cca:	f383 8811 	msr	BASEPRI, r3
 8005cce:	f3bf 8f6f 	isb	sy
 8005cd2:	f3bf 8f4f 	dsb	sy
 8005cd6:	60fb      	str	r3, [r7, #12]
}
 8005cd8:	bf00      	nop
 8005cda:	e7fe      	b.n	8005cda <pvPortMalloc+0x172>
	return pvReturn;
 8005cdc:	69fb      	ldr	r3, [r7, #28]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3728      	adds	r7, #40	; 0x28
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	200045cc 	.word	0x200045cc
 8005cec:	200045e0 	.word	0x200045e0
 8005cf0:	200045d0 	.word	0x200045d0
 8005cf4:	200045c4 	.word	0x200045c4
 8005cf8:	200045d4 	.word	0x200045d4
 8005cfc:	200045d8 	.word	0x200045d8

08005d00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d04d      	beq.n	8005dae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d12:	2308      	movs	r3, #8
 8005d14:	425b      	negs	r3, r3
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	4413      	add	r3, r2
 8005d1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	4b24      	ldr	r3, [pc, #144]	; (8005db8 <vPortFree+0xb8>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4013      	ands	r3, r2
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d10a      	bne.n	8005d44 <vPortFree+0x44>
	__asm volatile
 8005d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d32:	f383 8811 	msr	BASEPRI, r3
 8005d36:	f3bf 8f6f 	isb	sy
 8005d3a:	f3bf 8f4f 	dsb	sy
 8005d3e:	60fb      	str	r3, [r7, #12]
}
 8005d40:	bf00      	nop
 8005d42:	e7fe      	b.n	8005d42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00a      	beq.n	8005d62 <vPortFree+0x62>
	__asm volatile
 8005d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d50:	f383 8811 	msr	BASEPRI, r3
 8005d54:	f3bf 8f6f 	isb	sy
 8005d58:	f3bf 8f4f 	dsb	sy
 8005d5c:	60bb      	str	r3, [r7, #8]
}
 8005d5e:	bf00      	nop
 8005d60:	e7fe      	b.n	8005d60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	685a      	ldr	r2, [r3, #4]
 8005d66:	4b14      	ldr	r3, [pc, #80]	; (8005db8 <vPortFree+0xb8>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d01e      	beq.n	8005dae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d11a      	bne.n	8005dae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	4b0e      	ldr	r3, [pc, #56]	; (8005db8 <vPortFree+0xb8>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	43db      	mvns	r3, r3
 8005d82:	401a      	ands	r2, r3
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d88:	f7fe ff20 	bl	8004bcc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	4b0a      	ldr	r3, [pc, #40]	; (8005dbc <vPortFree+0xbc>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4413      	add	r3, r2
 8005d96:	4a09      	ldr	r2, [pc, #36]	; (8005dbc <vPortFree+0xbc>)
 8005d98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d9a:	6938      	ldr	r0, [r7, #16]
 8005d9c:	f000 f874 	bl	8005e88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005da0:	4b07      	ldr	r3, [pc, #28]	; (8005dc0 <vPortFree+0xc0>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	3301      	adds	r3, #1
 8005da6:	4a06      	ldr	r2, [pc, #24]	; (8005dc0 <vPortFree+0xc0>)
 8005da8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005daa:	f7fe ff1d 	bl	8004be8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005dae:	bf00      	nop
 8005db0:	3718      	adds	r7, #24
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	200045e0 	.word	0x200045e0
 8005dbc:	200045d0 	.word	0x200045d0
 8005dc0:	200045dc 	.word	0x200045dc

08005dc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005dca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005dce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005dd0:	4b27      	ldr	r3, [pc, #156]	; (8005e70 <prvHeapInit+0xac>)
 8005dd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f003 0307 	and.w	r3, r3, #7
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00c      	beq.n	8005df8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	3307      	adds	r3, #7
 8005de2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f023 0307 	bic.w	r3, r3, #7
 8005dea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	4a1f      	ldr	r2, [pc, #124]	; (8005e70 <prvHeapInit+0xac>)
 8005df4:	4413      	add	r3, r2
 8005df6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005dfc:	4a1d      	ldr	r2, [pc, #116]	; (8005e74 <prvHeapInit+0xb0>)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e02:	4b1c      	ldr	r3, [pc, #112]	; (8005e74 <prvHeapInit+0xb0>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e10:	2208      	movs	r2, #8
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	1a9b      	subs	r3, r3, r2
 8005e16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f023 0307 	bic.w	r3, r3, #7
 8005e1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	4a15      	ldr	r2, [pc, #84]	; (8005e78 <prvHeapInit+0xb4>)
 8005e24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e26:	4b14      	ldr	r3, [pc, #80]	; (8005e78 <prvHeapInit+0xb4>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e2e:	4b12      	ldr	r3, [pc, #72]	; (8005e78 <prvHeapInit+0xb4>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2200      	movs	r2, #0
 8005e34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	1ad2      	subs	r2, r2, r3
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e44:	4b0c      	ldr	r3, [pc, #48]	; (8005e78 <prvHeapInit+0xb4>)
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	4a0a      	ldr	r2, [pc, #40]	; (8005e7c <prvHeapInit+0xb8>)
 8005e52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	4a09      	ldr	r2, [pc, #36]	; (8005e80 <prvHeapInit+0xbc>)
 8005e5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e5c:	4b09      	ldr	r3, [pc, #36]	; (8005e84 <prvHeapInit+0xc0>)
 8005e5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005e62:	601a      	str	r2, [r3, #0]
}
 8005e64:	bf00      	nop
 8005e66:	3714      	adds	r7, #20
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr
 8005e70:	200009c4 	.word	0x200009c4
 8005e74:	200045c4 	.word	0x200045c4
 8005e78:	200045cc 	.word	0x200045cc
 8005e7c:	200045d4 	.word	0x200045d4
 8005e80:	200045d0 	.word	0x200045d0
 8005e84:	200045e0 	.word	0x200045e0

08005e88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e90:	4b28      	ldr	r3, [pc, #160]	; (8005f34 <prvInsertBlockIntoFreeList+0xac>)
 8005e92:	60fb      	str	r3, [r7, #12]
 8005e94:	e002      	b.n	8005e9c <prvInsertBlockIntoFreeList+0x14>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	60fb      	str	r3, [r7, #12]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d8f7      	bhi.n	8005e96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d108      	bne.n	8005eca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	441a      	add	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	441a      	add	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d118      	bne.n	8005f10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	4b15      	ldr	r3, [pc, #84]	; (8005f38 <prvInsertBlockIntoFreeList+0xb0>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d00d      	beq.n	8005f06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685a      	ldr	r2, [r3, #4]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	441a      	add	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	601a      	str	r2, [r3, #0]
 8005f04:	e008      	b.n	8005f18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f06:	4b0c      	ldr	r3, [pc, #48]	; (8005f38 <prvInsertBlockIntoFreeList+0xb0>)
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	601a      	str	r2, [r3, #0]
 8005f0e:	e003      	b.n	8005f18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d002      	beq.n	8005f26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f26:	bf00      	nop
 8005f28:	3714      	adds	r7, #20
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	200045c4 	.word	0x200045c4
 8005f38:	200045cc 	.word	0x200045cc

08005f3c <led_task_run>:


/* ============================================================================================ */

void led_task_run(void)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af00      	add	r7, sp, #0
	LedTask_t payload; // Payload with resources for the LED task

	/* Run the LED task */
	while (true)
	{
		if (xSemaphoreTake(xSemaphore, 0) == pdPASS) {
 8005f42:	4b68      	ldr	r3, [pc, #416]	; (80060e4 <led_task_run+0x1a8>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2100      	movs	r1, #0
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7fe fa49 	bl	80043e0 <xQueueSemaphoreTake>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d1f6      	bne.n	8005f42 <led_task_run+0x6>
			// Process the item from the priority queue

			// Get the queue size
			taskENTER_CRITICAL();
 8005f54:	f7ff fd26 	bl	80059a4 <vPortEnterCritical>
			int queueSize = getQueueSize(&priorityQueue);
 8005f58:	4863      	ldr	r0, [pc, #396]	; (80060e8 <led_task_run+0x1ac>)
 8005f5a:	f000 fc16 	bl	800678a <getQueueSize>
 8005f5e:	6178      	str	r0, [r7, #20]
			taskEXIT_CRITICAL();
 8005f60:	f7ff fd50 	bl	8005a04 <vPortExitCritical>
			LOGGER_INFO("current queue size: %d", queueSize);
 8005f64:	f7ff fd1e 	bl	80059a4 <vPortEnterCritical>
 8005f68:	4b60      	ldr	r3, [pc, #384]	; (80060ec <led_task_run+0x1b0>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a60      	ldr	r2, [pc, #384]	; (80060f0 <led_task_run+0x1b4>)
 8005f6e:	213f      	movs	r1, #63	; 0x3f
 8005f70:	4618      	mov	r0, r3
 8005f72:	f001 fad9 	bl	8007528 <sniprintf>
 8005f76:	4603      	mov	r3, r0
 8005f78:	4a5e      	ldr	r2, [pc, #376]	; (80060f4 <led_task_run+0x1b8>)
 8005f7a:	6013      	str	r3, [r2, #0]
 8005f7c:	4b5b      	ldr	r3, [pc, #364]	; (80060ec <led_task_run+0x1b0>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4618      	mov	r0, r3
 8005f82:	f000 fbbf 	bl	8006704 <logger_log_print_>
 8005f86:	f7ff fd3d 	bl	8005a04 <vPortExitCritical>
 8005f8a:	f7ff fd0b 	bl	80059a4 <vPortEnterCritical>
 8005f8e:	4b57      	ldr	r3, [pc, #348]	; (80060ec <led_task_run+0x1b0>)
 8005f90:	6818      	ldr	r0, [r3, #0]
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	4a58      	ldr	r2, [pc, #352]	; (80060f8 <led_task_run+0x1bc>)
 8005f96:	213f      	movs	r1, #63	; 0x3f
 8005f98:	f001 fac6 	bl	8007528 <sniprintf>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	4a55      	ldr	r2, [pc, #340]	; (80060f4 <led_task_run+0x1b8>)
 8005fa0:	6013      	str	r3, [r2, #0]
 8005fa2:	4b52      	ldr	r3, [pc, #328]	; (80060ec <led_task_run+0x1b0>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f000 fbac 	bl	8006704 <logger_log_print_>
 8005fac:	f7ff fd2a 	bl	8005a04 <vPortExitCritical>
 8005fb0:	f7ff fcf8 	bl	80059a4 <vPortEnterCritical>
 8005fb4:	4b4d      	ldr	r3, [pc, #308]	; (80060ec <led_task_run+0x1b0>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a50      	ldr	r2, [pc, #320]	; (80060fc <led_task_run+0x1c0>)
 8005fba:	213f      	movs	r1, #63	; 0x3f
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f001 fab3 	bl	8007528 <sniprintf>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	4a4b      	ldr	r2, [pc, #300]	; (80060f4 <led_task_run+0x1b8>)
 8005fc6:	6013      	str	r3, [r2, #0]
 8005fc8:	4b48      	ldr	r3, [pc, #288]	; (80060ec <led_task_run+0x1b0>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f000 fb99 	bl	8006704 <logger_log_print_>
 8005fd2:	f7ff fd17 	bl	8005a04 <vPortExitCritical>


			taskENTER_CRITICAL();
 8005fd6:	f7ff fce5 	bl	80059a4 <vPortEnterCritical>
			if (!isQueueEmpty(&priorityQueue)) {
 8005fda:	4843      	ldr	r0, [pc, #268]	; (80060e8 <led_task_run+0x1ac>)
 8005fdc:	f000 fbb3 	bl	8006746 <isQueueEmpty>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10f      	bne.n	8006006 <led_task_run+0xca>

				item = dequeue(&priorityQueue);
 8005fe6:	f107 030c 	add.w	r3, r7, #12
 8005fea:	493f      	ldr	r1, [pc, #252]	; (80060e8 <led_task_run+0x1ac>)
 8005fec:	4618      	mov	r0, r3
 8005fee:	f000 fca1 	bl	8006934 <dequeue>
				memcpy(&payload, item.data, sizeof(LedTask_t));
 8005ff2:	6939      	ldr	r1, [r7, #16]
 8005ff4:	463b      	mov	r3, r7
 8005ff6:	220c      	movs	r2, #12
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f001 fb88 	bl	800770e <memcpy>
				vPortFree(item.data); // Free the allocated memory
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	4618      	mov	r0, r3
 8006002:	f7ff fe7d 	bl	8005d00 <vPortFree>
			}
			taskEXIT_CRITICAL();
 8006006:	f7ff fcfd 	bl	8005a04 <vPortExitCritical>


			// Process the item. Turn on the corresp. LED for 5 seconds and then turn it off.
			if (payload.state == LED_CMD_ON)
 800600a:	787b      	ldrb	r3, [r7, #1]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d101      	bne.n	8006014 <led_task_run+0xd8>
				LOGGER_INFO("processing item with priority level: %d ", payload.priority);
 8006010:	f7ff fcc8 	bl	80059a4 <vPortEnterCritical>
 8006014:	4b35      	ldr	r3, [pc, #212]	; (80060ec <led_task_run+0x1b0>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a35      	ldr	r2, [pc, #212]	; (80060f0 <led_task_run+0x1b4>)
 800601a:	213f      	movs	r1, #63	; 0x3f
 800601c:	4618      	mov	r0, r3
 800601e:	f001 fa83 	bl	8007528 <sniprintf>
 8006022:	4603      	mov	r3, r0
 8006024:	4a33      	ldr	r2, [pc, #204]	; (80060f4 <led_task_run+0x1b8>)
 8006026:	6013      	str	r3, [r2, #0]
 8006028:	4b30      	ldr	r3, [pc, #192]	; (80060ec <led_task_run+0x1b0>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4618      	mov	r0, r3
 800602e:	f000 fb69 	bl	8006704 <logger_log_print_>
 8006032:	f7ff fce7 	bl	8005a04 <vPortExitCritical>
 8006036:	f7ff fcb5 	bl	80059a4 <vPortEnterCritical>
 800603a:	4b2c      	ldr	r3, [pc, #176]	; (80060ec <led_task_run+0x1b0>)
 800603c:	6818      	ldr	r0, [r3, #0]
 800603e:	7a3b      	ldrb	r3, [r7, #8]
 8006040:	4a2f      	ldr	r2, [pc, #188]	; (8006100 <led_task_run+0x1c4>)
 8006042:	213f      	movs	r1, #63	; 0x3f
 8006044:	f001 fa70 	bl	8007528 <sniprintf>
 8006048:	4603      	mov	r3, r0
 800604a:	4a2a      	ldr	r2, [pc, #168]	; (80060f4 <led_task_run+0x1b8>)
 800604c:	6013      	str	r3, [r2, #0]
 800604e:	4b27      	ldr	r3, [pc, #156]	; (80060ec <led_task_run+0x1b0>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4618      	mov	r0, r3
 8006054:	f000 fb56 	bl	8006704 <logger_log_print_>
 8006058:	f7ff fcd4 	bl	8005a04 <vPortExitCritical>
 800605c:	f7ff fca2 	bl	80059a4 <vPortEnterCritical>
 8006060:	4b22      	ldr	r3, [pc, #136]	; (80060ec <led_task_run+0x1b0>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a25      	ldr	r2, [pc, #148]	; (80060fc <led_task_run+0x1c0>)
 8006066:	213f      	movs	r1, #63	; 0x3f
 8006068:	4618      	mov	r0, r3
 800606a:	f001 fa5d 	bl	8007528 <sniprintf>
 800606e:	4603      	mov	r3, r0
 8006070:	4a20      	ldr	r2, [pc, #128]	; (80060f4 <led_task_run+0x1b8>)
 8006072:	6013      	str	r3, [r2, #0]
 8006074:	4b1d      	ldr	r3, [pc, #116]	; (80060ec <led_task_run+0x1b0>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4618      	mov	r0, r3
 800607a:	f000 fb43 	bl	8006704 <logger_log_print_>
 800607e:	f7ff fcc1 	bl	8005a04 <vPortExitCritical>
			{
				switch (payload.color) 
 8006082:	783b      	ldrb	r3, [r7, #0]
 8006084:	2b03      	cmp	r3, #3
 8006086:	d01e      	beq.n	80060c6 <led_task_run+0x18a>
 8006088:	2b03      	cmp	r3, #3
 800608a:	dc28      	bgt.n	80060de <led_task_run+0x1a2>
 800608c:	2b01      	cmp	r3, #1
 800608e:	d002      	beq.n	8006096 <led_task_run+0x15a>
 8006090:	2b02      	cmp	r3, #2
 8006092:	d00c      	beq.n	80060ae <led_task_run+0x172>
						led_blue_set_state(payload.state);
						vTaskDelay(pdMS_TO_TICKS(LED_ON_TIME));
						led_blue_set_state(LED_CMD_OFF);
						break;
					default:
						break;
 8006094:	e023      	b.n	80060de <led_task_run+0x1a2>
						led_red_set_state(payload.state);
 8006096:	787b      	ldrb	r3, [r7, #1]
 8006098:	4618      	mov	r0, r3
 800609a:	f000 f833 	bl	8006104 <led_red_set_state>
						vTaskDelay(pdMS_TO_TICKS(LED_ON_TIME));
 800609e:	f241 3088 	movw	r0, #5000	; 0x1388
 80060a2:	f7fe fd15 	bl	8004ad0 <vTaskDelay>
						led_red_set_state(LED_CMD_OFF);
 80060a6:	2000      	movs	r0, #0
 80060a8:	f000 f82c 	bl	8006104 <led_red_set_state>
						break;
 80060ac:	e018      	b.n	80060e0 <led_task_run+0x1a4>
						led_green_set_state(payload.state);
 80060ae:	787b      	ldrb	r3, [r7, #1]
 80060b0:	4618      	mov	r0, r3
 80060b2:	f000 f83f 	bl	8006134 <led_green_set_state>
						vTaskDelay(pdMS_TO_TICKS(LED_ON_TIME));
 80060b6:	f241 3088 	movw	r0, #5000	; 0x1388
 80060ba:	f7fe fd09 	bl	8004ad0 <vTaskDelay>
						led_green_set_state(LED_CMD_OFF);
 80060be:	2000      	movs	r0, #0
 80060c0:	f000 f838 	bl	8006134 <led_green_set_state>
						break;
 80060c4:	e00c      	b.n	80060e0 <led_task_run+0x1a4>
						led_blue_set_state(payload.state);
 80060c6:	787b      	ldrb	r3, [r7, #1]
 80060c8:	4618      	mov	r0, r3
 80060ca:	f000 f849 	bl	8006160 <led_blue_set_state>
						vTaskDelay(pdMS_TO_TICKS(LED_ON_TIME));
 80060ce:	f241 3088 	movw	r0, #5000	; 0x1388
 80060d2:	f7fe fcfd 	bl	8004ad0 <vTaskDelay>
						led_blue_set_state(LED_CMD_OFF);
 80060d6:	2000      	movs	r0, #0
 80060d8:	f000 f842 	bl	8006160 <led_blue_set_state>
						break;
 80060dc:	e000      	b.n	80060e0 <led_task_run+0x1a4>
						break;
 80060de:	bf00      	nop
		if (xSemaphoreTake(xSemaphore, 0) == pdPASS) {
 80060e0:	e72f      	b.n	8005f42 <led_task_run+0x6>
 80060e2:	bf00      	nop
 80060e4:	20004650 	.word	0x20004650
 80060e8:	200045e8 	.word	0x200045e8
 80060ec:	08008648 	.word	0x08008648
 80060f0:	080084b4 	.word	0x080084b4
 80060f4:	20004694 	.word	0x20004694
 80060f8:	080084bc 	.word	0x080084bc
 80060fc:	080084d4 	.word	0x080084d4
 8006100:	080084d8 	.word	0x080084d8

08006104 <led_red_set_state>:
}

/* ============================================================================================ */

void led_red_set_state(led_cmd_t cmd) 
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	4603      	mov	r3, r0
 800610c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, cmd == LED_CMD_ON ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800610e:	79fb      	ldrb	r3, [r7, #7]
 8006110:	2b01      	cmp	r3, #1
 8006112:	bf0c      	ite	eq
 8006114:	2301      	moveq	r3, #1
 8006116:	2300      	movne	r3, #0
 8006118:	b2db      	uxtb	r3, r3
 800611a:	461a      	mov	r2, r3
 800611c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006120:	4803      	ldr	r0, [pc, #12]	; (8006130 <led_red_set_state+0x2c>)
 8006122:	f7fb fda5 	bl	8001c70 <HAL_GPIO_WritePin>
}
 8006126:	bf00      	nop
 8006128:	3708      	adds	r7, #8
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	40020400 	.word	0x40020400

08006134 <led_green_set_state>:

/* ============================================================================================ */

void led_green_set_state(led_cmd_t cmd) 
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	4603      	mov	r3, r0
 800613c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, cmd == LED_CMD_ON ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800613e:	79fb      	ldrb	r3, [r7, #7]
 8006140:	2b01      	cmp	r3, #1
 8006142:	bf0c      	ite	eq
 8006144:	2301      	moveq	r3, #1
 8006146:	2300      	movne	r3, #0
 8006148:	b2db      	uxtb	r3, r3
 800614a:	461a      	mov	r2, r3
 800614c:	2101      	movs	r1, #1
 800614e:	4803      	ldr	r0, [pc, #12]	; (800615c <led_green_set_state+0x28>)
 8006150:	f7fb fd8e 	bl	8001c70 <HAL_GPIO_WritePin>
}
 8006154:	bf00      	nop
 8006156:	3708      	adds	r7, #8
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	40020400 	.word	0x40020400

08006160 <led_blue_set_state>:

/* ============================================================================================ */

void led_blue_set_state(led_cmd_t cmd) 
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	4603      	mov	r3, r0
 8006168:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, cmd == LED_CMD_ON ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800616a:	79fb      	ldrb	r3, [r7, #7]
 800616c:	2b01      	cmp	r3, #1
 800616e:	bf0c      	ite	eq
 8006170:	2301      	moveq	r3, #1
 8006172:	2300      	movne	r3, #0
 8006174:	b2db      	uxtb	r3, r3
 8006176:	461a      	mov	r2, r3
 8006178:	2180      	movs	r1, #128	; 0x80
 800617a:	4803      	ldr	r0, [pc, #12]	; (8006188 <led_blue_set_state+0x28>)
 800617c:	f7fb fd78 	bl	8001c70 <HAL_GPIO_WritePin>
}
 8006180:	bf00      	nop
 8006182:	3708      	adds	r7, #8
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	40020400 	.word	0x40020400

0800618c <create_led_task>:

/* ============================================================================================ */

void create_led_task( const char *task_name)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af02      	add	r7, sp, #8
 8006192:	6078      	str	r0, [r7, #4]
	if (xTaskCreate((TaskFunction_t)led_task_run, task_name, LED_TASK_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL) != pdPASS) 
 8006194:	2300      	movs	r3, #0
 8006196:	9301      	str	r3, [sp, #4]
 8006198:	2300      	movs	r3, #0
 800619a:	9300      	str	r3, [sp, #0]
 800619c:	2300      	movs	r3, #0
 800619e:	2280      	movs	r2, #128	; 0x80
 80061a0:	6879      	ldr	r1, [r7, #4]
 80061a2:	4821      	ldr	r0, [pc, #132]	; (8006228 <create_led_task+0x9c>)
 80061a4:	f7fe fb50 	bl	8004848 <xTaskCreate>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d038      	beq.n	8006220 <create_led_task+0x94>
	{

		LOGGER_INFO("Failed to create LED task");
 80061ae:	f7ff fbf9 	bl	80059a4 <vPortEnterCritical>
 80061b2:	4b1e      	ldr	r3, [pc, #120]	; (800622c <create_led_task+0xa0>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a1e      	ldr	r2, [pc, #120]	; (8006230 <create_led_task+0xa4>)
 80061b8:	213f      	movs	r1, #63	; 0x3f
 80061ba:	4618      	mov	r0, r3
 80061bc:	f001 f9b4 	bl	8007528 <sniprintf>
 80061c0:	4603      	mov	r3, r0
 80061c2:	4a1c      	ldr	r2, [pc, #112]	; (8006234 <create_led_task+0xa8>)
 80061c4:	6013      	str	r3, [r2, #0]
 80061c6:	4b19      	ldr	r3, [pc, #100]	; (800622c <create_led_task+0xa0>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4618      	mov	r0, r3
 80061cc:	f000 fa9a 	bl	8006704 <logger_log_print_>
 80061d0:	f7ff fc18 	bl	8005a04 <vPortExitCritical>
 80061d4:	f7ff fbe6 	bl	80059a4 <vPortEnterCritical>
 80061d8:	4b14      	ldr	r3, [pc, #80]	; (800622c <create_led_task+0xa0>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a16      	ldr	r2, [pc, #88]	; (8006238 <create_led_task+0xac>)
 80061de:	213f      	movs	r1, #63	; 0x3f
 80061e0:	4618      	mov	r0, r3
 80061e2:	f001 f9a1 	bl	8007528 <sniprintf>
 80061e6:	4603      	mov	r3, r0
 80061e8:	4a12      	ldr	r2, [pc, #72]	; (8006234 <create_led_task+0xa8>)
 80061ea:	6013      	str	r3, [r2, #0]
 80061ec:	4b0f      	ldr	r3, [pc, #60]	; (800622c <create_led_task+0xa0>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4618      	mov	r0, r3
 80061f2:	f000 fa87 	bl	8006704 <logger_log_print_>
 80061f6:	f7ff fc05 	bl	8005a04 <vPortExitCritical>
 80061fa:	f7ff fbd3 	bl	80059a4 <vPortEnterCritical>
 80061fe:	4b0b      	ldr	r3, [pc, #44]	; (800622c <create_led_task+0xa0>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a0e      	ldr	r2, [pc, #56]	; (800623c <create_led_task+0xb0>)
 8006204:	213f      	movs	r1, #63	; 0x3f
 8006206:	4618      	mov	r0, r3
 8006208:	f001 f98e 	bl	8007528 <sniprintf>
 800620c:	4603      	mov	r3, r0
 800620e:	4a09      	ldr	r2, [pc, #36]	; (8006234 <create_led_task+0xa8>)
 8006210:	6013      	str	r3, [r2, #0]
 8006212:	4b06      	ldr	r3, [pc, #24]	; (800622c <create_led_task+0xa0>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4618      	mov	r0, r3
 8006218:	f000 fa74 	bl	8006704 <logger_log_print_>
 800621c:	f7ff fbf2 	bl	8005a04 <vPortExitCritical>
	}
}
 8006220:	bf00      	nop
 8006222:	3708      	adds	r7, #8
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	08005f3d 	.word	0x08005f3d
 800622c:	08008648 	.word	0x08008648
 8006230:	080084b4 	.word	0x080084b4
 8006234:	20004694 	.word	0x20004694
 8006238:	08008504 	.word	0x08008504
 800623c:	080084d4 	.word	0x080084d4

08006240 <ui_task_init>:
PriorityQueue priorityQueue;

/* ============================================================================================ */

void ui_task_init(UiTask_t *ui_task, QueueHandle_t button_state_queue, LedTask_t *led_task)
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
	ui_task->button_state_queue = button_state_queue;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	601a      	str	r2, [r3, #0]
	ui_task->led_task = led_task;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	605a      	str	r2, [r3, #4]
}
 8006258:	bf00      	nop
 800625a:	3714      	adds	r7, #20
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <ui_task_run>:

/* ============================================================================================ */

void ui_task_run(void *argument)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b08a      	sub	sp, #40	; 0x28
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
	UiTask_t* ui_task = (UiTask_t*)argument;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	627b      	str	r3, [r7, #36]	; 0x24

	/* Run the UI task */
	while (true)
	{
		/* Wait for a button state change */
		if (xQueueReceive(ui_task->button_state_queue, &message, portMAX_DELAY) == pdPASS)
 8006270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f107 011c 	add.w	r1, r7, #28
 8006278:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800627c:	4618      	mov	r0, r3
 800627e:	f7fd ffcf 	bl	8004220 <xQueueReceive>
 8006282:	4603      	mov	r3, r0
 8006284:	2b01      	cmp	r3, #1
 8006286:	d1f3      	bne.n	8006270 <ui_task_run+0xc>
		{
			/* Process the button state according to its message assigned on task_button() */
			switch (message.button)
 8006288:	f897 3020 	ldrb.w	r3, [r7, #32]
 800628c:	2b03      	cmp	r3, #3
 800628e:	f000 80c1 	beq.w	8006414 <ui_task_run+0x1b0>
 8006292:	2b03      	cmp	r3, #3
 8006294:	f300 8115 	bgt.w	80064c2 <ui_task_run+0x25e>
 8006298:	2b01      	cmp	r3, #1
 800629a:	d002      	beq.n	80062a2 <ui_task_run+0x3e>
 800629c:	2b02      	cmp	r3, #2
 800629e:	d062      	beq.n	8006366 <ui_task_run+0x102>
				enqueue_semaphore(&priorityQueue, item);


				break;
			default:
				break;
 80062a0:	e10f      	b.n	80064c2 <ui_task_run+0x25e>
					LOGGER_INFO("Button pulse detected");
 80062a2:	f7ff fb7f 	bl	80059a4 <vPortEnterCritical>
 80062a6:	4b88      	ldr	r3, [pc, #544]	; (80064c8 <ui_task_run+0x264>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a88      	ldr	r2, [pc, #544]	; (80064cc <ui_task_run+0x268>)
 80062ac:	213f      	movs	r1, #63	; 0x3f
 80062ae:	4618      	mov	r0, r3
 80062b0:	f001 f93a 	bl	8007528 <sniprintf>
 80062b4:	4603      	mov	r3, r0
 80062b6:	4a86      	ldr	r2, [pc, #536]	; (80064d0 <ui_task_run+0x26c>)
 80062b8:	6013      	str	r3, [r2, #0]
 80062ba:	4b83      	ldr	r3, [pc, #524]	; (80064c8 <ui_task_run+0x264>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 fa20 	bl	8006704 <logger_log_print_>
 80062c4:	f7ff fb9e 	bl	8005a04 <vPortExitCritical>
 80062c8:	f7ff fb6c 	bl	80059a4 <vPortEnterCritical>
 80062cc:	4b7e      	ldr	r3, [pc, #504]	; (80064c8 <ui_task_run+0x264>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a80      	ldr	r2, [pc, #512]	; (80064d4 <ui_task_run+0x270>)
 80062d2:	213f      	movs	r1, #63	; 0x3f
 80062d4:	4618      	mov	r0, r3
 80062d6:	f001 f927 	bl	8007528 <sniprintf>
 80062da:	4603      	mov	r3, r0
 80062dc:	4a7c      	ldr	r2, [pc, #496]	; (80064d0 <ui_task_run+0x26c>)
 80062de:	6013      	str	r3, [r2, #0]
 80062e0:	4b79      	ldr	r3, [pc, #484]	; (80064c8 <ui_task_run+0x264>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4618      	mov	r0, r3
 80062e6:	f000 fa0d 	bl	8006704 <logger_log_print_>
 80062ea:	f7ff fb8b 	bl	8005a04 <vPortExitCritical>
 80062ee:	f7ff fb59 	bl	80059a4 <vPortEnterCritical>
 80062f2:	4b75      	ldr	r3, [pc, #468]	; (80064c8 <ui_task_run+0x264>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a78      	ldr	r2, [pc, #480]	; (80064d8 <ui_task_run+0x274>)
 80062f8:	213f      	movs	r1, #63	; 0x3f
 80062fa:	4618      	mov	r0, r3
 80062fc:	f001 f914 	bl	8007528 <sniprintf>
 8006300:	4603      	mov	r3, r0
 8006302:	4a73      	ldr	r2, [pc, #460]	; (80064d0 <ui_task_run+0x26c>)
 8006304:	6013      	str	r3, [r2, #0]
 8006306:	4b70      	ldr	r3, [pc, #448]	; (80064c8 <ui_task_run+0x264>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4618      	mov	r0, r3
 800630c:	f000 f9fa 	bl	8006704 <logger_log_print_>
 8006310:	f7ff fb78 	bl	8005a04 <vPortExitCritical>
					payload.color = LED_COLOR_RED;
 8006314:	2301      	movs	r3, #1
 8006316:	743b      	strb	r3, [r7, #16]
					payload.state = LED_CMD_ON;
 8006318:	2301      	movs	r3, #1
 800631a:	747b      	strb	r3, [r7, #17]
					payload.name = "RED LED Task";
 800631c:	4b6f      	ldr	r3, [pc, #444]	; (80064dc <ui_task_run+0x278>)
 800631e:	617b      	str	r3, [r7, #20]
					payload.priority = HIGH;
 8006320:	2302      	movs	r3, #2
 8006322:	763b      	strb	r3, [r7, #24]
					item.priority = payload.priority;
 8006324:	7e3b      	ldrb	r3, [r7, #24]
 8006326:	723b      	strb	r3, [r7, #8]
					item.data = pvPortMalloc(sizeof(LedTask_t));
 8006328:	200c      	movs	r0, #12
 800632a:	f7ff fc1d 	bl	8005b68 <pvPortMalloc>
 800632e:	4603      	mov	r3, r0
 8006330:	60fb      	str	r3, [r7, #12]
					memcpy(item.data, &payload, sizeof(LedTask_t));
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f107 0110 	add.w	r1, r7, #16
 8006338:	220c      	movs	r2, #12
 800633a:	4618      	mov	r0, r3
 800633c:	f001 f9e7 	bl	800770e <memcpy>
					taskENTER_CRITICAL();
 8006340:	f7ff fb30 	bl	80059a4 <vPortEnterCritical>
					enqueue(&priorityQueue, item);
 8006344:	f107 0308 	add.w	r3, r7, #8
 8006348:	e893 0006 	ldmia.w	r3, {r1, r2}
 800634c:	4864      	ldr	r0, [pc, #400]	; (80064e0 <ui_task_run+0x27c>)
 800634e:	f000 faca 	bl	80068e6 <enqueue>
					taskEXIT_CRITICAL();
 8006352:	f7ff fb57 	bl	8005a04 <vPortExitCritical>
					xSemaphoreGive(xSemaphore);
 8006356:	4b63      	ldr	r3, [pc, #396]	; (80064e4 <ui_task_run+0x280>)
 8006358:	6818      	ldr	r0, [r3, #0]
 800635a:	2300      	movs	r3, #0
 800635c:	2200      	movs	r2, #0
 800635e:	2100      	movs	r1, #0
 8006360:	f7fd fe60 	bl	8004024 <xQueueGenericSend>
					break;
 8006364:	e0ae      	b.n	80064c4 <ui_task_run+0x260>
				LOGGER_INFO("Button short press detected");
 8006366:	f7ff fb1d 	bl	80059a4 <vPortEnterCritical>
 800636a:	4b57      	ldr	r3, [pc, #348]	; (80064c8 <ui_task_run+0x264>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a57      	ldr	r2, [pc, #348]	; (80064cc <ui_task_run+0x268>)
 8006370:	213f      	movs	r1, #63	; 0x3f
 8006372:	4618      	mov	r0, r3
 8006374:	f001 f8d8 	bl	8007528 <sniprintf>
 8006378:	4603      	mov	r3, r0
 800637a:	4a55      	ldr	r2, [pc, #340]	; (80064d0 <ui_task_run+0x26c>)
 800637c:	6013      	str	r3, [r2, #0]
 800637e:	4b52      	ldr	r3, [pc, #328]	; (80064c8 <ui_task_run+0x264>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4618      	mov	r0, r3
 8006384:	f000 f9be 	bl	8006704 <logger_log_print_>
 8006388:	f7ff fb3c 	bl	8005a04 <vPortExitCritical>
 800638c:	f7ff fb0a 	bl	80059a4 <vPortEnterCritical>
 8006390:	4b4d      	ldr	r3, [pc, #308]	; (80064c8 <ui_task_run+0x264>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a54      	ldr	r2, [pc, #336]	; (80064e8 <ui_task_run+0x284>)
 8006396:	213f      	movs	r1, #63	; 0x3f
 8006398:	4618      	mov	r0, r3
 800639a:	f001 f8c5 	bl	8007528 <sniprintf>
 800639e:	4603      	mov	r3, r0
 80063a0:	4a4b      	ldr	r2, [pc, #300]	; (80064d0 <ui_task_run+0x26c>)
 80063a2:	6013      	str	r3, [r2, #0]
 80063a4:	4b48      	ldr	r3, [pc, #288]	; (80064c8 <ui_task_run+0x264>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4618      	mov	r0, r3
 80063aa:	f000 f9ab 	bl	8006704 <logger_log_print_>
 80063ae:	f7ff fb29 	bl	8005a04 <vPortExitCritical>
 80063b2:	f7ff faf7 	bl	80059a4 <vPortEnterCritical>
 80063b6:	4b44      	ldr	r3, [pc, #272]	; (80064c8 <ui_task_run+0x264>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a47      	ldr	r2, [pc, #284]	; (80064d8 <ui_task_run+0x274>)
 80063bc:	213f      	movs	r1, #63	; 0x3f
 80063be:	4618      	mov	r0, r3
 80063c0:	f001 f8b2 	bl	8007528 <sniprintf>
 80063c4:	4603      	mov	r3, r0
 80063c6:	4a42      	ldr	r2, [pc, #264]	; (80064d0 <ui_task_run+0x26c>)
 80063c8:	6013      	str	r3, [r2, #0]
 80063ca:	4b3f      	ldr	r3, [pc, #252]	; (80064c8 <ui_task_run+0x264>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f000 f998 	bl	8006704 <logger_log_print_>
 80063d4:	f7ff fb16 	bl	8005a04 <vPortExitCritical>
				payload.color = LED_COLOR_GREEN;
 80063d8:	2302      	movs	r3, #2
 80063da:	743b      	strb	r3, [r7, #16]
				payload.state = LED_CMD_ON;
 80063dc:	2301      	movs	r3, #1
 80063de:	747b      	strb	r3, [r7, #17]
				payload.name = "Green LED Task";
 80063e0:	4b42      	ldr	r3, [pc, #264]	; (80064ec <ui_task_run+0x288>)
 80063e2:	617b      	str	r3, [r7, #20]
				payload.priority = MEDIUM;
 80063e4:	2301      	movs	r3, #1
 80063e6:	763b      	strb	r3, [r7, #24]
				item.priority = payload.priority;
 80063e8:	7e3b      	ldrb	r3, [r7, #24]
 80063ea:	723b      	strb	r3, [r7, #8]
				item.data = pvPortMalloc(sizeof(LedTask_t));
 80063ec:	200c      	movs	r0, #12
 80063ee:	f7ff fbbb 	bl	8005b68 <pvPortMalloc>
 80063f2:	4603      	mov	r3, r0
 80063f4:	60fb      	str	r3, [r7, #12]
				memcpy(item.data, &payload, sizeof(LedTask_t));
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f107 0110 	add.w	r1, r7, #16
 80063fc:	220c      	movs	r2, #12
 80063fe:	4618      	mov	r0, r3
 8006400:	f001 f985 	bl	800770e <memcpy>
				enqueue_semaphore(&priorityQueue, item);
 8006404:	f107 0308 	add.w	r3, r7, #8
 8006408:	e893 0006 	ldmia.w	r3, {r1, r2}
 800640c:	4834      	ldr	r0, [pc, #208]	; (80064e0 <ui_task_run+0x27c>)
 800640e:	f000 f873 	bl	80064f8 <enqueue_semaphore>
				break;
 8006412:	e057      	b.n	80064c4 <ui_task_run+0x260>
				LOGGER_INFO("Button long press detected");
 8006414:	f7ff fac6 	bl	80059a4 <vPortEnterCritical>
 8006418:	4b2b      	ldr	r3, [pc, #172]	; (80064c8 <ui_task_run+0x264>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a2b      	ldr	r2, [pc, #172]	; (80064cc <ui_task_run+0x268>)
 800641e:	213f      	movs	r1, #63	; 0x3f
 8006420:	4618      	mov	r0, r3
 8006422:	f001 f881 	bl	8007528 <sniprintf>
 8006426:	4603      	mov	r3, r0
 8006428:	4a29      	ldr	r2, [pc, #164]	; (80064d0 <ui_task_run+0x26c>)
 800642a:	6013      	str	r3, [r2, #0]
 800642c:	4b26      	ldr	r3, [pc, #152]	; (80064c8 <ui_task_run+0x264>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4618      	mov	r0, r3
 8006432:	f000 f967 	bl	8006704 <logger_log_print_>
 8006436:	f7ff fae5 	bl	8005a04 <vPortExitCritical>
 800643a:	f7ff fab3 	bl	80059a4 <vPortEnterCritical>
 800643e:	4b22      	ldr	r3, [pc, #136]	; (80064c8 <ui_task_run+0x264>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a2b      	ldr	r2, [pc, #172]	; (80064f0 <ui_task_run+0x28c>)
 8006444:	213f      	movs	r1, #63	; 0x3f
 8006446:	4618      	mov	r0, r3
 8006448:	f001 f86e 	bl	8007528 <sniprintf>
 800644c:	4603      	mov	r3, r0
 800644e:	4a20      	ldr	r2, [pc, #128]	; (80064d0 <ui_task_run+0x26c>)
 8006450:	6013      	str	r3, [r2, #0]
 8006452:	4b1d      	ldr	r3, [pc, #116]	; (80064c8 <ui_task_run+0x264>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4618      	mov	r0, r3
 8006458:	f000 f954 	bl	8006704 <logger_log_print_>
 800645c:	f7ff fad2 	bl	8005a04 <vPortExitCritical>
 8006460:	f7ff faa0 	bl	80059a4 <vPortEnterCritical>
 8006464:	4b18      	ldr	r3, [pc, #96]	; (80064c8 <ui_task_run+0x264>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a1b      	ldr	r2, [pc, #108]	; (80064d8 <ui_task_run+0x274>)
 800646a:	213f      	movs	r1, #63	; 0x3f
 800646c:	4618      	mov	r0, r3
 800646e:	f001 f85b 	bl	8007528 <sniprintf>
 8006472:	4603      	mov	r3, r0
 8006474:	4a16      	ldr	r2, [pc, #88]	; (80064d0 <ui_task_run+0x26c>)
 8006476:	6013      	str	r3, [r2, #0]
 8006478:	4b13      	ldr	r3, [pc, #76]	; (80064c8 <ui_task_run+0x264>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4618      	mov	r0, r3
 800647e:	f000 f941 	bl	8006704 <logger_log_print_>
 8006482:	f7ff fabf 	bl	8005a04 <vPortExitCritical>
				payload.color = LED_COLOR_BLUE;
 8006486:	2303      	movs	r3, #3
 8006488:	743b      	strb	r3, [r7, #16]
				payload.state = LED_CMD_ON;
 800648a:	2301      	movs	r3, #1
 800648c:	747b      	strb	r3, [r7, #17]
				payload.name = "Blue LED Task";
 800648e:	4b19      	ldr	r3, [pc, #100]	; (80064f4 <ui_task_run+0x290>)
 8006490:	617b      	str	r3, [r7, #20]
				payload.priority = LOW;
 8006492:	2300      	movs	r3, #0
 8006494:	763b      	strb	r3, [r7, #24]
				item.priority = payload.priority;
 8006496:	7e3b      	ldrb	r3, [r7, #24]
 8006498:	723b      	strb	r3, [r7, #8]
				item.data = pvPortMalloc(sizeof(LedTask_t));
 800649a:	200c      	movs	r0, #12
 800649c:	f7ff fb64 	bl	8005b68 <pvPortMalloc>
 80064a0:	4603      	mov	r3, r0
 80064a2:	60fb      	str	r3, [r7, #12]
				memcpy(item.data, &payload, sizeof(LedTask_t));
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f107 0110 	add.w	r1, r7, #16
 80064aa:	220c      	movs	r2, #12
 80064ac:	4618      	mov	r0, r3
 80064ae:	f001 f92e 	bl	800770e <memcpy>
				enqueue_semaphore(&priorityQueue, item);
 80064b2:	f107 0308 	add.w	r3, r7, #8
 80064b6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80064ba:	4809      	ldr	r0, [pc, #36]	; (80064e0 <ui_task_run+0x27c>)
 80064bc:	f000 f81c 	bl	80064f8 <enqueue_semaphore>
				break;
 80064c0:	e000      	b.n	80064c4 <ui_task_run+0x260>
				break;
 80064c2:	bf00      	nop
		if (xQueueReceive(ui_task->button_state_queue, &message, portMAX_DELAY) == pdPASS)
 80064c4:	e6d4      	b.n	8006270 <ui_task_run+0xc>
 80064c6:	bf00      	nop
 80064c8:	08008648 	.word	0x08008648
 80064cc:	08008520 	.word	0x08008520
 80064d0:	20004694 	.word	0x20004694
 80064d4:	08008528 	.word	0x08008528
 80064d8:	08008540 	.word	0x08008540
 80064dc:	08008544 	.word	0x08008544
 80064e0:	200045e8 	.word	0x200045e8
 80064e4:	20004650 	.word	0x20004650
 80064e8:	08008554 	.word	0x08008554
 80064ec:	08008570 	.word	0x08008570
 80064f0:	08008580 	.word	0x08008580
 80064f4:	0800859c 	.word	0x0800859c

080064f8 <enqueue_semaphore>:
		}
	}
}


void enqueue_semaphore(PriorityQueue *q, QueueItem_t item){
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	1d3b      	adds	r3, r7, #4
 8006502:	e883 0006 	stmia.w	r3, {r1, r2}
	taskENTER_CRITICAL();
 8006506:	f7ff fa4d 	bl	80059a4 <vPortEnterCritical>
	enqueue(q, item);
 800650a:	1d3b      	adds	r3, r7, #4
 800650c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f000 f9e8 	bl	80068e6 <enqueue>
	taskEXIT_CRITICAL();
 8006516:	f7ff fa75 	bl	8005a04 <vPortExitCritical>
	xSemaphoreGive(xSemaphore);
 800651a:	4b05      	ldr	r3, [pc, #20]	; (8006530 <enqueue_semaphore+0x38>)
 800651c:	6818      	ldr	r0, [r3, #0]
 800651e:	2300      	movs	r3, #0
 8006520:	2200      	movs	r2, #0
 8006522:	2100      	movs	r1, #0
 8006524:	f7fd fd7e 	bl	8004024 <xQueueGenericSend>
}
 8006528:	bf00      	nop
 800652a:	3710      	adds	r7, #16
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	20004650 	.word	0x20004650

08006534 <ui_send_message>:

/* ============================================================================================ */

void ui_send_message(message_t *pmsg)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
	xQueueSend(ui_event_queue,pmsg	,	pdMS_TO_TICKS(10) );
 800653c:	4b05      	ldr	r3, [pc, #20]	; (8006554 <ui_send_message+0x20>)
 800653e:	6818      	ldr	r0, [r3, #0]
 8006540:	2300      	movs	r3, #0
 8006542:	220a      	movs	r2, #10
 8006544:	6879      	ldr	r1, [r7, #4]
 8006546:	f7fd fd6d 	bl	8004024 <xQueueGenericSend>
}
 800654a:	bf00      	nop
 800654c:	3708      	adds	r7, #8
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	200045e4 	.word	0x200045e4

08006558 <ui_task_create>:

/* ============================================================================================ */

void ui_task_create(UiTask_t *ui_task) 
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b086      	sub	sp, #24
 800655c:	af02      	add	r7, sp, #8
 800655e:	6078      	str	r0, [r7, #4]
	/* Create the UI event queue */
	ui_event_queue = xQueueCreate(10, sizeof(message_t));
 8006560:	2200      	movs	r2, #0
 8006562:	2108      	movs	r1, #8
 8006564:	200a      	movs	r0, #10
 8006566:	f7fd fcd1 	bl	8003f0c <xQueueGenericCreate>
 800656a:	4603      	mov	r3, r0
 800656c:	4a12      	ldr	r2, [pc, #72]	; (80065b8 <ui_task_create+0x60>)
 800656e:	6013      	str	r3, [r2, #0]

	/* Initialize the UI task */
	ui_task_init(ui_task, ui_event_queue, &led_task);
 8006570:	4b11      	ldr	r3, [pc, #68]	; (80065b8 <ui_task_create+0x60>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a11      	ldr	r2, [pc, #68]	; (80065bc <ui_task_create+0x64>)
 8006576:	4619      	mov	r1, r3
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f7ff fe61 	bl	8006240 <ui_task_init>

	/* Create the UI task */
	BaseType_t status;

	status = xTaskCreate(ui_task_run, "UI Task", configMINIMAL_STACK_SIZE, ui_task, tskIDLE_PRIORITY, NULL);
 800657e:	2300      	movs	r3, #0
 8006580:	9301      	str	r3, [sp, #4]
 8006582:	2300      	movs	r3, #0
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2280      	movs	r2, #128	; 0x80
 800658a:	490d      	ldr	r1, [pc, #52]	; (80065c0 <ui_task_create+0x68>)
 800658c:	480d      	ldr	r0, [pc, #52]	; (80065c4 <ui_task_create+0x6c>)
 800658e:	f7fe f95b 	bl	8004848 <xTaskCreate>
 8006592:	60f8      	str	r0, [r7, #12]
	configASSERT(pdPASS == status);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2b01      	cmp	r3, #1
 8006598:	d00a      	beq.n	80065b0 <ui_task_create+0x58>
	__asm volatile
 800659a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659e:	f383 8811 	msr	BASEPRI, r3
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	60bb      	str	r3, [r7, #8]
}
 80065ac:	bf00      	nop
 80065ae:	e7fe      	b.n	80065ae <ui_task_create+0x56>
}
 80065b0:	bf00      	nop
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	200045e4 	.word	0x200045e4
 80065bc:	2000463c 	.word	0x2000463c
 80065c0:	080085ac 	.word	0x080085ac
 80065c4:	08006265 	.word	0x08006265

080065c8 <app_init>:
/********************** external data declaration *****************************/

/********************** external functions definition ************************/

void app_init(void)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af02      	add	r7, sp, #8
    /* Create button task */
    ui_task.led_task = &led_task;
 80065ce:	4b3f      	ldr	r3, [pc, #252]	; (80066cc <app_init+0x104>)
 80065d0:	4a3f      	ldr	r2, [pc, #252]	; (80066d0 <app_init+0x108>)
 80065d2:	605a      	str	r2, [r3, #4]
    /* Create UI task */
    ui_task_create(&ui_task);
 80065d4:	483d      	ldr	r0, [pc, #244]	; (80066cc <app_init+0x104>)
 80065d6:	f7ff ffbf 	bl	8006558 <ui_task_create>
    /* Create LED task */
    BaseType_t status;
    // Create the LED tasks
    create_led_task("LED_AO");
 80065da:	483e      	ldr	r0, [pc, #248]	; (80066d4 <app_init+0x10c>)
 80065dc:	f7ff fdd6 	bl	800618c <create_led_task>
    initQueue(&priorityQueue);
 80065e0:	483d      	ldr	r0, [pc, #244]	; (80066d8 <app_init+0x110>)
 80065e2:	f000 f8a3 	bl	800672c <initQueue>

    xSemaphore = xSemaphoreCreateCounting(MAX_QUEUE_SIZE, 0);
 80065e6:	2100      	movs	r1, #0
 80065e8:	200a      	movs	r0, #10
 80065ea:	f7fd fce8 	bl	8003fbe <xQueueCreateCountingSemaphore>
 80065ee:	4603      	mov	r3, r0
 80065f0:	4a3a      	ldr	r2, [pc, #232]	; (80066dc <app_init+0x114>)
 80065f2:	6013      	str	r3, [r2, #0]

    if (xSemaphore == NULL) {
 80065f4:	4b39      	ldr	r3, [pc, #228]	; (80066dc <app_init+0x114>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d100      	bne.n	80065fe <app_init+0x36>

        while (1);
 80065fc:	e7fe      	b.n	80065fc <app_init+0x34>
    
    /* Create button task */
    status = xTaskCreate(task_button,
    					"Button Task",
						configMINIMAL_STACK_SIZE,
						ui_task.button_state_queue,
 80065fe:	4b33      	ldr	r3, [pc, #204]	; (80066cc <app_init+0x104>)
 8006600:	681b      	ldr	r3, [r3, #0]
    status = xTaskCreate(task_button,
 8006602:	2200      	movs	r2, #0
 8006604:	9201      	str	r2, [sp, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	9200      	str	r2, [sp, #0]
 800660a:	2280      	movs	r2, #128	; 0x80
 800660c:	4934      	ldr	r1, [pc, #208]	; (80066e0 <app_init+0x118>)
 800660e:	4835      	ldr	r0, [pc, #212]	; (80066e4 <app_init+0x11c>)
 8006610:	f7fe f91a 	bl	8004848 <xTaskCreate>
 8006614:	6078      	str	r0, [r7, #4]
						tskIDLE_PRIORITY,
						NULL);

    configASSERT(status == pdPASS);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d00a      	beq.n	8006632 <app_init+0x6a>
	__asm volatile
 800661c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006620:	f383 8811 	msr	BASEPRI, r3
 8006624:	f3bf 8f6f 	isb	sy
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	603b      	str	r3, [r7, #0]
}
 800662e:	bf00      	nop
 8006630:	e7fe      	b.n	8006630 <app_init+0x68>
	LOGGER_INFO("App initialized...");
 8006632:	f7ff f9b7 	bl	80059a4 <vPortEnterCritical>
 8006636:	4b2c      	ldr	r3, [pc, #176]	; (80066e8 <app_init+0x120>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a2c      	ldr	r2, [pc, #176]	; (80066ec <app_init+0x124>)
 800663c:	213f      	movs	r1, #63	; 0x3f
 800663e:	4618      	mov	r0, r3
 8006640:	f000 ff72 	bl	8007528 <sniprintf>
 8006644:	4603      	mov	r3, r0
 8006646:	4a2a      	ldr	r2, [pc, #168]	; (80066f0 <app_init+0x128>)
 8006648:	6013      	str	r3, [r2, #0]
 800664a:	4b27      	ldr	r3, [pc, #156]	; (80066e8 <app_init+0x120>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4618      	mov	r0, r3
 8006650:	f000 f858 	bl	8006704 <logger_log_print_>
 8006654:	f7ff f9d6 	bl	8005a04 <vPortExitCritical>
 8006658:	f7ff f9a4 	bl	80059a4 <vPortEnterCritical>
 800665c:	4b22      	ldr	r3, [pc, #136]	; (80066e8 <app_init+0x120>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a24      	ldr	r2, [pc, #144]	; (80066f4 <app_init+0x12c>)
 8006662:	213f      	movs	r1, #63	; 0x3f
 8006664:	4618      	mov	r0, r3
 8006666:	f000 ff5f 	bl	8007528 <sniprintf>
 800666a:	4603      	mov	r3, r0
 800666c:	4a20      	ldr	r2, [pc, #128]	; (80066f0 <app_init+0x128>)
 800666e:	6013      	str	r3, [r2, #0]
 8006670:	4b1d      	ldr	r3, [pc, #116]	; (80066e8 <app_init+0x120>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4618      	mov	r0, r3
 8006676:	f000 f845 	bl	8006704 <logger_log_print_>
 800667a:	f7ff f9c3 	bl	8005a04 <vPortExitCritical>
 800667e:	f7ff f991 	bl	80059a4 <vPortEnterCritical>
 8006682:	4b19      	ldr	r3, [pc, #100]	; (80066e8 <app_init+0x120>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a1c      	ldr	r2, [pc, #112]	; (80066f8 <app_init+0x130>)
 8006688:	213f      	movs	r1, #63	; 0x3f
 800668a:	4618      	mov	r0, r3
 800668c:	f000 ff4c 	bl	8007528 <sniprintf>
 8006690:	4603      	mov	r3, r0
 8006692:	4a17      	ldr	r2, [pc, #92]	; (80066f0 <app_init+0x128>)
 8006694:	6013      	str	r3, [r2, #0]
 8006696:	4b14      	ldr	r3, [pc, #80]	; (80066e8 <app_init+0x120>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4618      	mov	r0, r3
 800669c:	f000 f832 	bl	8006704 <logger_log_print_>
 80066a0:	f7ff f9b0 	bl	8005a04 <vPortExitCritical>
	cycle_counter_init();
 80066a4:	4b15      	ldr	r3, [pc, #84]	; (80066fc <app_init+0x134>)
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	4a14      	ldr	r2, [pc, #80]	; (80066fc <app_init+0x134>)
 80066aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066ae:	60d3      	str	r3, [r2, #12]
 80066b0:	4b13      	ldr	r3, [pc, #76]	; (8006700 <app_init+0x138>)
 80066b2:	2200      	movs	r2, #0
 80066b4:	605a      	str	r2, [r3, #4]
 80066b6:	4b12      	ldr	r3, [pc, #72]	; (8006700 <app_init+0x138>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a11      	ldr	r2, [pc, #68]	; (8006700 <app_init+0x138>)
 80066bc:	f043 0301 	orr.w	r3, r3, #1
 80066c0:	6013      	str	r3, [r2, #0]
}
 80066c2:	bf00      	nop
 80066c4:	3708      	adds	r7, #8
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	20004648 	.word	0x20004648
 80066d0:	2000463c 	.word	0x2000463c
 80066d4:	080085b4 	.word	0x080085b4
 80066d8:	200045e8 	.word	0x200045e8
 80066dc:	20004650 	.word	0x20004650
 80066e0:	080085bc 	.word	0x080085bc
 80066e4:	08006a35 	.word	0x08006a35
 80066e8:	08008648 	.word	0x08008648
 80066ec:	080085c8 	.word	0x080085c8
 80066f0:	20004694 	.word	0x20004694
 80066f4:	080085d0 	.word	0x080085d0
 80066f8:	080085e4 	.word	0x080085e4
 80066fc:	e000edf0 	.word	0xe000edf0
 8006700:	e0001000 	.word	0xe0001000

08006704 <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
	printf(msg);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 fef9 	bl	8007504 <iprintf>
	fflush(stdout);
 8006712:	4b05      	ldr	r3, [pc, #20]	; (8006728 <logger_log_print_+0x24>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	4618      	mov	r0, r3
 800671a:	f000 fe1d 	bl	8007358 <fflush>
}
 800671e:	bf00      	nop
 8006720:	3708      	adds	r7, #8
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	20000070 	.word	0x20000070

0800672c <initQueue>:
#include "priority_queue.h"

/* ============================================================================================ */

void initQueue(PriorityQueue *q) 
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
    q->size = 0;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	651a      	str	r2, [r3, #80]	; 0x50
}
 800673a:	bf00      	nop
 800673c:	370c      	adds	r7, #12
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <isQueueEmpty>:

/* ============================================================================================ */

int isQueueEmpty(PriorityQueue *q) 
{
 8006746:	b480      	push	{r7}
 8006748:	b083      	sub	sp, #12
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
    return q->size == 0;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006752:	2b00      	cmp	r3, #0
 8006754:	bf0c      	ite	eq
 8006756:	2301      	moveq	r3, #1
 8006758:	2300      	movne	r3, #0
 800675a:	b2db      	uxtb	r3, r3
}
 800675c:	4618      	mov	r0, r3
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <isQueueFull>:

/* ============================================================================================ */


int isQueueFull(PriorityQueue *q) {
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
    return q->size == MAX_QUEUE_SIZE;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006774:	2b0a      	cmp	r3, #10
 8006776:	bf0c      	ite	eq
 8006778:	2301      	moveq	r3, #1
 800677a:	2300      	movne	r3, #0
 800677c:	b2db      	uxtb	r3, r3
}
 800677e:	4618      	mov	r0, r3
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <getQueueSize>:

/* ============================================================================================ */

int getQueueSize(PriorityQueue *q) 
{
 800678a:	b480      	push	{r7}
 800678c:	b083      	sub	sp, #12
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
    return q->size;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
 8006796:	4618      	mov	r0, r3
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <heapifyUp>:

void heapifyUp(PriorityQueue *q, int index) {
 80067a2:	b480      	push	{r7}
 80067a4:	b087      	sub	sp, #28
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
 80067aa:	6039      	str	r1, [r7, #0]
    while (index > 0) {
 80067ac:	e031      	b.n	8006812 <heapifyUp+0x70>
        int parentIndex = (index - 1) / 2;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	3b01      	subs	r3, #1
 80067b2:	0fda      	lsrs	r2, r3, #31
 80067b4:	4413      	add	r3, r2
 80067b6:	105b      	asrs	r3, r3, #1
 80067b8:	617b      	str	r3, [r7, #20]
        if (q->items[index].priority > q->items[parentIndex].priority) {
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	683a      	ldr	r2, [r7, #0]
 80067be:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6979      	ldr	r1, [r7, #20]
 80067c6:	f813 3031 	ldrb.w	r3, [r3, r1, lsl #3]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d925      	bls.n	800681a <heapifyUp+0x78>
            QueueItem_t temp = q->items[index];
 80067ce:	6879      	ldr	r1, [r7, #4]
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	f107 020c 	add.w	r2, r7, #12
 80067d6:	00db      	lsls	r3, r3, #3
 80067d8:	440b      	add	r3, r1
 80067da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80067de:	e882 0003 	stmia.w	r2, {r0, r1}
            q->items[index] = q->items[parentIndex];
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	6879      	ldr	r1, [r7, #4]
 80067e8:	697a      	ldr	r2, [r7, #20]
 80067ea:	00db      	lsls	r3, r3, #3
 80067ec:	4403      	add	r3, r0
 80067ee:	00d2      	lsls	r2, r2, #3
 80067f0:	440a      	add	r2, r1
 80067f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80067f6:	e883 0003 	stmia.w	r3, {r0, r1}
            q->items[parentIndex] = temp;
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	00db      	lsls	r3, r3, #3
 8006800:	4413      	add	r3, r2
 8006802:	f107 020c 	add.w	r2, r7, #12
 8006806:	e892 0003 	ldmia.w	r2, {r0, r1}
 800680a:	e883 0003 	stmia.w	r3, {r0, r1}
            index = parentIndex;
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	603b      	str	r3, [r7, #0]
    while (index > 0) {
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	dcca      	bgt.n	80067ae <heapifyUp+0xc>
        } else {
            break;
        }
    }
}
 8006818:	e000      	b.n	800681c <heapifyUp+0x7a>
            break;
 800681a:	bf00      	nop
}
 800681c:	bf00      	nop
 800681e:	371c      	adds	r7, #28
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <heapifyDown>:

void heapifyDown(PriorityQueue *q, int index) {
 8006828:	b480      	push	{r7}
 800682a:	b089      	sub	sp, #36	; 0x24
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
    while (1) {
        int largest = index;
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	61fb      	str	r3, [r7, #28]
        int leftChild = 2 * index + 1;
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	005b      	lsls	r3, r3, #1
 800683a:	3301      	adds	r3, #1
 800683c:	61bb      	str	r3, [r7, #24]
        int rightChild = 2 * index + 2;
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	3301      	adds	r3, #1
 8006842:	005b      	lsls	r3, r3, #1
 8006844:	617b      	str	r3, [r7, #20]

        if (leftChild < q->size && q->items[leftChild].priority > q->items[largest].priority) {
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800684a:	69ba      	ldr	r2, [r7, #24]
 800684c:	429a      	cmp	r2, r3
 800684e:	da0b      	bge.n	8006868 <heapifyDown+0x40>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	69ba      	ldr	r2, [r7, #24]
 8006854:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	69f9      	ldr	r1, [r7, #28]
 800685c:	f813 3031 	ldrb.w	r3, [r3, r1, lsl #3]
 8006860:	429a      	cmp	r2, r3
 8006862:	d901      	bls.n	8006868 <heapifyDown+0x40>
            largest = leftChild;
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	61fb      	str	r3, [r7, #28]
        }
        if (rightChild < q->size && q->items[rightChild].priority > q->items[largest].priority) {
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	429a      	cmp	r2, r3
 8006870:	da0b      	bge.n	800688a <heapifyDown+0x62>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	697a      	ldr	r2, [r7, #20]
 8006876:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	69f9      	ldr	r1, [r7, #28]
 800687e:	f813 3031 	ldrb.w	r3, [r3, r1, lsl #3]
 8006882:	429a      	cmp	r2, r3
 8006884:	d901      	bls.n	800688a <heapifyDown+0x62>
            largest = rightChild;
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	61fb      	str	r3, [r7, #28]
        }
        if (largest != index) {
 800688a:	69fa      	ldr	r2, [r7, #28]
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	429a      	cmp	r2, r3
 8006890:	d022      	beq.n	80068d8 <heapifyDown+0xb0>
        	QueueItem_t temp = q->items[index];
 8006892:	6879      	ldr	r1, [r7, #4]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	f107 020c 	add.w	r2, r7, #12
 800689a:	00db      	lsls	r3, r3, #3
 800689c:	440b      	add	r3, r1
 800689e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80068a2:	e882 0003 	stmia.w	r2, {r0, r1}
            q->items[index] = q->items[largest];
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	6879      	ldr	r1, [r7, #4]
 80068ac:	69fa      	ldr	r2, [r7, #28]
 80068ae:	00db      	lsls	r3, r3, #3
 80068b0:	4403      	add	r3, r0
 80068b2:	00d2      	lsls	r2, r2, #3
 80068b4:	440a      	add	r2, r1
 80068b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80068ba:	e883 0003 	stmia.w	r3, {r0, r1}
            q->items[largest] = temp;
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	00db      	lsls	r3, r3, #3
 80068c4:	4413      	add	r3, r2
 80068c6:	f107 020c 	add.w	r2, r7, #12
 80068ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80068ce:	e883 0003 	stmia.w	r3, {r0, r1}
            index = largest;
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	603b      	str	r3, [r7, #0]
    while (1) {
 80068d6:	e7ac      	b.n	8006832 <heapifyDown+0xa>
        } else {
            break;
 80068d8:	bf00      	nop
        }
    }
}
 80068da:	bf00      	nop
 80068dc:	3724      	adds	r7, #36	; 0x24
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr

080068e6 <enqueue>:
void enqueue(PriorityQueue *q, QueueItem_t item) {
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b084      	sub	sp, #16
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	60f8      	str	r0, [r7, #12]
 80068ee:	1d3b      	adds	r3, r7, #4
 80068f0:	e883 0006 	stmia.w	r3, {r1, r2}
    if (isQueueFull(q)) {
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f7ff ff37 	bl	8006768 <isQueueFull>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d115      	bne.n	800692c <enqueue+0x46>

    	//LOGGER_INFO("queue is full...");
        return;
    }
    // Add the item to the end of the queue and heapify up. Then increment the size.
    q->items[q->size] = item;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	00db      	lsls	r3, r3, #3
 8006908:	4413      	add	r3, r2
 800690a:	1d3a      	adds	r2, r7, #4
 800690c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006910:	e883 0003 	stmia.w	r3, {r0, r1}
    heapifyUp(q, q->size);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006918:	4619      	mov	r1, r3
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f7ff ff41 	bl	80067a2 <heapifyUp>
    q->size++;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006924:	1c5a      	adds	r2, r3, #1
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	651a      	str	r2, [r3, #80]	; 0x50
 800692a:	e000      	b.n	800692e <enqueue+0x48>
        return;
 800692c:	bf00      	nop
}
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <dequeue>:


QueueItem_t dequeue(PriorityQueue *q)
{
 8006934:	b590      	push	{r4, r7, lr}
 8006936:	b087      	sub	sp, #28
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
    if (isQueueEmpty(q))
 800693e:	6838      	ldr	r0, [r7, #0]
 8006940:	f7ff ff01 	bl	8006746 <isQueueEmpty>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00d      	beq.n	8006966 <dequeue+0x32>
    {
        // If the queue is empty, return an empty item

    	QueueItem_t empty = { .priority = LOW, .data = (void*)-1 };
 800694a:	2300      	movs	r3, #0
 800694c:	723b      	strb	r3, [r7, #8]
 800694e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006952:	60fb      	str	r3, [r7, #12]
        return empty;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	461a      	mov	r2, r3
 8006958:	f107 0308 	add.w	r3, r7, #8
 800695c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006960:	e882 0003 	stmia.w	r2, {r0, r1}
    // Replace the last item and decrement the size. Then heapify down.
    q->items[0] = q->items[q->size - 1];
    q->size--;
    heapifyDown(q, 0);
    return root;
}
 8006964:	e023      	b.n	80069ae <dequeue+0x7a>
    QueueItem_t root = q->items[0];
 8006966:	683a      	ldr	r2, [r7, #0]
 8006968:	f107 0310 	add.w	r3, r7, #16
 800696c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006970:	e883 0003 	stmia.w	r3, {r0, r1}
    q->items[0] = q->items[q->size - 1];
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006978:	3b01      	subs	r3, #1
 800697a:	6839      	ldr	r1, [r7, #0]
 800697c:	683a      	ldr	r2, [r7, #0]
 800697e:	460c      	mov	r4, r1
 8006980:	00db      	lsls	r3, r3, #3
 8006982:	4413      	add	r3, r2
 8006984:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006988:	e884 0003 	stmia.w	r4, {r0, r1}
    q->size--;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006990:	1e5a      	subs	r2, r3, #1
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	651a      	str	r2, [r3, #80]	; 0x50
    heapifyDown(q, 0);
 8006996:	2100      	movs	r1, #0
 8006998:	6838      	ldr	r0, [r7, #0]
 800699a:	f7ff ff45 	bl	8006828 <heapifyDown>
    return root;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	461a      	mov	r2, r3
 80069a2:	f107 0310 	add.w	r3, r7, #16
 80069a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80069aa:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	371c      	adds	r7, #28
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd90      	pop	{r4, r7, pc}
	...

080069b8 <button_init_>:
{
	uint32_t counter;
} button;

static void button_init_(void)
{
 80069b8:	b480      	push	{r7}
 80069ba:	af00      	add	r7, sp, #0
	button.counter = 0;
 80069bc:	4b03      	ldr	r3, [pc, #12]	; (80069cc <button_init_+0x14>)
 80069be:	2200      	movs	r2, #0
 80069c0:	601a      	str	r2, [r3, #0]
}
 80069c2:	bf00      	nop
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr
 80069cc:	20004698 	.word	0x20004698

080069d0 <button_process_state_>:

static button_type_t button_process_state_(bool value)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b085      	sub	sp, #20
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	4603      	mov	r3, r0
 80069d8:	71fb      	strb	r3, [r7, #7]
	button_type_t ret = BUTTON_TYPE_NONE;
 80069da:	2300      	movs	r3, #0
 80069dc:	73fb      	strb	r3, [r7, #15]
	if(value)
 80069de:	79fb      	ldrb	r3, [r7, #7]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d005      	beq.n	80069f0 <button_process_state_+0x20>
	{
		button.counter += BUTTON_PERIOD_MS_;
 80069e4:	4b12      	ldr	r3, [pc, #72]	; (8006a30 <button_process_state_+0x60>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	3332      	adds	r3, #50	; 0x32
 80069ea:	4a11      	ldr	r2, [pc, #68]	; (8006a30 <button_process_state_+0x60>)
 80069ec:	6013      	str	r3, [r2, #0]
 80069ee:	e018      	b.n	8006a22 <button_process_state_+0x52>
	}
	else
	{
		if(BUTTON_LONG_TIMEOUT_ <= button.counter)
 80069f0:	4b0f      	ldr	r3, [pc, #60]	; (8006a30 <button_process_state_+0x60>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80069f8:	d302      	bcc.n	8006a00 <button_process_state_+0x30>
		{
			ret = BUTTON_TYPE_LONG;
 80069fa:	2303      	movs	r3, #3
 80069fc:	73fb      	strb	r3, [r7, #15]
 80069fe:	e00d      	b.n	8006a1c <button_process_state_+0x4c>
		}
		else if(BUTTON_SHORT_TIMEOUT_ <= button.counter)
 8006a00:	4b0b      	ldr	r3, [pc, #44]	; (8006a30 <button_process_state_+0x60>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a08:	d302      	bcc.n	8006a10 <button_process_state_+0x40>
		{
			ret = BUTTON_TYPE_SHORT;
 8006a0a:	2302      	movs	r3, #2
 8006a0c:	73fb      	strb	r3, [r7, #15]
 8006a0e:	e005      	b.n	8006a1c <button_process_state_+0x4c>
		}
		else if(BUTTON_PULSE_TIMEOUT_ <= button.counter)
 8006a10:	4b07      	ldr	r3, [pc, #28]	; (8006a30 <button_process_state_+0x60>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2bc7      	cmp	r3, #199	; 0xc7
 8006a16:	d901      	bls.n	8006a1c <button_process_state_+0x4c>
		{
			ret = BUTTON_TYPE_PULSE;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	73fb      	strb	r3, [r7, #15]
		}
		button.counter = 0;
 8006a1c:	4b04      	ldr	r3, [pc, #16]	; (8006a30 <button_process_state_+0x60>)
 8006a1e:	2200      	movs	r2, #0
 8006a20:	601a      	str	r2, [r3, #0]
	}
	return ret;
 8006a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3714      	adds	r7, #20
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr
 8006a30:	20004698 	.word	0x20004698

08006a34 <task_button>:


/********************** external functions definition ************************/

void task_button(void* argument)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b086      	sub	sp, #24
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
	button_init_();
 8006a3c:	f7ff ffbc 	bl	80069b8 <button_init_>

	while(true)
	{
		GPIO_PinState button_state;
		button_state = HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN);
 8006a40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a44:	4893      	ldr	r0, [pc, #588]	; (8006c94 <task_button+0x260>)
 8006a46:	f7fb f8fb 	bl	8001c40 <HAL_GPIO_ReadPin>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	75fb      	strb	r3, [r7, #23]

		button_type_t button_type;
		button_type = button_process_state_(button_state);
 8006a4e:	7dfb      	ldrb	r3, [r7, #23]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	bf14      	ite	ne
 8006a54:	2301      	movne	r3, #1
 8006a56:	2300      	moveq	r3, #0
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7ff ffb8 	bl	80069d0 <button_process_state_>
 8006a60:	4603      	mov	r3, r0
 8006a62:	75bb      	strb	r3, [r7, #22]

		message_t pmsg;
		switch (button_type)
 8006a64:	7dbb      	ldrb	r3, [r7, #22]
 8006a66:	2b03      	cmp	r3, #3
 8006a68:	f200 80d5 	bhi.w	8006c16 <task_button+0x1e2>
 8006a6c:	a201      	add	r2, pc, #4	; (adr r2, 8006a74 <task_button+0x40>)
 8006a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a72:	bf00      	nop
 8006a74:	08006c8b 	.word	0x08006c8b
 8006a78:	08006a85 	.word	0x08006a85
 8006a7c:	08006b0b 	.word	0x08006b0b
 8006a80:	08006b91 	.word	0x08006b91
			case BUTTON_TYPE_NONE:
				break;

		case BUTTON_TYPE_PULSE:

			pmsg.size = sizeof(message_t);
 8006a84:	2308      	movs	r3, #8
 8006a86:	60fb      	str	r3, [r7, #12]
			pmsg.button = button_type;
 8006a88:	7dbb      	ldrb	r3, [r7, #22]
 8006a8a:	743b      	strb	r3, [r7, #16]

			LOGGER_INFO("button pulse");
 8006a8c:	f7fe ff8a 	bl	80059a4 <vPortEnterCritical>
 8006a90:	4b81      	ldr	r3, [pc, #516]	; (8006c98 <task_button+0x264>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a81      	ldr	r2, [pc, #516]	; (8006c9c <task_button+0x268>)
 8006a96:	213f      	movs	r1, #63	; 0x3f
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f000 fd45 	bl	8007528 <sniprintf>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	4a7f      	ldr	r2, [pc, #508]	; (8006ca0 <task_button+0x26c>)
 8006aa2:	6013      	str	r3, [r2, #0]
 8006aa4:	4b7c      	ldr	r3, [pc, #496]	; (8006c98 <task_button+0x264>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7ff fe2b 	bl	8006704 <logger_log_print_>
 8006aae:	f7fe ffa9 	bl	8005a04 <vPortExitCritical>
 8006ab2:	f7fe ff77 	bl	80059a4 <vPortEnterCritical>
 8006ab6:	4b78      	ldr	r3, [pc, #480]	; (8006c98 <task_button+0x264>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a7a      	ldr	r2, [pc, #488]	; (8006ca4 <task_button+0x270>)
 8006abc:	213f      	movs	r1, #63	; 0x3f
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f000 fd32 	bl	8007528 <sniprintf>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	4a76      	ldr	r2, [pc, #472]	; (8006ca0 <task_button+0x26c>)
 8006ac8:	6013      	str	r3, [r2, #0]
 8006aca:	4b73      	ldr	r3, [pc, #460]	; (8006c98 <task_button+0x264>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7ff fe18 	bl	8006704 <logger_log_print_>
 8006ad4:	f7fe ff96 	bl	8005a04 <vPortExitCritical>
 8006ad8:	f7fe ff64 	bl	80059a4 <vPortEnterCritical>
 8006adc:	4b6e      	ldr	r3, [pc, #440]	; (8006c98 <task_button+0x264>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a71      	ldr	r2, [pc, #452]	; (8006ca8 <task_button+0x274>)
 8006ae2:	213f      	movs	r1, #63	; 0x3f
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f000 fd1f 	bl	8007528 <sniprintf>
 8006aea:	4603      	mov	r3, r0
 8006aec:	4a6c      	ldr	r2, [pc, #432]	; (8006ca0 <task_button+0x26c>)
 8006aee:	6013      	str	r3, [r2, #0]
 8006af0:	4b69      	ldr	r3, [pc, #420]	; (8006c98 <task_button+0x264>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4618      	mov	r0, r3
 8006af6:	f7ff fe05 	bl	8006704 <logger_log_print_>
 8006afa:	f7fe ff83 	bl	8005a04 <vPortExitCritical>
			ui_send_message(&pmsg);
 8006afe:	f107 030c 	add.w	r3, r7, #12
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7ff fd16 	bl	8006534 <ui_send_message>

			break;
 8006b08:	e0c0      	b.n	8006c8c <task_button+0x258>

		case BUTTON_TYPE_SHORT:


			pmsg.size = sizeof(message_t);
 8006b0a:	2308      	movs	r3, #8
 8006b0c:	60fb      	str	r3, [r7, #12]
			pmsg.button = button_type;
 8006b0e:	7dbb      	ldrb	r3, [r7, #22]
 8006b10:	743b      	strb	r3, [r7, #16]

			LOGGER_INFO("button short");
 8006b12:	f7fe ff47 	bl	80059a4 <vPortEnterCritical>
 8006b16:	4b60      	ldr	r3, [pc, #384]	; (8006c98 <task_button+0x264>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a60      	ldr	r2, [pc, #384]	; (8006c9c <task_button+0x268>)
 8006b1c:	213f      	movs	r1, #63	; 0x3f
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f000 fd02 	bl	8007528 <sniprintf>
 8006b24:	4603      	mov	r3, r0
 8006b26:	4a5e      	ldr	r2, [pc, #376]	; (8006ca0 <task_button+0x26c>)
 8006b28:	6013      	str	r3, [r2, #0]
 8006b2a:	4b5b      	ldr	r3, [pc, #364]	; (8006c98 <task_button+0x264>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f7ff fde8 	bl	8006704 <logger_log_print_>
 8006b34:	f7fe ff66 	bl	8005a04 <vPortExitCritical>
 8006b38:	f7fe ff34 	bl	80059a4 <vPortEnterCritical>
 8006b3c:	4b56      	ldr	r3, [pc, #344]	; (8006c98 <task_button+0x264>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a5a      	ldr	r2, [pc, #360]	; (8006cac <task_button+0x278>)
 8006b42:	213f      	movs	r1, #63	; 0x3f
 8006b44:	4618      	mov	r0, r3
 8006b46:	f000 fcef 	bl	8007528 <sniprintf>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	4a54      	ldr	r2, [pc, #336]	; (8006ca0 <task_button+0x26c>)
 8006b4e:	6013      	str	r3, [r2, #0]
 8006b50:	4b51      	ldr	r3, [pc, #324]	; (8006c98 <task_button+0x264>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4618      	mov	r0, r3
 8006b56:	f7ff fdd5 	bl	8006704 <logger_log_print_>
 8006b5a:	f7fe ff53 	bl	8005a04 <vPortExitCritical>
 8006b5e:	f7fe ff21 	bl	80059a4 <vPortEnterCritical>
 8006b62:	4b4d      	ldr	r3, [pc, #308]	; (8006c98 <task_button+0x264>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a50      	ldr	r2, [pc, #320]	; (8006ca8 <task_button+0x274>)
 8006b68:	213f      	movs	r1, #63	; 0x3f
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 fcdc 	bl	8007528 <sniprintf>
 8006b70:	4603      	mov	r3, r0
 8006b72:	4a4b      	ldr	r2, [pc, #300]	; (8006ca0 <task_button+0x26c>)
 8006b74:	6013      	str	r3, [r2, #0]
 8006b76:	4b48      	ldr	r3, [pc, #288]	; (8006c98 <task_button+0x264>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7ff fdc2 	bl	8006704 <logger_log_print_>
 8006b80:	f7fe ff40 	bl	8005a04 <vPortExitCritical>
			ui_send_message(&pmsg);
 8006b84:	f107 030c 	add.w	r3, r7, #12
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7ff fcd3 	bl	8006534 <ui_send_message>

			break;
 8006b8e:	e07d      	b.n	8006c8c <task_button+0x258>

			case BUTTON_TYPE_LONG:


			pmsg.size = sizeof(message_t);
 8006b90:	2308      	movs	r3, #8
 8006b92:	60fb      	str	r3, [r7, #12]
			pmsg.button = button_type;
 8006b94:	7dbb      	ldrb	r3, [r7, #22]
 8006b96:	743b      	strb	r3, [r7, #16]
			LOGGER_INFO("button long");
 8006b98:	f7fe ff04 	bl	80059a4 <vPortEnterCritical>
 8006b9c:	4b3e      	ldr	r3, [pc, #248]	; (8006c98 <task_button+0x264>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a3e      	ldr	r2, [pc, #248]	; (8006c9c <task_button+0x268>)
 8006ba2:	213f      	movs	r1, #63	; 0x3f
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f000 fcbf 	bl	8007528 <sniprintf>
 8006baa:	4603      	mov	r3, r0
 8006bac:	4a3c      	ldr	r2, [pc, #240]	; (8006ca0 <task_button+0x26c>)
 8006bae:	6013      	str	r3, [r2, #0]
 8006bb0:	4b39      	ldr	r3, [pc, #228]	; (8006c98 <task_button+0x264>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7ff fda5 	bl	8006704 <logger_log_print_>
 8006bba:	f7fe ff23 	bl	8005a04 <vPortExitCritical>
 8006bbe:	f7fe fef1 	bl	80059a4 <vPortEnterCritical>
 8006bc2:	4b35      	ldr	r3, [pc, #212]	; (8006c98 <task_button+0x264>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a3a      	ldr	r2, [pc, #232]	; (8006cb0 <task_button+0x27c>)
 8006bc8:	213f      	movs	r1, #63	; 0x3f
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f000 fcac 	bl	8007528 <sniprintf>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	4a33      	ldr	r2, [pc, #204]	; (8006ca0 <task_button+0x26c>)
 8006bd4:	6013      	str	r3, [r2, #0]
 8006bd6:	4b30      	ldr	r3, [pc, #192]	; (8006c98 <task_button+0x264>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7ff fd92 	bl	8006704 <logger_log_print_>
 8006be0:	f7fe ff10 	bl	8005a04 <vPortExitCritical>
 8006be4:	f7fe fede 	bl	80059a4 <vPortEnterCritical>
 8006be8:	4b2b      	ldr	r3, [pc, #172]	; (8006c98 <task_button+0x264>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a2e      	ldr	r2, [pc, #184]	; (8006ca8 <task_button+0x274>)
 8006bee:	213f      	movs	r1, #63	; 0x3f
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f000 fc99 	bl	8007528 <sniprintf>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	4a29      	ldr	r2, [pc, #164]	; (8006ca0 <task_button+0x26c>)
 8006bfa:	6013      	str	r3, [r2, #0]
 8006bfc:	4b26      	ldr	r3, [pc, #152]	; (8006c98 <task_button+0x264>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4618      	mov	r0, r3
 8006c02:	f7ff fd7f 	bl	8006704 <logger_log_print_>
 8006c06:	f7fe fefd 	bl	8005a04 <vPortExitCritical>
			ui_send_message(&pmsg);
 8006c0a:	f107 030c 	add.w	r3, r7, #12
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7ff fc90 	bl	8006534 <ui_send_message>

			break;
 8006c14:	e03a      	b.n	8006c8c <task_button+0x258>

			default:
				LOGGER_INFO("button error");
 8006c16:	f7fe fec5 	bl	80059a4 <vPortEnterCritical>
 8006c1a:	4b1f      	ldr	r3, [pc, #124]	; (8006c98 <task_button+0x264>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a1f      	ldr	r2, [pc, #124]	; (8006c9c <task_button+0x268>)
 8006c20:	213f      	movs	r1, #63	; 0x3f
 8006c22:	4618      	mov	r0, r3
 8006c24:	f000 fc80 	bl	8007528 <sniprintf>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	4a1d      	ldr	r2, [pc, #116]	; (8006ca0 <task_button+0x26c>)
 8006c2c:	6013      	str	r3, [r2, #0]
 8006c2e:	4b1a      	ldr	r3, [pc, #104]	; (8006c98 <task_button+0x264>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4618      	mov	r0, r3
 8006c34:	f7ff fd66 	bl	8006704 <logger_log_print_>
 8006c38:	f7fe fee4 	bl	8005a04 <vPortExitCritical>
 8006c3c:	f7fe feb2 	bl	80059a4 <vPortEnterCritical>
 8006c40:	4b15      	ldr	r3, [pc, #84]	; (8006c98 <task_button+0x264>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a1b      	ldr	r2, [pc, #108]	; (8006cb4 <task_button+0x280>)
 8006c46:	213f      	movs	r1, #63	; 0x3f
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f000 fc6d 	bl	8007528 <sniprintf>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	4a13      	ldr	r2, [pc, #76]	; (8006ca0 <task_button+0x26c>)
 8006c52:	6013      	str	r3, [r2, #0]
 8006c54:	4b10      	ldr	r3, [pc, #64]	; (8006c98 <task_button+0x264>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7ff fd53 	bl	8006704 <logger_log_print_>
 8006c5e:	f7fe fed1 	bl	8005a04 <vPortExitCritical>
 8006c62:	f7fe fe9f 	bl	80059a4 <vPortEnterCritical>
 8006c66:	4b0c      	ldr	r3, [pc, #48]	; (8006c98 <task_button+0x264>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a0f      	ldr	r2, [pc, #60]	; (8006ca8 <task_button+0x274>)
 8006c6c:	213f      	movs	r1, #63	; 0x3f
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f000 fc5a 	bl	8007528 <sniprintf>
 8006c74:	4603      	mov	r3, r0
 8006c76:	4a0a      	ldr	r2, [pc, #40]	; (8006ca0 <task_button+0x26c>)
 8006c78:	6013      	str	r3, [r2, #0]
 8006c7a:	4b07      	ldr	r3, [pc, #28]	; (8006c98 <task_button+0x264>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7ff fd40 	bl	8006704 <logger_log_print_>
 8006c84:	f7fe febe 	bl	8005a04 <vPortExitCritical>
				break;
 8006c88:	e000      	b.n	8006c8c <task_button+0x258>
				break;
 8006c8a:	bf00      	nop
		}

		vTaskDelay((TickType_t)(TASK_PERIOD_MS_ / portTICK_PERIOD_MS));
 8006c8c:	2032      	movs	r0, #50	; 0x32
 8006c8e:	f7fd ff1f 	bl	8004ad0 <vTaskDelay>
	{
 8006c92:	e6d5      	b.n	8006a40 <task_button+0xc>
 8006c94:	40020800 	.word	0x40020800
 8006c98:	08008648 	.word	0x08008648
 8006c9c:	080085e8 	.word	0x080085e8
 8006ca0:	20004694 	.word	0x20004694
 8006ca4:	080085f0 	.word	0x080085f0
 8006ca8:	08008600 	.word	0x08008600
 8006cac:	08008604 	.word	0x08008604
 8006cb0:	08008614 	.word	0x08008614
 8006cb4:	08008620 	.word	0x08008620

08006cb8 <findslot>:
 8006cb8:	4b0a      	ldr	r3, [pc, #40]	; (8006ce4 <findslot+0x2c>)
 8006cba:	b510      	push	{r4, lr}
 8006cbc:	4604      	mov	r4, r0
 8006cbe:	6818      	ldr	r0, [r3, #0]
 8006cc0:	b118      	cbz	r0, 8006cca <findslot+0x12>
 8006cc2:	6a03      	ldr	r3, [r0, #32]
 8006cc4:	b90b      	cbnz	r3, 8006cca <findslot+0x12>
 8006cc6:	f000 fbe7 	bl	8007498 <__sinit>
 8006cca:	2c13      	cmp	r4, #19
 8006ccc:	d807      	bhi.n	8006cde <findslot+0x26>
 8006cce:	4806      	ldr	r0, [pc, #24]	; (8006ce8 <findslot+0x30>)
 8006cd0:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8006cd4:	3201      	adds	r2, #1
 8006cd6:	d002      	beq.n	8006cde <findslot+0x26>
 8006cd8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8006cdc:	bd10      	pop	{r4, pc}
 8006cde:	2000      	movs	r0, #0
 8006ce0:	e7fc      	b.n	8006cdc <findslot+0x24>
 8006ce2:	bf00      	nop
 8006ce4:	20000070 	.word	0x20000070
 8006ce8:	200046a8 	.word	0x200046a8

08006cec <error>:
 8006cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cee:	4604      	mov	r4, r0
 8006cf0:	f000 fce0 	bl	80076b4 <__errno>
 8006cf4:	2613      	movs	r6, #19
 8006cf6:	4605      	mov	r5, r0
 8006cf8:	2700      	movs	r7, #0
 8006cfa:	4630      	mov	r0, r6
 8006cfc:	4639      	mov	r1, r7
 8006cfe:	beab      	bkpt	0x00ab
 8006d00:	4606      	mov	r6, r0
 8006d02:	602e      	str	r6, [r5, #0]
 8006d04:	4620      	mov	r0, r4
 8006d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006d08 <checkerror>:
 8006d08:	1c43      	adds	r3, r0, #1
 8006d0a:	d101      	bne.n	8006d10 <checkerror+0x8>
 8006d0c:	f7ff bfee 	b.w	8006cec <error>
 8006d10:	4770      	bx	lr

08006d12 <_swiread>:
 8006d12:	b530      	push	{r4, r5, lr}
 8006d14:	b085      	sub	sp, #20
 8006d16:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8006d1a:	9203      	str	r2, [sp, #12]
 8006d1c:	2406      	movs	r4, #6
 8006d1e:	ad01      	add	r5, sp, #4
 8006d20:	4620      	mov	r0, r4
 8006d22:	4629      	mov	r1, r5
 8006d24:	beab      	bkpt	0x00ab
 8006d26:	4604      	mov	r4, r0
 8006d28:	4620      	mov	r0, r4
 8006d2a:	f7ff ffed 	bl	8006d08 <checkerror>
 8006d2e:	b005      	add	sp, #20
 8006d30:	bd30      	pop	{r4, r5, pc}

08006d32 <_read>:
 8006d32:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d34:	4615      	mov	r5, r2
 8006d36:	9101      	str	r1, [sp, #4]
 8006d38:	f7ff ffbe 	bl	8006cb8 <findslot>
 8006d3c:	9901      	ldr	r1, [sp, #4]
 8006d3e:	4604      	mov	r4, r0
 8006d40:	b938      	cbnz	r0, 8006d52 <_read+0x20>
 8006d42:	f000 fcb7 	bl	80076b4 <__errno>
 8006d46:	2309      	movs	r3, #9
 8006d48:	6003      	str	r3, [r0, #0]
 8006d4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d4e:	b003      	add	sp, #12
 8006d50:	bd30      	pop	{r4, r5, pc}
 8006d52:	6800      	ldr	r0, [r0, #0]
 8006d54:	462a      	mov	r2, r5
 8006d56:	f7ff ffdc 	bl	8006d12 <_swiread>
 8006d5a:	1c43      	adds	r3, r0, #1
 8006d5c:	d0f7      	beq.n	8006d4e <_read+0x1c>
 8006d5e:	6863      	ldr	r3, [r4, #4]
 8006d60:	1a2a      	subs	r2, r5, r0
 8006d62:	4413      	add	r3, r2
 8006d64:	6063      	str	r3, [r4, #4]
 8006d66:	4610      	mov	r0, r2
 8006d68:	e7f1      	b.n	8006d4e <_read+0x1c>

08006d6a <_swilseek>:
 8006d6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d6c:	460c      	mov	r4, r1
 8006d6e:	4616      	mov	r6, r2
 8006d70:	f7ff ffa2 	bl	8006cb8 <findslot>
 8006d74:	4605      	mov	r5, r0
 8006d76:	b940      	cbnz	r0, 8006d8a <_swilseek+0x20>
 8006d78:	f000 fc9c 	bl	80076b4 <__errno>
 8006d7c:	2309      	movs	r3, #9
 8006d7e:	6003      	str	r3, [r0, #0]
 8006d80:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006d84:	4620      	mov	r0, r4
 8006d86:	b003      	add	sp, #12
 8006d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d8a:	2e02      	cmp	r6, #2
 8006d8c:	d903      	bls.n	8006d96 <_swilseek+0x2c>
 8006d8e:	f000 fc91 	bl	80076b4 <__errno>
 8006d92:	2316      	movs	r3, #22
 8006d94:	e7f3      	b.n	8006d7e <_swilseek+0x14>
 8006d96:	2e01      	cmp	r6, #1
 8006d98:	d112      	bne.n	8006dc0 <_swilseek+0x56>
 8006d9a:	6843      	ldr	r3, [r0, #4]
 8006d9c:	18e4      	adds	r4, r4, r3
 8006d9e:	d4f6      	bmi.n	8006d8e <_swilseek+0x24>
 8006da0:	682b      	ldr	r3, [r5, #0]
 8006da2:	260a      	movs	r6, #10
 8006da4:	e9cd 3400 	strd	r3, r4, [sp]
 8006da8:	466f      	mov	r7, sp
 8006daa:	4630      	mov	r0, r6
 8006dac:	4639      	mov	r1, r7
 8006dae:	beab      	bkpt	0x00ab
 8006db0:	4606      	mov	r6, r0
 8006db2:	4630      	mov	r0, r6
 8006db4:	f7ff ffa8 	bl	8006d08 <checkerror>
 8006db8:	2800      	cmp	r0, #0
 8006dba:	dbe1      	blt.n	8006d80 <_swilseek+0x16>
 8006dbc:	606c      	str	r4, [r5, #4]
 8006dbe:	e7e1      	b.n	8006d84 <_swilseek+0x1a>
 8006dc0:	2e02      	cmp	r6, #2
 8006dc2:	6803      	ldr	r3, [r0, #0]
 8006dc4:	d1ec      	bne.n	8006da0 <_swilseek+0x36>
 8006dc6:	9300      	str	r3, [sp, #0]
 8006dc8:	260c      	movs	r6, #12
 8006dca:	466f      	mov	r7, sp
 8006dcc:	4630      	mov	r0, r6
 8006dce:	4639      	mov	r1, r7
 8006dd0:	beab      	bkpt	0x00ab
 8006dd2:	4606      	mov	r6, r0
 8006dd4:	4630      	mov	r0, r6
 8006dd6:	f7ff ff97 	bl	8006d08 <checkerror>
 8006dda:	1c43      	adds	r3, r0, #1
 8006ddc:	d0d0      	beq.n	8006d80 <_swilseek+0x16>
 8006dde:	4404      	add	r4, r0
 8006de0:	e7de      	b.n	8006da0 <_swilseek+0x36>

08006de2 <_lseek>:
 8006de2:	f7ff bfc2 	b.w	8006d6a <_swilseek>

08006de6 <_swiwrite>:
 8006de6:	b530      	push	{r4, r5, lr}
 8006de8:	b085      	sub	sp, #20
 8006dea:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8006dee:	9203      	str	r2, [sp, #12]
 8006df0:	2405      	movs	r4, #5
 8006df2:	ad01      	add	r5, sp, #4
 8006df4:	4620      	mov	r0, r4
 8006df6:	4629      	mov	r1, r5
 8006df8:	beab      	bkpt	0x00ab
 8006dfa:	4604      	mov	r4, r0
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	f7ff ff83 	bl	8006d08 <checkerror>
 8006e02:	b005      	add	sp, #20
 8006e04:	bd30      	pop	{r4, r5, pc}

08006e06 <_write>:
 8006e06:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e08:	4615      	mov	r5, r2
 8006e0a:	9101      	str	r1, [sp, #4]
 8006e0c:	f7ff ff54 	bl	8006cb8 <findslot>
 8006e10:	9901      	ldr	r1, [sp, #4]
 8006e12:	4604      	mov	r4, r0
 8006e14:	b930      	cbnz	r0, 8006e24 <_write+0x1e>
 8006e16:	f000 fc4d 	bl	80076b4 <__errno>
 8006e1a:	2309      	movs	r3, #9
 8006e1c:	6003      	str	r3, [r0, #0]
 8006e1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e22:	e012      	b.n	8006e4a <_write+0x44>
 8006e24:	6800      	ldr	r0, [r0, #0]
 8006e26:	462a      	mov	r2, r5
 8006e28:	f7ff ffdd 	bl	8006de6 <_swiwrite>
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	dbf6      	blt.n	8006e1e <_write+0x18>
 8006e30:	6862      	ldr	r2, [r4, #4]
 8006e32:	1a2b      	subs	r3, r5, r0
 8006e34:	441a      	add	r2, r3
 8006e36:	42a8      	cmp	r0, r5
 8006e38:	6062      	str	r2, [r4, #4]
 8006e3a:	d105      	bne.n	8006e48 <_write+0x42>
 8006e3c:	2000      	movs	r0, #0
 8006e3e:	b003      	add	sp, #12
 8006e40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e44:	f7ff bf52 	b.w	8006cec <error>
 8006e48:	4618      	mov	r0, r3
 8006e4a:	b003      	add	sp, #12
 8006e4c:	bd30      	pop	{r4, r5, pc}

08006e4e <_swiclose>:
 8006e4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e50:	2402      	movs	r4, #2
 8006e52:	9001      	str	r0, [sp, #4]
 8006e54:	ad01      	add	r5, sp, #4
 8006e56:	4620      	mov	r0, r4
 8006e58:	4629      	mov	r1, r5
 8006e5a:	beab      	bkpt	0x00ab
 8006e5c:	4604      	mov	r4, r0
 8006e5e:	4620      	mov	r0, r4
 8006e60:	f7ff ff52 	bl	8006d08 <checkerror>
 8006e64:	b003      	add	sp, #12
 8006e66:	bd30      	pop	{r4, r5, pc}

08006e68 <_close>:
 8006e68:	b538      	push	{r3, r4, r5, lr}
 8006e6a:	4605      	mov	r5, r0
 8006e6c:	f7ff ff24 	bl	8006cb8 <findslot>
 8006e70:	4604      	mov	r4, r0
 8006e72:	b930      	cbnz	r0, 8006e82 <_close+0x1a>
 8006e74:	f000 fc1e 	bl	80076b4 <__errno>
 8006e78:	2309      	movs	r3, #9
 8006e7a:	6003      	str	r3, [r0, #0]
 8006e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e80:	bd38      	pop	{r3, r4, r5, pc}
 8006e82:	3d01      	subs	r5, #1
 8006e84:	2d01      	cmp	r5, #1
 8006e86:	d809      	bhi.n	8006e9c <_close+0x34>
 8006e88:	4b09      	ldr	r3, [pc, #36]	; (8006eb0 <_close+0x48>)
 8006e8a:	689a      	ldr	r2, [r3, #8]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d104      	bne.n	8006e9c <_close+0x34>
 8006e92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e96:	6003      	str	r3, [r0, #0]
 8006e98:	2000      	movs	r0, #0
 8006e9a:	e7f1      	b.n	8006e80 <_close+0x18>
 8006e9c:	6820      	ldr	r0, [r4, #0]
 8006e9e:	f7ff ffd6 	bl	8006e4e <_swiclose>
 8006ea2:	2800      	cmp	r0, #0
 8006ea4:	d1ec      	bne.n	8006e80 <_close+0x18>
 8006ea6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006eaa:	6023      	str	r3, [r4, #0]
 8006eac:	e7e8      	b.n	8006e80 <_close+0x18>
 8006eae:	bf00      	nop
 8006eb0:	200046a8 	.word	0x200046a8

08006eb4 <_swistat>:
 8006eb4:	b570      	push	{r4, r5, r6, lr}
 8006eb6:	460c      	mov	r4, r1
 8006eb8:	f7ff fefe 	bl	8006cb8 <findslot>
 8006ebc:	4605      	mov	r5, r0
 8006ebe:	b930      	cbnz	r0, 8006ece <_swistat+0x1a>
 8006ec0:	f000 fbf8 	bl	80076b4 <__errno>
 8006ec4:	2309      	movs	r3, #9
 8006ec6:	6003      	str	r3, [r0, #0]
 8006ec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ecc:	bd70      	pop	{r4, r5, r6, pc}
 8006ece:	6863      	ldr	r3, [r4, #4]
 8006ed0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006ed4:	6063      	str	r3, [r4, #4]
 8006ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006eda:	64a3      	str	r3, [r4, #72]	; 0x48
 8006edc:	260c      	movs	r6, #12
 8006ede:	4630      	mov	r0, r6
 8006ee0:	4629      	mov	r1, r5
 8006ee2:	beab      	bkpt	0x00ab
 8006ee4:	4605      	mov	r5, r0
 8006ee6:	4628      	mov	r0, r5
 8006ee8:	f7ff ff0e 	bl	8006d08 <checkerror>
 8006eec:	1c43      	adds	r3, r0, #1
 8006eee:	bf1c      	itt	ne
 8006ef0:	6120      	strne	r0, [r4, #16]
 8006ef2:	2000      	movne	r0, #0
 8006ef4:	e7ea      	b.n	8006ecc <_swistat+0x18>

08006ef6 <_fstat>:
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	b510      	push	{r4, lr}
 8006efa:	2100      	movs	r1, #0
 8006efc:	4604      	mov	r4, r0
 8006efe:	2258      	movs	r2, #88	; 0x58
 8006f00:	4618      	mov	r0, r3
 8006f02:	f000 fb88 	bl	8007616 <memset>
 8006f06:	4601      	mov	r1, r0
 8006f08:	4620      	mov	r0, r4
 8006f0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f0e:	f7ff bfd1 	b.w	8006eb4 <_swistat>

08006f12 <_stat>:
 8006f12:	b538      	push	{r3, r4, r5, lr}
 8006f14:	460d      	mov	r5, r1
 8006f16:	4604      	mov	r4, r0
 8006f18:	2258      	movs	r2, #88	; 0x58
 8006f1a:	2100      	movs	r1, #0
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	f000 fb7a 	bl	8007616 <memset>
 8006f22:	4620      	mov	r0, r4
 8006f24:	2100      	movs	r1, #0
 8006f26:	f000 f811 	bl	8006f4c <_swiopen>
 8006f2a:	1c43      	adds	r3, r0, #1
 8006f2c:	4604      	mov	r4, r0
 8006f2e:	d00b      	beq.n	8006f48 <_stat+0x36>
 8006f30:	686b      	ldr	r3, [r5, #4]
 8006f32:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006f36:	606b      	str	r3, [r5, #4]
 8006f38:	4629      	mov	r1, r5
 8006f3a:	f7ff ffbb 	bl	8006eb4 <_swistat>
 8006f3e:	4605      	mov	r5, r0
 8006f40:	4620      	mov	r0, r4
 8006f42:	f7ff ff91 	bl	8006e68 <_close>
 8006f46:	462c      	mov	r4, r5
 8006f48:	4620      	mov	r0, r4
 8006f4a:	bd38      	pop	{r3, r4, r5, pc}

08006f4c <_swiopen>:
 8006f4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f50:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8006ffc <_swiopen+0xb0>
 8006f54:	b097      	sub	sp, #92	; 0x5c
 8006f56:	4607      	mov	r7, r0
 8006f58:	460e      	mov	r6, r1
 8006f5a:	2500      	movs	r5, #0
 8006f5c:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8006f60:	1c61      	adds	r1, r4, #1
 8006f62:	d037      	beq.n	8006fd4 <_swiopen+0x88>
 8006f64:	3501      	adds	r5, #1
 8006f66:	2d14      	cmp	r5, #20
 8006f68:	d1f8      	bne.n	8006f5c <_swiopen+0x10>
 8006f6a:	f000 fba3 	bl	80076b4 <__errno>
 8006f6e:	2318      	movs	r3, #24
 8006f70:	6003      	str	r3, [r0, #0]
 8006f72:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006f76:	e03d      	b.n	8006ff4 <_swiopen+0xa8>
 8006f78:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8006f7c:	f240 6301 	movw	r3, #1537	; 0x601
 8006f80:	07b2      	lsls	r2, r6, #30
 8006f82:	bf48      	it	mi
 8006f84:	f044 0402 	orrmi.w	r4, r4, #2
 8006f88:	421e      	tst	r6, r3
 8006f8a:	bf18      	it	ne
 8006f8c:	f044 0404 	orrne.w	r4, r4, #4
 8006f90:	0733      	lsls	r3, r6, #28
 8006f92:	bf48      	it	mi
 8006f94:	f024 0404 	bicmi.w	r4, r4, #4
 8006f98:	4638      	mov	r0, r7
 8006f9a:	bf48      	it	mi
 8006f9c:	f044 0408 	orrmi.w	r4, r4, #8
 8006fa0:	9700      	str	r7, [sp, #0]
 8006fa2:	f7f9 f925 	bl	80001f0 <strlen>
 8006fa6:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8006faa:	2401      	movs	r4, #1
 8006fac:	4620      	mov	r0, r4
 8006fae:	4649      	mov	r1, r9
 8006fb0:	beab      	bkpt	0x00ab
 8006fb2:	4604      	mov	r4, r0
 8006fb4:	2c00      	cmp	r4, #0
 8006fb6:	db08      	blt.n	8006fca <_swiopen+0x7e>
 8006fb8:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8006fbc:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	f8c8 3004 	str.w	r3, [r8, #4]
 8006fc6:	462c      	mov	r4, r5
 8006fc8:	e014      	b.n	8006ff4 <_swiopen+0xa8>
 8006fca:	4620      	mov	r0, r4
 8006fcc:	f7ff fe8e 	bl	8006cec <error>
 8006fd0:	4604      	mov	r4, r0
 8006fd2:	e00f      	b.n	8006ff4 <_swiopen+0xa8>
 8006fd4:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8006fd8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006fdc:	46e9      	mov	r9, sp
 8006fde:	d1cb      	bne.n	8006f78 <_swiopen+0x2c>
 8006fe0:	4649      	mov	r1, r9
 8006fe2:	4638      	mov	r0, r7
 8006fe4:	f7ff ff95 	bl	8006f12 <_stat>
 8006fe8:	3001      	adds	r0, #1
 8006fea:	d0c5      	beq.n	8006f78 <_swiopen+0x2c>
 8006fec:	f000 fb62 	bl	80076b4 <__errno>
 8006ff0:	2311      	movs	r3, #17
 8006ff2:	6003      	str	r3, [r0, #0]
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	b017      	add	sp, #92	; 0x5c
 8006ff8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ffc:	200046a8 	.word	0x200046a8

08007000 <_get_semihosting_exts>:
 8007000:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007004:	4606      	mov	r6, r0
 8007006:	460f      	mov	r7, r1
 8007008:	482a      	ldr	r0, [pc, #168]	; (80070b4 <_get_semihosting_exts+0xb4>)
 800700a:	2100      	movs	r1, #0
 800700c:	4615      	mov	r5, r2
 800700e:	f7ff ff9d 	bl	8006f4c <_swiopen>
 8007012:	462a      	mov	r2, r5
 8007014:	4604      	mov	r4, r0
 8007016:	2100      	movs	r1, #0
 8007018:	4630      	mov	r0, r6
 800701a:	f000 fafc 	bl	8007616 <memset>
 800701e:	1c63      	adds	r3, r4, #1
 8007020:	d016      	beq.n	8007050 <_get_semihosting_exts+0x50>
 8007022:	4620      	mov	r0, r4
 8007024:	f7ff fe48 	bl	8006cb8 <findslot>
 8007028:	f04f 080c 	mov.w	r8, #12
 800702c:	4681      	mov	r9, r0
 800702e:	4640      	mov	r0, r8
 8007030:	4649      	mov	r1, r9
 8007032:	beab      	bkpt	0x00ab
 8007034:	4680      	mov	r8, r0
 8007036:	4640      	mov	r0, r8
 8007038:	f7ff fe66 	bl	8006d08 <checkerror>
 800703c:	2803      	cmp	r0, #3
 800703e:	dd02      	ble.n	8007046 <_get_semihosting_exts+0x46>
 8007040:	1ec3      	subs	r3, r0, #3
 8007042:	42ab      	cmp	r3, r5
 8007044:	dc08      	bgt.n	8007058 <_get_semihosting_exts+0x58>
 8007046:	4620      	mov	r0, r4
 8007048:	f7ff ff0e 	bl	8006e68 <_close>
 800704c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007050:	4620      	mov	r0, r4
 8007052:	b003      	add	sp, #12
 8007054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007058:	2204      	movs	r2, #4
 800705a:	eb0d 0102 	add.w	r1, sp, r2
 800705e:	4620      	mov	r0, r4
 8007060:	f7ff fe67 	bl	8006d32 <_read>
 8007064:	2803      	cmp	r0, #3
 8007066:	ddee      	ble.n	8007046 <_get_semihosting_exts+0x46>
 8007068:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800706c:	2b53      	cmp	r3, #83	; 0x53
 800706e:	d1ea      	bne.n	8007046 <_get_semihosting_exts+0x46>
 8007070:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007074:	2b48      	cmp	r3, #72	; 0x48
 8007076:	d1e6      	bne.n	8007046 <_get_semihosting_exts+0x46>
 8007078:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800707c:	2b46      	cmp	r3, #70	; 0x46
 800707e:	d1e2      	bne.n	8007046 <_get_semihosting_exts+0x46>
 8007080:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007084:	2b42      	cmp	r3, #66	; 0x42
 8007086:	d1de      	bne.n	8007046 <_get_semihosting_exts+0x46>
 8007088:	2201      	movs	r2, #1
 800708a:	4639      	mov	r1, r7
 800708c:	4620      	mov	r0, r4
 800708e:	f7ff fe6c 	bl	8006d6a <_swilseek>
 8007092:	2800      	cmp	r0, #0
 8007094:	dbd7      	blt.n	8007046 <_get_semihosting_exts+0x46>
 8007096:	462a      	mov	r2, r5
 8007098:	4631      	mov	r1, r6
 800709a:	4620      	mov	r0, r4
 800709c:	f7ff fe49 	bl	8006d32 <_read>
 80070a0:	4605      	mov	r5, r0
 80070a2:	4620      	mov	r0, r4
 80070a4:	f7ff fee0 	bl	8006e68 <_close>
 80070a8:	4628      	mov	r0, r5
 80070aa:	f7ff fe2d 	bl	8006d08 <checkerror>
 80070ae:	4604      	mov	r4, r0
 80070b0:	e7ce      	b.n	8007050 <_get_semihosting_exts+0x50>
 80070b2:	bf00      	nop
 80070b4:	0800864c 	.word	0x0800864c

080070b8 <initialise_semihosting_exts>:
 80070b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070ba:	4d0a      	ldr	r5, [pc, #40]	; (80070e4 <initialise_semihosting_exts+0x2c>)
 80070bc:	4c0a      	ldr	r4, [pc, #40]	; (80070e8 <initialise_semihosting_exts+0x30>)
 80070be:	2100      	movs	r1, #0
 80070c0:	2201      	movs	r2, #1
 80070c2:	a801      	add	r0, sp, #4
 80070c4:	6029      	str	r1, [r5, #0]
 80070c6:	6022      	str	r2, [r4, #0]
 80070c8:	f7ff ff9a 	bl	8007000 <_get_semihosting_exts>
 80070cc:	2800      	cmp	r0, #0
 80070ce:	dd07      	ble.n	80070e0 <initialise_semihosting_exts+0x28>
 80070d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80070d4:	f003 0201 	and.w	r2, r3, #1
 80070d8:	f003 0302 	and.w	r3, r3, #2
 80070dc:	602a      	str	r2, [r5, #0]
 80070de:	6023      	str	r3, [r4, #0]
 80070e0:	b003      	add	sp, #12
 80070e2:	bd30      	pop	{r4, r5, pc}
 80070e4:	20000010 	.word	0x20000010
 80070e8:	20000014 	.word	0x20000014

080070ec <_has_ext_stdout_stderr>:
 80070ec:	b510      	push	{r4, lr}
 80070ee:	4c04      	ldr	r4, [pc, #16]	; (8007100 <_has_ext_stdout_stderr+0x14>)
 80070f0:	6823      	ldr	r3, [r4, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	da01      	bge.n	80070fa <_has_ext_stdout_stderr+0xe>
 80070f6:	f7ff ffdf 	bl	80070b8 <initialise_semihosting_exts>
 80070fa:	6820      	ldr	r0, [r4, #0]
 80070fc:	bd10      	pop	{r4, pc}
 80070fe:	bf00      	nop
 8007100:	20000014 	.word	0x20000014

08007104 <initialise_monitor_handles>:
 8007104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007108:	b085      	sub	sp, #20
 800710a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80071bc <initialise_monitor_handles+0xb8>
 800710e:	f8cd 9004 	str.w	r9, [sp, #4]
 8007112:	2303      	movs	r3, #3
 8007114:	2400      	movs	r4, #0
 8007116:	9303      	str	r3, [sp, #12]
 8007118:	af01      	add	r7, sp, #4
 800711a:	9402      	str	r4, [sp, #8]
 800711c:	2501      	movs	r5, #1
 800711e:	4628      	mov	r0, r5
 8007120:	4639      	mov	r1, r7
 8007122:	beab      	bkpt	0x00ab
 8007124:	4605      	mov	r5, r0
 8007126:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80071c0 <initialise_monitor_handles+0xbc>
 800712a:	4623      	mov	r3, r4
 800712c:	4c20      	ldr	r4, [pc, #128]	; (80071b0 <initialise_monitor_handles+0xac>)
 800712e:	f8c8 5000 	str.w	r5, [r8]
 8007132:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007136:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800713a:	3301      	adds	r3, #1
 800713c:	2b14      	cmp	r3, #20
 800713e:	d1fa      	bne.n	8007136 <initialise_monitor_handles+0x32>
 8007140:	f7ff ffd4 	bl	80070ec <_has_ext_stdout_stderr>
 8007144:	4d1b      	ldr	r5, [pc, #108]	; (80071b4 <initialise_monitor_handles+0xb0>)
 8007146:	b1d0      	cbz	r0, 800717e <initialise_monitor_handles+0x7a>
 8007148:	f04f 0a03 	mov.w	sl, #3
 800714c:	2304      	movs	r3, #4
 800714e:	f8cd 9004 	str.w	r9, [sp, #4]
 8007152:	2601      	movs	r6, #1
 8007154:	f8cd a00c 	str.w	sl, [sp, #12]
 8007158:	9302      	str	r3, [sp, #8]
 800715a:	4630      	mov	r0, r6
 800715c:	4639      	mov	r1, r7
 800715e:	beab      	bkpt	0x00ab
 8007160:	4683      	mov	fp, r0
 8007162:	4b15      	ldr	r3, [pc, #84]	; (80071b8 <initialise_monitor_handles+0xb4>)
 8007164:	f8cd 9004 	str.w	r9, [sp, #4]
 8007168:	f8c3 b000 	str.w	fp, [r3]
 800716c:	2308      	movs	r3, #8
 800716e:	f8cd a00c 	str.w	sl, [sp, #12]
 8007172:	9302      	str	r3, [sp, #8]
 8007174:	4630      	mov	r0, r6
 8007176:	4639      	mov	r1, r7
 8007178:	beab      	bkpt	0x00ab
 800717a:	4606      	mov	r6, r0
 800717c:	602e      	str	r6, [r5, #0]
 800717e:	682b      	ldr	r3, [r5, #0]
 8007180:	3301      	adds	r3, #1
 8007182:	bf02      	ittt	eq
 8007184:	4b0c      	ldreq	r3, [pc, #48]	; (80071b8 <initialise_monitor_handles+0xb4>)
 8007186:	681b      	ldreq	r3, [r3, #0]
 8007188:	602b      	streq	r3, [r5, #0]
 800718a:	2600      	movs	r6, #0
 800718c:	f8d8 3000 	ldr.w	r3, [r8]
 8007190:	6023      	str	r3, [r4, #0]
 8007192:	6066      	str	r6, [r4, #4]
 8007194:	f7ff ffaa 	bl	80070ec <_has_ext_stdout_stderr>
 8007198:	b130      	cbz	r0, 80071a8 <initialise_monitor_handles+0xa4>
 800719a:	4b07      	ldr	r3, [pc, #28]	; (80071b8 <initialise_monitor_handles+0xb4>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80071a2:	682b      	ldr	r3, [r5, #0]
 80071a4:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80071a8:	b005      	add	sp, #20
 80071aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ae:	bf00      	nop
 80071b0:	200046a8 	.word	0x200046a8
 80071b4:	2000469c 	.word	0x2000469c
 80071b8:	200046a4 	.word	0x200046a4
 80071bc:	08008662 	.word	0x08008662
 80071c0:	200046a0 	.word	0x200046a0

080071c4 <_isatty>:
 80071c4:	b570      	push	{r4, r5, r6, lr}
 80071c6:	f7ff fd77 	bl	8006cb8 <findslot>
 80071ca:	2509      	movs	r5, #9
 80071cc:	4604      	mov	r4, r0
 80071ce:	b920      	cbnz	r0, 80071da <_isatty+0x16>
 80071d0:	f000 fa70 	bl	80076b4 <__errno>
 80071d4:	6005      	str	r5, [r0, #0]
 80071d6:	4620      	mov	r0, r4
 80071d8:	bd70      	pop	{r4, r5, r6, pc}
 80071da:	4628      	mov	r0, r5
 80071dc:	4621      	mov	r1, r4
 80071de:	beab      	bkpt	0x00ab
 80071e0:	4604      	mov	r4, r0
 80071e2:	2c01      	cmp	r4, #1
 80071e4:	d0f7      	beq.n	80071d6 <_isatty+0x12>
 80071e6:	f000 fa65 	bl	80076b4 <__errno>
 80071ea:	2400      	movs	r4, #0
 80071ec:	4605      	mov	r5, r0
 80071ee:	2613      	movs	r6, #19
 80071f0:	4630      	mov	r0, r6
 80071f2:	4621      	mov	r1, r4
 80071f4:	beab      	bkpt	0x00ab
 80071f6:	4606      	mov	r6, r0
 80071f8:	602e      	str	r6, [r5, #0]
 80071fa:	e7ec      	b.n	80071d6 <_isatty+0x12>

080071fc <__sflush_r>:
 80071fc:	898a      	ldrh	r2, [r1, #12]
 80071fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007202:	4605      	mov	r5, r0
 8007204:	0710      	lsls	r0, r2, #28
 8007206:	460c      	mov	r4, r1
 8007208:	d458      	bmi.n	80072bc <__sflush_r+0xc0>
 800720a:	684b      	ldr	r3, [r1, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	dc05      	bgt.n	800721c <__sflush_r+0x20>
 8007210:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007212:	2b00      	cmp	r3, #0
 8007214:	dc02      	bgt.n	800721c <__sflush_r+0x20>
 8007216:	2000      	movs	r0, #0
 8007218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800721c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800721e:	2e00      	cmp	r6, #0
 8007220:	d0f9      	beq.n	8007216 <__sflush_r+0x1a>
 8007222:	2300      	movs	r3, #0
 8007224:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007228:	682f      	ldr	r7, [r5, #0]
 800722a:	6a21      	ldr	r1, [r4, #32]
 800722c:	602b      	str	r3, [r5, #0]
 800722e:	d032      	beq.n	8007296 <__sflush_r+0x9a>
 8007230:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007232:	89a3      	ldrh	r3, [r4, #12]
 8007234:	075a      	lsls	r2, r3, #29
 8007236:	d505      	bpl.n	8007244 <__sflush_r+0x48>
 8007238:	6863      	ldr	r3, [r4, #4]
 800723a:	1ac0      	subs	r0, r0, r3
 800723c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800723e:	b10b      	cbz	r3, 8007244 <__sflush_r+0x48>
 8007240:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007242:	1ac0      	subs	r0, r0, r3
 8007244:	2300      	movs	r3, #0
 8007246:	4602      	mov	r2, r0
 8007248:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800724a:	6a21      	ldr	r1, [r4, #32]
 800724c:	4628      	mov	r0, r5
 800724e:	47b0      	blx	r6
 8007250:	1c43      	adds	r3, r0, #1
 8007252:	89a3      	ldrh	r3, [r4, #12]
 8007254:	d106      	bne.n	8007264 <__sflush_r+0x68>
 8007256:	6829      	ldr	r1, [r5, #0]
 8007258:	291d      	cmp	r1, #29
 800725a:	d82b      	bhi.n	80072b4 <__sflush_r+0xb8>
 800725c:	4a29      	ldr	r2, [pc, #164]	; (8007304 <__sflush_r+0x108>)
 800725e:	410a      	asrs	r2, r1
 8007260:	07d6      	lsls	r6, r2, #31
 8007262:	d427      	bmi.n	80072b4 <__sflush_r+0xb8>
 8007264:	2200      	movs	r2, #0
 8007266:	6062      	str	r2, [r4, #4]
 8007268:	04d9      	lsls	r1, r3, #19
 800726a:	6922      	ldr	r2, [r4, #16]
 800726c:	6022      	str	r2, [r4, #0]
 800726e:	d504      	bpl.n	800727a <__sflush_r+0x7e>
 8007270:	1c42      	adds	r2, r0, #1
 8007272:	d101      	bne.n	8007278 <__sflush_r+0x7c>
 8007274:	682b      	ldr	r3, [r5, #0]
 8007276:	b903      	cbnz	r3, 800727a <__sflush_r+0x7e>
 8007278:	6560      	str	r0, [r4, #84]	; 0x54
 800727a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800727c:	602f      	str	r7, [r5, #0]
 800727e:	2900      	cmp	r1, #0
 8007280:	d0c9      	beq.n	8007216 <__sflush_r+0x1a>
 8007282:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007286:	4299      	cmp	r1, r3
 8007288:	d002      	beq.n	8007290 <__sflush_r+0x94>
 800728a:	4628      	mov	r0, r5
 800728c:	f000 fa4e 	bl	800772c <_free_r>
 8007290:	2000      	movs	r0, #0
 8007292:	6360      	str	r0, [r4, #52]	; 0x34
 8007294:	e7c0      	b.n	8007218 <__sflush_r+0x1c>
 8007296:	2301      	movs	r3, #1
 8007298:	4628      	mov	r0, r5
 800729a:	47b0      	blx	r6
 800729c:	1c41      	adds	r1, r0, #1
 800729e:	d1c8      	bne.n	8007232 <__sflush_r+0x36>
 80072a0:	682b      	ldr	r3, [r5, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d0c5      	beq.n	8007232 <__sflush_r+0x36>
 80072a6:	2b1d      	cmp	r3, #29
 80072a8:	d001      	beq.n	80072ae <__sflush_r+0xb2>
 80072aa:	2b16      	cmp	r3, #22
 80072ac:	d101      	bne.n	80072b2 <__sflush_r+0xb6>
 80072ae:	602f      	str	r7, [r5, #0]
 80072b0:	e7b1      	b.n	8007216 <__sflush_r+0x1a>
 80072b2:	89a3      	ldrh	r3, [r4, #12]
 80072b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072b8:	81a3      	strh	r3, [r4, #12]
 80072ba:	e7ad      	b.n	8007218 <__sflush_r+0x1c>
 80072bc:	690f      	ldr	r7, [r1, #16]
 80072be:	2f00      	cmp	r7, #0
 80072c0:	d0a9      	beq.n	8007216 <__sflush_r+0x1a>
 80072c2:	0793      	lsls	r3, r2, #30
 80072c4:	680e      	ldr	r6, [r1, #0]
 80072c6:	bf08      	it	eq
 80072c8:	694b      	ldreq	r3, [r1, #20]
 80072ca:	600f      	str	r7, [r1, #0]
 80072cc:	bf18      	it	ne
 80072ce:	2300      	movne	r3, #0
 80072d0:	eba6 0807 	sub.w	r8, r6, r7
 80072d4:	608b      	str	r3, [r1, #8]
 80072d6:	f1b8 0f00 	cmp.w	r8, #0
 80072da:	dd9c      	ble.n	8007216 <__sflush_r+0x1a>
 80072dc:	6a21      	ldr	r1, [r4, #32]
 80072de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80072e0:	4643      	mov	r3, r8
 80072e2:	463a      	mov	r2, r7
 80072e4:	4628      	mov	r0, r5
 80072e6:	47b0      	blx	r6
 80072e8:	2800      	cmp	r0, #0
 80072ea:	dc06      	bgt.n	80072fa <__sflush_r+0xfe>
 80072ec:	89a3      	ldrh	r3, [r4, #12]
 80072ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072f2:	81a3      	strh	r3, [r4, #12]
 80072f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072f8:	e78e      	b.n	8007218 <__sflush_r+0x1c>
 80072fa:	4407      	add	r7, r0
 80072fc:	eba8 0800 	sub.w	r8, r8, r0
 8007300:	e7e9      	b.n	80072d6 <__sflush_r+0xda>
 8007302:	bf00      	nop
 8007304:	dfbffffe 	.word	0xdfbffffe

08007308 <_fflush_r>:
 8007308:	b538      	push	{r3, r4, r5, lr}
 800730a:	690b      	ldr	r3, [r1, #16]
 800730c:	4605      	mov	r5, r0
 800730e:	460c      	mov	r4, r1
 8007310:	b913      	cbnz	r3, 8007318 <_fflush_r+0x10>
 8007312:	2500      	movs	r5, #0
 8007314:	4628      	mov	r0, r5
 8007316:	bd38      	pop	{r3, r4, r5, pc}
 8007318:	b118      	cbz	r0, 8007322 <_fflush_r+0x1a>
 800731a:	6a03      	ldr	r3, [r0, #32]
 800731c:	b90b      	cbnz	r3, 8007322 <_fflush_r+0x1a>
 800731e:	f000 f8bb 	bl	8007498 <__sinit>
 8007322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d0f3      	beq.n	8007312 <_fflush_r+0xa>
 800732a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800732c:	07d0      	lsls	r0, r2, #31
 800732e:	d404      	bmi.n	800733a <_fflush_r+0x32>
 8007330:	0599      	lsls	r1, r3, #22
 8007332:	d402      	bmi.n	800733a <_fflush_r+0x32>
 8007334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007336:	f000 f9e8 	bl	800770a <__retarget_lock_acquire_recursive>
 800733a:	4628      	mov	r0, r5
 800733c:	4621      	mov	r1, r4
 800733e:	f7ff ff5d 	bl	80071fc <__sflush_r>
 8007342:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007344:	07da      	lsls	r2, r3, #31
 8007346:	4605      	mov	r5, r0
 8007348:	d4e4      	bmi.n	8007314 <_fflush_r+0xc>
 800734a:	89a3      	ldrh	r3, [r4, #12]
 800734c:	059b      	lsls	r3, r3, #22
 800734e:	d4e1      	bmi.n	8007314 <_fflush_r+0xc>
 8007350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007352:	f000 f9db 	bl	800770c <__retarget_lock_release_recursive>
 8007356:	e7dd      	b.n	8007314 <_fflush_r+0xc>

08007358 <fflush>:
 8007358:	4601      	mov	r1, r0
 800735a:	b920      	cbnz	r0, 8007366 <fflush+0xe>
 800735c:	4a04      	ldr	r2, [pc, #16]	; (8007370 <fflush+0x18>)
 800735e:	4905      	ldr	r1, [pc, #20]	; (8007374 <fflush+0x1c>)
 8007360:	4805      	ldr	r0, [pc, #20]	; (8007378 <fflush+0x20>)
 8007362:	f000 b8b1 	b.w	80074c8 <_fwalk_sglue>
 8007366:	4b05      	ldr	r3, [pc, #20]	; (800737c <fflush+0x24>)
 8007368:	6818      	ldr	r0, [r3, #0]
 800736a:	f7ff bfcd 	b.w	8007308 <_fflush_r>
 800736e:	bf00      	nop
 8007370:	20000018 	.word	0x20000018
 8007374:	08007309 	.word	0x08007309
 8007378:	20000024 	.word	0x20000024
 800737c:	20000070 	.word	0x20000070

08007380 <std>:
 8007380:	2300      	movs	r3, #0
 8007382:	b510      	push	{r4, lr}
 8007384:	4604      	mov	r4, r0
 8007386:	e9c0 3300 	strd	r3, r3, [r0]
 800738a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800738e:	6083      	str	r3, [r0, #8]
 8007390:	8181      	strh	r1, [r0, #12]
 8007392:	6643      	str	r3, [r0, #100]	; 0x64
 8007394:	81c2      	strh	r2, [r0, #14]
 8007396:	6183      	str	r3, [r0, #24]
 8007398:	4619      	mov	r1, r3
 800739a:	2208      	movs	r2, #8
 800739c:	305c      	adds	r0, #92	; 0x5c
 800739e:	f000 f93a 	bl	8007616 <memset>
 80073a2:	4b0d      	ldr	r3, [pc, #52]	; (80073d8 <std+0x58>)
 80073a4:	6263      	str	r3, [r4, #36]	; 0x24
 80073a6:	4b0d      	ldr	r3, [pc, #52]	; (80073dc <std+0x5c>)
 80073a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80073aa:	4b0d      	ldr	r3, [pc, #52]	; (80073e0 <std+0x60>)
 80073ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80073ae:	4b0d      	ldr	r3, [pc, #52]	; (80073e4 <std+0x64>)
 80073b0:	6323      	str	r3, [r4, #48]	; 0x30
 80073b2:	4b0d      	ldr	r3, [pc, #52]	; (80073e8 <std+0x68>)
 80073b4:	6224      	str	r4, [r4, #32]
 80073b6:	429c      	cmp	r4, r3
 80073b8:	d006      	beq.n	80073c8 <std+0x48>
 80073ba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80073be:	4294      	cmp	r4, r2
 80073c0:	d002      	beq.n	80073c8 <std+0x48>
 80073c2:	33d0      	adds	r3, #208	; 0xd0
 80073c4:	429c      	cmp	r4, r3
 80073c6:	d105      	bne.n	80073d4 <std+0x54>
 80073c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80073cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073d0:	f000 b99a 	b.w	8007708 <__retarget_lock_init_recursive>
 80073d4:	bd10      	pop	{r4, pc}
 80073d6:	bf00      	nop
 80073d8:	08007591 	.word	0x08007591
 80073dc:	080075b3 	.word	0x080075b3
 80073e0:	080075eb 	.word	0x080075eb
 80073e4:	0800760f 	.word	0x0800760f
 80073e8:	20004748 	.word	0x20004748

080073ec <stdio_exit_handler>:
 80073ec:	4a02      	ldr	r2, [pc, #8]	; (80073f8 <stdio_exit_handler+0xc>)
 80073ee:	4903      	ldr	r1, [pc, #12]	; (80073fc <stdio_exit_handler+0x10>)
 80073f0:	4803      	ldr	r0, [pc, #12]	; (8007400 <stdio_exit_handler+0x14>)
 80073f2:	f000 b869 	b.w	80074c8 <_fwalk_sglue>
 80073f6:	bf00      	nop
 80073f8:	20000018 	.word	0x20000018
 80073fc:	08007309 	.word	0x08007309
 8007400:	20000024 	.word	0x20000024

08007404 <cleanup_stdio>:
 8007404:	6841      	ldr	r1, [r0, #4]
 8007406:	4b0c      	ldr	r3, [pc, #48]	; (8007438 <cleanup_stdio+0x34>)
 8007408:	4299      	cmp	r1, r3
 800740a:	b510      	push	{r4, lr}
 800740c:	4604      	mov	r4, r0
 800740e:	d001      	beq.n	8007414 <cleanup_stdio+0x10>
 8007410:	f7ff ff7a 	bl	8007308 <_fflush_r>
 8007414:	68a1      	ldr	r1, [r4, #8]
 8007416:	4b09      	ldr	r3, [pc, #36]	; (800743c <cleanup_stdio+0x38>)
 8007418:	4299      	cmp	r1, r3
 800741a:	d002      	beq.n	8007422 <cleanup_stdio+0x1e>
 800741c:	4620      	mov	r0, r4
 800741e:	f7ff ff73 	bl	8007308 <_fflush_r>
 8007422:	68e1      	ldr	r1, [r4, #12]
 8007424:	4b06      	ldr	r3, [pc, #24]	; (8007440 <cleanup_stdio+0x3c>)
 8007426:	4299      	cmp	r1, r3
 8007428:	d004      	beq.n	8007434 <cleanup_stdio+0x30>
 800742a:	4620      	mov	r0, r4
 800742c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007430:	f7ff bf6a 	b.w	8007308 <_fflush_r>
 8007434:	bd10      	pop	{r4, pc}
 8007436:	bf00      	nop
 8007438:	20004748 	.word	0x20004748
 800743c:	200047b0 	.word	0x200047b0
 8007440:	20004818 	.word	0x20004818

08007444 <global_stdio_init.part.0>:
 8007444:	b510      	push	{r4, lr}
 8007446:	4b0b      	ldr	r3, [pc, #44]	; (8007474 <global_stdio_init.part.0+0x30>)
 8007448:	4c0b      	ldr	r4, [pc, #44]	; (8007478 <global_stdio_init.part.0+0x34>)
 800744a:	4a0c      	ldr	r2, [pc, #48]	; (800747c <global_stdio_init.part.0+0x38>)
 800744c:	601a      	str	r2, [r3, #0]
 800744e:	4620      	mov	r0, r4
 8007450:	2200      	movs	r2, #0
 8007452:	2104      	movs	r1, #4
 8007454:	f7ff ff94 	bl	8007380 <std>
 8007458:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800745c:	2201      	movs	r2, #1
 800745e:	2109      	movs	r1, #9
 8007460:	f7ff ff8e 	bl	8007380 <std>
 8007464:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007468:	2202      	movs	r2, #2
 800746a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800746e:	2112      	movs	r1, #18
 8007470:	f7ff bf86 	b.w	8007380 <std>
 8007474:	20004880 	.word	0x20004880
 8007478:	20004748 	.word	0x20004748
 800747c:	080073ed 	.word	0x080073ed

08007480 <__sfp_lock_acquire>:
 8007480:	4801      	ldr	r0, [pc, #4]	; (8007488 <__sfp_lock_acquire+0x8>)
 8007482:	f000 b942 	b.w	800770a <__retarget_lock_acquire_recursive>
 8007486:	bf00      	nop
 8007488:	20004889 	.word	0x20004889

0800748c <__sfp_lock_release>:
 800748c:	4801      	ldr	r0, [pc, #4]	; (8007494 <__sfp_lock_release+0x8>)
 800748e:	f000 b93d 	b.w	800770c <__retarget_lock_release_recursive>
 8007492:	bf00      	nop
 8007494:	20004889 	.word	0x20004889

08007498 <__sinit>:
 8007498:	b510      	push	{r4, lr}
 800749a:	4604      	mov	r4, r0
 800749c:	f7ff fff0 	bl	8007480 <__sfp_lock_acquire>
 80074a0:	6a23      	ldr	r3, [r4, #32]
 80074a2:	b11b      	cbz	r3, 80074ac <__sinit+0x14>
 80074a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074a8:	f7ff bff0 	b.w	800748c <__sfp_lock_release>
 80074ac:	4b04      	ldr	r3, [pc, #16]	; (80074c0 <__sinit+0x28>)
 80074ae:	6223      	str	r3, [r4, #32]
 80074b0:	4b04      	ldr	r3, [pc, #16]	; (80074c4 <__sinit+0x2c>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d1f5      	bne.n	80074a4 <__sinit+0xc>
 80074b8:	f7ff ffc4 	bl	8007444 <global_stdio_init.part.0>
 80074bc:	e7f2      	b.n	80074a4 <__sinit+0xc>
 80074be:	bf00      	nop
 80074c0:	08007405 	.word	0x08007405
 80074c4:	20004880 	.word	0x20004880

080074c8 <_fwalk_sglue>:
 80074c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074cc:	4607      	mov	r7, r0
 80074ce:	4688      	mov	r8, r1
 80074d0:	4614      	mov	r4, r2
 80074d2:	2600      	movs	r6, #0
 80074d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80074d8:	f1b9 0901 	subs.w	r9, r9, #1
 80074dc:	d505      	bpl.n	80074ea <_fwalk_sglue+0x22>
 80074de:	6824      	ldr	r4, [r4, #0]
 80074e0:	2c00      	cmp	r4, #0
 80074e2:	d1f7      	bne.n	80074d4 <_fwalk_sglue+0xc>
 80074e4:	4630      	mov	r0, r6
 80074e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074ea:	89ab      	ldrh	r3, [r5, #12]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d907      	bls.n	8007500 <_fwalk_sglue+0x38>
 80074f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80074f4:	3301      	adds	r3, #1
 80074f6:	d003      	beq.n	8007500 <_fwalk_sglue+0x38>
 80074f8:	4629      	mov	r1, r5
 80074fa:	4638      	mov	r0, r7
 80074fc:	47c0      	blx	r8
 80074fe:	4306      	orrs	r6, r0
 8007500:	3568      	adds	r5, #104	; 0x68
 8007502:	e7e9      	b.n	80074d8 <_fwalk_sglue+0x10>

08007504 <iprintf>:
 8007504:	b40f      	push	{r0, r1, r2, r3}
 8007506:	b507      	push	{r0, r1, r2, lr}
 8007508:	4906      	ldr	r1, [pc, #24]	; (8007524 <iprintf+0x20>)
 800750a:	ab04      	add	r3, sp, #16
 800750c:	6808      	ldr	r0, [r1, #0]
 800750e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007512:	6881      	ldr	r1, [r0, #8]
 8007514:	9301      	str	r3, [sp, #4]
 8007516:	f000 fb83 	bl	8007c20 <_vfiprintf_r>
 800751a:	b003      	add	sp, #12
 800751c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007520:	b004      	add	sp, #16
 8007522:	4770      	bx	lr
 8007524:	20000070 	.word	0x20000070

08007528 <sniprintf>:
 8007528:	b40c      	push	{r2, r3}
 800752a:	b530      	push	{r4, r5, lr}
 800752c:	4b17      	ldr	r3, [pc, #92]	; (800758c <sniprintf+0x64>)
 800752e:	1e0c      	subs	r4, r1, #0
 8007530:	681d      	ldr	r5, [r3, #0]
 8007532:	b09d      	sub	sp, #116	; 0x74
 8007534:	da08      	bge.n	8007548 <sniprintf+0x20>
 8007536:	238b      	movs	r3, #139	; 0x8b
 8007538:	602b      	str	r3, [r5, #0]
 800753a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800753e:	b01d      	add	sp, #116	; 0x74
 8007540:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007544:	b002      	add	sp, #8
 8007546:	4770      	bx	lr
 8007548:	f44f 7302 	mov.w	r3, #520	; 0x208
 800754c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007550:	bf14      	ite	ne
 8007552:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8007556:	4623      	moveq	r3, r4
 8007558:	9304      	str	r3, [sp, #16]
 800755a:	9307      	str	r3, [sp, #28]
 800755c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007560:	9002      	str	r0, [sp, #8]
 8007562:	9006      	str	r0, [sp, #24]
 8007564:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007568:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800756a:	ab21      	add	r3, sp, #132	; 0x84
 800756c:	a902      	add	r1, sp, #8
 800756e:	4628      	mov	r0, r5
 8007570:	9301      	str	r3, [sp, #4]
 8007572:	f000 fa2d 	bl	80079d0 <_svfiprintf_r>
 8007576:	1c43      	adds	r3, r0, #1
 8007578:	bfbc      	itt	lt
 800757a:	238b      	movlt	r3, #139	; 0x8b
 800757c:	602b      	strlt	r3, [r5, #0]
 800757e:	2c00      	cmp	r4, #0
 8007580:	d0dd      	beq.n	800753e <sniprintf+0x16>
 8007582:	9b02      	ldr	r3, [sp, #8]
 8007584:	2200      	movs	r2, #0
 8007586:	701a      	strb	r2, [r3, #0]
 8007588:	e7d9      	b.n	800753e <sniprintf+0x16>
 800758a:	bf00      	nop
 800758c:	20000070 	.word	0x20000070

08007590 <__sread>:
 8007590:	b510      	push	{r4, lr}
 8007592:	460c      	mov	r4, r1
 8007594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007598:	f000 f868 	bl	800766c <_read_r>
 800759c:	2800      	cmp	r0, #0
 800759e:	bfab      	itete	ge
 80075a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80075a2:	89a3      	ldrhlt	r3, [r4, #12]
 80075a4:	181b      	addge	r3, r3, r0
 80075a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80075aa:	bfac      	ite	ge
 80075ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80075ae:	81a3      	strhlt	r3, [r4, #12]
 80075b0:	bd10      	pop	{r4, pc}

080075b2 <__swrite>:
 80075b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075b6:	461f      	mov	r7, r3
 80075b8:	898b      	ldrh	r3, [r1, #12]
 80075ba:	05db      	lsls	r3, r3, #23
 80075bc:	4605      	mov	r5, r0
 80075be:	460c      	mov	r4, r1
 80075c0:	4616      	mov	r6, r2
 80075c2:	d505      	bpl.n	80075d0 <__swrite+0x1e>
 80075c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075c8:	2302      	movs	r3, #2
 80075ca:	2200      	movs	r2, #0
 80075cc:	f000 f83c 	bl	8007648 <_lseek_r>
 80075d0:	89a3      	ldrh	r3, [r4, #12]
 80075d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075da:	81a3      	strh	r3, [r4, #12]
 80075dc:	4632      	mov	r2, r6
 80075de:	463b      	mov	r3, r7
 80075e0:	4628      	mov	r0, r5
 80075e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075e6:	f000 b853 	b.w	8007690 <_write_r>

080075ea <__sseek>:
 80075ea:	b510      	push	{r4, lr}
 80075ec:	460c      	mov	r4, r1
 80075ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075f2:	f000 f829 	bl	8007648 <_lseek_r>
 80075f6:	1c43      	adds	r3, r0, #1
 80075f8:	89a3      	ldrh	r3, [r4, #12]
 80075fa:	bf15      	itete	ne
 80075fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80075fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007602:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007606:	81a3      	strheq	r3, [r4, #12]
 8007608:	bf18      	it	ne
 800760a:	81a3      	strhne	r3, [r4, #12]
 800760c:	bd10      	pop	{r4, pc}

0800760e <__sclose>:
 800760e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007612:	f000 b809 	b.w	8007628 <_close_r>

08007616 <memset>:
 8007616:	4402      	add	r2, r0
 8007618:	4603      	mov	r3, r0
 800761a:	4293      	cmp	r3, r2
 800761c:	d100      	bne.n	8007620 <memset+0xa>
 800761e:	4770      	bx	lr
 8007620:	f803 1b01 	strb.w	r1, [r3], #1
 8007624:	e7f9      	b.n	800761a <memset+0x4>
	...

08007628 <_close_r>:
 8007628:	b538      	push	{r3, r4, r5, lr}
 800762a:	4d06      	ldr	r5, [pc, #24]	; (8007644 <_close_r+0x1c>)
 800762c:	2300      	movs	r3, #0
 800762e:	4604      	mov	r4, r0
 8007630:	4608      	mov	r0, r1
 8007632:	602b      	str	r3, [r5, #0]
 8007634:	f7ff fc18 	bl	8006e68 <_close>
 8007638:	1c43      	adds	r3, r0, #1
 800763a:	d102      	bne.n	8007642 <_close_r+0x1a>
 800763c:	682b      	ldr	r3, [r5, #0]
 800763e:	b103      	cbz	r3, 8007642 <_close_r+0x1a>
 8007640:	6023      	str	r3, [r4, #0]
 8007642:	bd38      	pop	{r3, r4, r5, pc}
 8007644:	20004884 	.word	0x20004884

08007648 <_lseek_r>:
 8007648:	b538      	push	{r3, r4, r5, lr}
 800764a:	4d07      	ldr	r5, [pc, #28]	; (8007668 <_lseek_r+0x20>)
 800764c:	4604      	mov	r4, r0
 800764e:	4608      	mov	r0, r1
 8007650:	4611      	mov	r1, r2
 8007652:	2200      	movs	r2, #0
 8007654:	602a      	str	r2, [r5, #0]
 8007656:	461a      	mov	r2, r3
 8007658:	f7ff fbc3 	bl	8006de2 <_lseek>
 800765c:	1c43      	adds	r3, r0, #1
 800765e:	d102      	bne.n	8007666 <_lseek_r+0x1e>
 8007660:	682b      	ldr	r3, [r5, #0]
 8007662:	b103      	cbz	r3, 8007666 <_lseek_r+0x1e>
 8007664:	6023      	str	r3, [r4, #0]
 8007666:	bd38      	pop	{r3, r4, r5, pc}
 8007668:	20004884 	.word	0x20004884

0800766c <_read_r>:
 800766c:	b538      	push	{r3, r4, r5, lr}
 800766e:	4d07      	ldr	r5, [pc, #28]	; (800768c <_read_r+0x20>)
 8007670:	4604      	mov	r4, r0
 8007672:	4608      	mov	r0, r1
 8007674:	4611      	mov	r1, r2
 8007676:	2200      	movs	r2, #0
 8007678:	602a      	str	r2, [r5, #0]
 800767a:	461a      	mov	r2, r3
 800767c:	f7ff fb59 	bl	8006d32 <_read>
 8007680:	1c43      	adds	r3, r0, #1
 8007682:	d102      	bne.n	800768a <_read_r+0x1e>
 8007684:	682b      	ldr	r3, [r5, #0]
 8007686:	b103      	cbz	r3, 800768a <_read_r+0x1e>
 8007688:	6023      	str	r3, [r4, #0]
 800768a:	bd38      	pop	{r3, r4, r5, pc}
 800768c:	20004884 	.word	0x20004884

08007690 <_write_r>:
 8007690:	b538      	push	{r3, r4, r5, lr}
 8007692:	4d07      	ldr	r5, [pc, #28]	; (80076b0 <_write_r+0x20>)
 8007694:	4604      	mov	r4, r0
 8007696:	4608      	mov	r0, r1
 8007698:	4611      	mov	r1, r2
 800769a:	2200      	movs	r2, #0
 800769c:	602a      	str	r2, [r5, #0]
 800769e:	461a      	mov	r2, r3
 80076a0:	f7ff fbb1 	bl	8006e06 <_write>
 80076a4:	1c43      	adds	r3, r0, #1
 80076a6:	d102      	bne.n	80076ae <_write_r+0x1e>
 80076a8:	682b      	ldr	r3, [r5, #0]
 80076aa:	b103      	cbz	r3, 80076ae <_write_r+0x1e>
 80076ac:	6023      	str	r3, [r4, #0]
 80076ae:	bd38      	pop	{r3, r4, r5, pc}
 80076b0:	20004884 	.word	0x20004884

080076b4 <__errno>:
 80076b4:	4b01      	ldr	r3, [pc, #4]	; (80076bc <__errno+0x8>)
 80076b6:	6818      	ldr	r0, [r3, #0]
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	20000070 	.word	0x20000070

080076c0 <__libc_init_array>:
 80076c0:	b570      	push	{r4, r5, r6, lr}
 80076c2:	4d0d      	ldr	r5, [pc, #52]	; (80076f8 <__libc_init_array+0x38>)
 80076c4:	4c0d      	ldr	r4, [pc, #52]	; (80076fc <__libc_init_array+0x3c>)
 80076c6:	1b64      	subs	r4, r4, r5
 80076c8:	10a4      	asrs	r4, r4, #2
 80076ca:	2600      	movs	r6, #0
 80076cc:	42a6      	cmp	r6, r4
 80076ce:	d109      	bne.n	80076e4 <__libc_init_array+0x24>
 80076d0:	4d0b      	ldr	r5, [pc, #44]	; (8007700 <__libc_init_array+0x40>)
 80076d2:	4c0c      	ldr	r4, [pc, #48]	; (8007704 <__libc_init_array+0x44>)
 80076d4:	f000 feca 	bl	800846c <_init>
 80076d8:	1b64      	subs	r4, r4, r5
 80076da:	10a4      	asrs	r4, r4, #2
 80076dc:	2600      	movs	r6, #0
 80076de:	42a6      	cmp	r6, r4
 80076e0:	d105      	bne.n	80076ee <__libc_init_array+0x2e>
 80076e2:	bd70      	pop	{r4, r5, r6, pc}
 80076e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80076e8:	4798      	blx	r3
 80076ea:	3601      	adds	r6, #1
 80076ec:	e7ee      	b.n	80076cc <__libc_init_array+0xc>
 80076ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80076f2:	4798      	blx	r3
 80076f4:	3601      	adds	r6, #1
 80076f6:	e7f2      	b.n	80076de <__libc_init_array+0x1e>
 80076f8:	080086a4 	.word	0x080086a4
 80076fc:	080086a4 	.word	0x080086a4
 8007700:	080086a4 	.word	0x080086a4
 8007704:	080086a8 	.word	0x080086a8

08007708 <__retarget_lock_init_recursive>:
 8007708:	4770      	bx	lr

0800770a <__retarget_lock_acquire_recursive>:
 800770a:	4770      	bx	lr

0800770c <__retarget_lock_release_recursive>:
 800770c:	4770      	bx	lr

0800770e <memcpy>:
 800770e:	440a      	add	r2, r1
 8007710:	4291      	cmp	r1, r2
 8007712:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007716:	d100      	bne.n	800771a <memcpy+0xc>
 8007718:	4770      	bx	lr
 800771a:	b510      	push	{r4, lr}
 800771c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007720:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007724:	4291      	cmp	r1, r2
 8007726:	d1f9      	bne.n	800771c <memcpy+0xe>
 8007728:	bd10      	pop	{r4, pc}
	...

0800772c <_free_r>:
 800772c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800772e:	2900      	cmp	r1, #0
 8007730:	d044      	beq.n	80077bc <_free_r+0x90>
 8007732:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007736:	9001      	str	r0, [sp, #4]
 8007738:	2b00      	cmp	r3, #0
 800773a:	f1a1 0404 	sub.w	r4, r1, #4
 800773e:	bfb8      	it	lt
 8007740:	18e4      	addlt	r4, r4, r3
 8007742:	f000 f8df 	bl	8007904 <__malloc_lock>
 8007746:	4a1e      	ldr	r2, [pc, #120]	; (80077c0 <_free_r+0x94>)
 8007748:	9801      	ldr	r0, [sp, #4]
 800774a:	6813      	ldr	r3, [r2, #0]
 800774c:	b933      	cbnz	r3, 800775c <_free_r+0x30>
 800774e:	6063      	str	r3, [r4, #4]
 8007750:	6014      	str	r4, [r2, #0]
 8007752:	b003      	add	sp, #12
 8007754:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007758:	f000 b8da 	b.w	8007910 <__malloc_unlock>
 800775c:	42a3      	cmp	r3, r4
 800775e:	d908      	bls.n	8007772 <_free_r+0x46>
 8007760:	6825      	ldr	r5, [r4, #0]
 8007762:	1961      	adds	r1, r4, r5
 8007764:	428b      	cmp	r3, r1
 8007766:	bf01      	itttt	eq
 8007768:	6819      	ldreq	r1, [r3, #0]
 800776a:	685b      	ldreq	r3, [r3, #4]
 800776c:	1949      	addeq	r1, r1, r5
 800776e:	6021      	streq	r1, [r4, #0]
 8007770:	e7ed      	b.n	800774e <_free_r+0x22>
 8007772:	461a      	mov	r2, r3
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	b10b      	cbz	r3, 800777c <_free_r+0x50>
 8007778:	42a3      	cmp	r3, r4
 800777a:	d9fa      	bls.n	8007772 <_free_r+0x46>
 800777c:	6811      	ldr	r1, [r2, #0]
 800777e:	1855      	adds	r5, r2, r1
 8007780:	42a5      	cmp	r5, r4
 8007782:	d10b      	bne.n	800779c <_free_r+0x70>
 8007784:	6824      	ldr	r4, [r4, #0]
 8007786:	4421      	add	r1, r4
 8007788:	1854      	adds	r4, r2, r1
 800778a:	42a3      	cmp	r3, r4
 800778c:	6011      	str	r1, [r2, #0]
 800778e:	d1e0      	bne.n	8007752 <_free_r+0x26>
 8007790:	681c      	ldr	r4, [r3, #0]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	6053      	str	r3, [r2, #4]
 8007796:	440c      	add	r4, r1
 8007798:	6014      	str	r4, [r2, #0]
 800779a:	e7da      	b.n	8007752 <_free_r+0x26>
 800779c:	d902      	bls.n	80077a4 <_free_r+0x78>
 800779e:	230c      	movs	r3, #12
 80077a0:	6003      	str	r3, [r0, #0]
 80077a2:	e7d6      	b.n	8007752 <_free_r+0x26>
 80077a4:	6825      	ldr	r5, [r4, #0]
 80077a6:	1961      	adds	r1, r4, r5
 80077a8:	428b      	cmp	r3, r1
 80077aa:	bf04      	itt	eq
 80077ac:	6819      	ldreq	r1, [r3, #0]
 80077ae:	685b      	ldreq	r3, [r3, #4]
 80077b0:	6063      	str	r3, [r4, #4]
 80077b2:	bf04      	itt	eq
 80077b4:	1949      	addeq	r1, r1, r5
 80077b6:	6021      	streq	r1, [r4, #0]
 80077b8:	6054      	str	r4, [r2, #4]
 80077ba:	e7ca      	b.n	8007752 <_free_r+0x26>
 80077bc:	b003      	add	sp, #12
 80077be:	bd30      	pop	{r4, r5, pc}
 80077c0:	2000488c 	.word	0x2000488c

080077c4 <sbrk_aligned>:
 80077c4:	b570      	push	{r4, r5, r6, lr}
 80077c6:	4e0e      	ldr	r6, [pc, #56]	; (8007800 <sbrk_aligned+0x3c>)
 80077c8:	460c      	mov	r4, r1
 80077ca:	6831      	ldr	r1, [r6, #0]
 80077cc:	4605      	mov	r5, r0
 80077ce:	b911      	cbnz	r1, 80077d6 <sbrk_aligned+0x12>
 80077d0:	f000 fd80 	bl	80082d4 <_sbrk_r>
 80077d4:	6030      	str	r0, [r6, #0]
 80077d6:	4621      	mov	r1, r4
 80077d8:	4628      	mov	r0, r5
 80077da:	f000 fd7b 	bl	80082d4 <_sbrk_r>
 80077de:	1c43      	adds	r3, r0, #1
 80077e0:	d00a      	beq.n	80077f8 <sbrk_aligned+0x34>
 80077e2:	1cc4      	adds	r4, r0, #3
 80077e4:	f024 0403 	bic.w	r4, r4, #3
 80077e8:	42a0      	cmp	r0, r4
 80077ea:	d007      	beq.n	80077fc <sbrk_aligned+0x38>
 80077ec:	1a21      	subs	r1, r4, r0
 80077ee:	4628      	mov	r0, r5
 80077f0:	f000 fd70 	bl	80082d4 <_sbrk_r>
 80077f4:	3001      	adds	r0, #1
 80077f6:	d101      	bne.n	80077fc <sbrk_aligned+0x38>
 80077f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80077fc:	4620      	mov	r0, r4
 80077fe:	bd70      	pop	{r4, r5, r6, pc}
 8007800:	20004890 	.word	0x20004890

08007804 <_malloc_r>:
 8007804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007808:	1ccd      	adds	r5, r1, #3
 800780a:	f025 0503 	bic.w	r5, r5, #3
 800780e:	3508      	adds	r5, #8
 8007810:	2d0c      	cmp	r5, #12
 8007812:	bf38      	it	cc
 8007814:	250c      	movcc	r5, #12
 8007816:	2d00      	cmp	r5, #0
 8007818:	4607      	mov	r7, r0
 800781a:	db01      	blt.n	8007820 <_malloc_r+0x1c>
 800781c:	42a9      	cmp	r1, r5
 800781e:	d905      	bls.n	800782c <_malloc_r+0x28>
 8007820:	230c      	movs	r3, #12
 8007822:	603b      	str	r3, [r7, #0]
 8007824:	2600      	movs	r6, #0
 8007826:	4630      	mov	r0, r6
 8007828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800782c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007900 <_malloc_r+0xfc>
 8007830:	f000 f868 	bl	8007904 <__malloc_lock>
 8007834:	f8d8 3000 	ldr.w	r3, [r8]
 8007838:	461c      	mov	r4, r3
 800783a:	bb5c      	cbnz	r4, 8007894 <_malloc_r+0x90>
 800783c:	4629      	mov	r1, r5
 800783e:	4638      	mov	r0, r7
 8007840:	f7ff ffc0 	bl	80077c4 <sbrk_aligned>
 8007844:	1c43      	adds	r3, r0, #1
 8007846:	4604      	mov	r4, r0
 8007848:	d155      	bne.n	80078f6 <_malloc_r+0xf2>
 800784a:	f8d8 4000 	ldr.w	r4, [r8]
 800784e:	4626      	mov	r6, r4
 8007850:	2e00      	cmp	r6, #0
 8007852:	d145      	bne.n	80078e0 <_malloc_r+0xdc>
 8007854:	2c00      	cmp	r4, #0
 8007856:	d048      	beq.n	80078ea <_malloc_r+0xe6>
 8007858:	6823      	ldr	r3, [r4, #0]
 800785a:	4631      	mov	r1, r6
 800785c:	4638      	mov	r0, r7
 800785e:	eb04 0903 	add.w	r9, r4, r3
 8007862:	f000 fd37 	bl	80082d4 <_sbrk_r>
 8007866:	4581      	cmp	r9, r0
 8007868:	d13f      	bne.n	80078ea <_malloc_r+0xe6>
 800786a:	6821      	ldr	r1, [r4, #0]
 800786c:	1a6d      	subs	r5, r5, r1
 800786e:	4629      	mov	r1, r5
 8007870:	4638      	mov	r0, r7
 8007872:	f7ff ffa7 	bl	80077c4 <sbrk_aligned>
 8007876:	3001      	adds	r0, #1
 8007878:	d037      	beq.n	80078ea <_malloc_r+0xe6>
 800787a:	6823      	ldr	r3, [r4, #0]
 800787c:	442b      	add	r3, r5
 800787e:	6023      	str	r3, [r4, #0]
 8007880:	f8d8 3000 	ldr.w	r3, [r8]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d038      	beq.n	80078fa <_malloc_r+0xf6>
 8007888:	685a      	ldr	r2, [r3, #4]
 800788a:	42a2      	cmp	r2, r4
 800788c:	d12b      	bne.n	80078e6 <_malloc_r+0xe2>
 800788e:	2200      	movs	r2, #0
 8007890:	605a      	str	r2, [r3, #4]
 8007892:	e00f      	b.n	80078b4 <_malloc_r+0xb0>
 8007894:	6822      	ldr	r2, [r4, #0]
 8007896:	1b52      	subs	r2, r2, r5
 8007898:	d41f      	bmi.n	80078da <_malloc_r+0xd6>
 800789a:	2a0b      	cmp	r2, #11
 800789c:	d917      	bls.n	80078ce <_malloc_r+0xca>
 800789e:	1961      	adds	r1, r4, r5
 80078a0:	42a3      	cmp	r3, r4
 80078a2:	6025      	str	r5, [r4, #0]
 80078a4:	bf18      	it	ne
 80078a6:	6059      	strne	r1, [r3, #4]
 80078a8:	6863      	ldr	r3, [r4, #4]
 80078aa:	bf08      	it	eq
 80078ac:	f8c8 1000 	streq.w	r1, [r8]
 80078b0:	5162      	str	r2, [r4, r5]
 80078b2:	604b      	str	r3, [r1, #4]
 80078b4:	4638      	mov	r0, r7
 80078b6:	f104 060b 	add.w	r6, r4, #11
 80078ba:	f000 f829 	bl	8007910 <__malloc_unlock>
 80078be:	f026 0607 	bic.w	r6, r6, #7
 80078c2:	1d23      	adds	r3, r4, #4
 80078c4:	1af2      	subs	r2, r6, r3
 80078c6:	d0ae      	beq.n	8007826 <_malloc_r+0x22>
 80078c8:	1b9b      	subs	r3, r3, r6
 80078ca:	50a3      	str	r3, [r4, r2]
 80078cc:	e7ab      	b.n	8007826 <_malloc_r+0x22>
 80078ce:	42a3      	cmp	r3, r4
 80078d0:	6862      	ldr	r2, [r4, #4]
 80078d2:	d1dd      	bne.n	8007890 <_malloc_r+0x8c>
 80078d4:	f8c8 2000 	str.w	r2, [r8]
 80078d8:	e7ec      	b.n	80078b4 <_malloc_r+0xb0>
 80078da:	4623      	mov	r3, r4
 80078dc:	6864      	ldr	r4, [r4, #4]
 80078de:	e7ac      	b.n	800783a <_malloc_r+0x36>
 80078e0:	4634      	mov	r4, r6
 80078e2:	6876      	ldr	r6, [r6, #4]
 80078e4:	e7b4      	b.n	8007850 <_malloc_r+0x4c>
 80078e6:	4613      	mov	r3, r2
 80078e8:	e7cc      	b.n	8007884 <_malloc_r+0x80>
 80078ea:	230c      	movs	r3, #12
 80078ec:	603b      	str	r3, [r7, #0]
 80078ee:	4638      	mov	r0, r7
 80078f0:	f000 f80e 	bl	8007910 <__malloc_unlock>
 80078f4:	e797      	b.n	8007826 <_malloc_r+0x22>
 80078f6:	6025      	str	r5, [r4, #0]
 80078f8:	e7dc      	b.n	80078b4 <_malloc_r+0xb0>
 80078fa:	605b      	str	r3, [r3, #4]
 80078fc:	deff      	udf	#255	; 0xff
 80078fe:	bf00      	nop
 8007900:	2000488c 	.word	0x2000488c

08007904 <__malloc_lock>:
 8007904:	4801      	ldr	r0, [pc, #4]	; (800790c <__malloc_lock+0x8>)
 8007906:	f7ff bf00 	b.w	800770a <__retarget_lock_acquire_recursive>
 800790a:	bf00      	nop
 800790c:	20004888 	.word	0x20004888

08007910 <__malloc_unlock>:
 8007910:	4801      	ldr	r0, [pc, #4]	; (8007918 <__malloc_unlock+0x8>)
 8007912:	f7ff befb 	b.w	800770c <__retarget_lock_release_recursive>
 8007916:	bf00      	nop
 8007918:	20004888 	.word	0x20004888

0800791c <__ssputs_r>:
 800791c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007920:	688e      	ldr	r6, [r1, #8]
 8007922:	461f      	mov	r7, r3
 8007924:	42be      	cmp	r6, r7
 8007926:	680b      	ldr	r3, [r1, #0]
 8007928:	4682      	mov	sl, r0
 800792a:	460c      	mov	r4, r1
 800792c:	4690      	mov	r8, r2
 800792e:	d82c      	bhi.n	800798a <__ssputs_r+0x6e>
 8007930:	898a      	ldrh	r2, [r1, #12]
 8007932:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007936:	d026      	beq.n	8007986 <__ssputs_r+0x6a>
 8007938:	6965      	ldr	r5, [r4, #20]
 800793a:	6909      	ldr	r1, [r1, #16]
 800793c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007940:	eba3 0901 	sub.w	r9, r3, r1
 8007944:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007948:	1c7b      	adds	r3, r7, #1
 800794a:	444b      	add	r3, r9
 800794c:	106d      	asrs	r5, r5, #1
 800794e:	429d      	cmp	r5, r3
 8007950:	bf38      	it	cc
 8007952:	461d      	movcc	r5, r3
 8007954:	0553      	lsls	r3, r2, #21
 8007956:	d527      	bpl.n	80079a8 <__ssputs_r+0x8c>
 8007958:	4629      	mov	r1, r5
 800795a:	f7ff ff53 	bl	8007804 <_malloc_r>
 800795e:	4606      	mov	r6, r0
 8007960:	b360      	cbz	r0, 80079bc <__ssputs_r+0xa0>
 8007962:	6921      	ldr	r1, [r4, #16]
 8007964:	464a      	mov	r2, r9
 8007966:	f7ff fed2 	bl	800770e <memcpy>
 800796a:	89a3      	ldrh	r3, [r4, #12]
 800796c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007974:	81a3      	strh	r3, [r4, #12]
 8007976:	6126      	str	r6, [r4, #16]
 8007978:	6165      	str	r5, [r4, #20]
 800797a:	444e      	add	r6, r9
 800797c:	eba5 0509 	sub.w	r5, r5, r9
 8007980:	6026      	str	r6, [r4, #0]
 8007982:	60a5      	str	r5, [r4, #8]
 8007984:	463e      	mov	r6, r7
 8007986:	42be      	cmp	r6, r7
 8007988:	d900      	bls.n	800798c <__ssputs_r+0x70>
 800798a:	463e      	mov	r6, r7
 800798c:	6820      	ldr	r0, [r4, #0]
 800798e:	4632      	mov	r2, r6
 8007990:	4641      	mov	r1, r8
 8007992:	f000 fc85 	bl	80082a0 <memmove>
 8007996:	68a3      	ldr	r3, [r4, #8]
 8007998:	1b9b      	subs	r3, r3, r6
 800799a:	60a3      	str	r3, [r4, #8]
 800799c:	6823      	ldr	r3, [r4, #0]
 800799e:	4433      	add	r3, r6
 80079a0:	6023      	str	r3, [r4, #0]
 80079a2:	2000      	movs	r0, #0
 80079a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079a8:	462a      	mov	r2, r5
 80079aa:	f000 fca3 	bl	80082f4 <_realloc_r>
 80079ae:	4606      	mov	r6, r0
 80079b0:	2800      	cmp	r0, #0
 80079b2:	d1e0      	bne.n	8007976 <__ssputs_r+0x5a>
 80079b4:	6921      	ldr	r1, [r4, #16]
 80079b6:	4650      	mov	r0, sl
 80079b8:	f7ff feb8 	bl	800772c <_free_r>
 80079bc:	230c      	movs	r3, #12
 80079be:	f8ca 3000 	str.w	r3, [sl]
 80079c2:	89a3      	ldrh	r3, [r4, #12]
 80079c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079c8:	81a3      	strh	r3, [r4, #12]
 80079ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079ce:	e7e9      	b.n	80079a4 <__ssputs_r+0x88>

080079d0 <_svfiprintf_r>:
 80079d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079d4:	4698      	mov	r8, r3
 80079d6:	898b      	ldrh	r3, [r1, #12]
 80079d8:	061b      	lsls	r3, r3, #24
 80079da:	b09d      	sub	sp, #116	; 0x74
 80079dc:	4607      	mov	r7, r0
 80079de:	460d      	mov	r5, r1
 80079e0:	4614      	mov	r4, r2
 80079e2:	d50e      	bpl.n	8007a02 <_svfiprintf_r+0x32>
 80079e4:	690b      	ldr	r3, [r1, #16]
 80079e6:	b963      	cbnz	r3, 8007a02 <_svfiprintf_r+0x32>
 80079e8:	2140      	movs	r1, #64	; 0x40
 80079ea:	f7ff ff0b 	bl	8007804 <_malloc_r>
 80079ee:	6028      	str	r0, [r5, #0]
 80079f0:	6128      	str	r0, [r5, #16]
 80079f2:	b920      	cbnz	r0, 80079fe <_svfiprintf_r+0x2e>
 80079f4:	230c      	movs	r3, #12
 80079f6:	603b      	str	r3, [r7, #0]
 80079f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079fc:	e0d0      	b.n	8007ba0 <_svfiprintf_r+0x1d0>
 80079fe:	2340      	movs	r3, #64	; 0x40
 8007a00:	616b      	str	r3, [r5, #20]
 8007a02:	2300      	movs	r3, #0
 8007a04:	9309      	str	r3, [sp, #36]	; 0x24
 8007a06:	2320      	movs	r3, #32
 8007a08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a10:	2330      	movs	r3, #48	; 0x30
 8007a12:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007bb8 <_svfiprintf_r+0x1e8>
 8007a16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a1a:	f04f 0901 	mov.w	r9, #1
 8007a1e:	4623      	mov	r3, r4
 8007a20:	469a      	mov	sl, r3
 8007a22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a26:	b10a      	cbz	r2, 8007a2c <_svfiprintf_r+0x5c>
 8007a28:	2a25      	cmp	r2, #37	; 0x25
 8007a2a:	d1f9      	bne.n	8007a20 <_svfiprintf_r+0x50>
 8007a2c:	ebba 0b04 	subs.w	fp, sl, r4
 8007a30:	d00b      	beq.n	8007a4a <_svfiprintf_r+0x7a>
 8007a32:	465b      	mov	r3, fp
 8007a34:	4622      	mov	r2, r4
 8007a36:	4629      	mov	r1, r5
 8007a38:	4638      	mov	r0, r7
 8007a3a:	f7ff ff6f 	bl	800791c <__ssputs_r>
 8007a3e:	3001      	adds	r0, #1
 8007a40:	f000 80a9 	beq.w	8007b96 <_svfiprintf_r+0x1c6>
 8007a44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a46:	445a      	add	r2, fp
 8007a48:	9209      	str	r2, [sp, #36]	; 0x24
 8007a4a:	f89a 3000 	ldrb.w	r3, [sl]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f000 80a1 	beq.w	8007b96 <_svfiprintf_r+0x1c6>
 8007a54:	2300      	movs	r3, #0
 8007a56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a5e:	f10a 0a01 	add.w	sl, sl, #1
 8007a62:	9304      	str	r3, [sp, #16]
 8007a64:	9307      	str	r3, [sp, #28]
 8007a66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a6a:	931a      	str	r3, [sp, #104]	; 0x68
 8007a6c:	4654      	mov	r4, sl
 8007a6e:	2205      	movs	r2, #5
 8007a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a74:	4850      	ldr	r0, [pc, #320]	; (8007bb8 <_svfiprintf_r+0x1e8>)
 8007a76:	f7f8 fbc3 	bl	8000200 <memchr>
 8007a7a:	9a04      	ldr	r2, [sp, #16]
 8007a7c:	b9d8      	cbnz	r0, 8007ab6 <_svfiprintf_r+0xe6>
 8007a7e:	06d0      	lsls	r0, r2, #27
 8007a80:	bf44      	itt	mi
 8007a82:	2320      	movmi	r3, #32
 8007a84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a88:	0711      	lsls	r1, r2, #28
 8007a8a:	bf44      	itt	mi
 8007a8c:	232b      	movmi	r3, #43	; 0x2b
 8007a8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a92:	f89a 3000 	ldrb.w	r3, [sl]
 8007a96:	2b2a      	cmp	r3, #42	; 0x2a
 8007a98:	d015      	beq.n	8007ac6 <_svfiprintf_r+0xf6>
 8007a9a:	9a07      	ldr	r2, [sp, #28]
 8007a9c:	4654      	mov	r4, sl
 8007a9e:	2000      	movs	r0, #0
 8007aa0:	f04f 0c0a 	mov.w	ip, #10
 8007aa4:	4621      	mov	r1, r4
 8007aa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007aaa:	3b30      	subs	r3, #48	; 0x30
 8007aac:	2b09      	cmp	r3, #9
 8007aae:	d94d      	bls.n	8007b4c <_svfiprintf_r+0x17c>
 8007ab0:	b1b0      	cbz	r0, 8007ae0 <_svfiprintf_r+0x110>
 8007ab2:	9207      	str	r2, [sp, #28]
 8007ab4:	e014      	b.n	8007ae0 <_svfiprintf_r+0x110>
 8007ab6:	eba0 0308 	sub.w	r3, r0, r8
 8007aba:	fa09 f303 	lsl.w	r3, r9, r3
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	9304      	str	r3, [sp, #16]
 8007ac2:	46a2      	mov	sl, r4
 8007ac4:	e7d2      	b.n	8007a6c <_svfiprintf_r+0x9c>
 8007ac6:	9b03      	ldr	r3, [sp, #12]
 8007ac8:	1d19      	adds	r1, r3, #4
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	9103      	str	r1, [sp, #12]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	bfbb      	ittet	lt
 8007ad2:	425b      	neglt	r3, r3
 8007ad4:	f042 0202 	orrlt.w	r2, r2, #2
 8007ad8:	9307      	strge	r3, [sp, #28]
 8007ada:	9307      	strlt	r3, [sp, #28]
 8007adc:	bfb8      	it	lt
 8007ade:	9204      	strlt	r2, [sp, #16]
 8007ae0:	7823      	ldrb	r3, [r4, #0]
 8007ae2:	2b2e      	cmp	r3, #46	; 0x2e
 8007ae4:	d10c      	bne.n	8007b00 <_svfiprintf_r+0x130>
 8007ae6:	7863      	ldrb	r3, [r4, #1]
 8007ae8:	2b2a      	cmp	r3, #42	; 0x2a
 8007aea:	d134      	bne.n	8007b56 <_svfiprintf_r+0x186>
 8007aec:	9b03      	ldr	r3, [sp, #12]
 8007aee:	1d1a      	adds	r2, r3, #4
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	9203      	str	r2, [sp, #12]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	bfb8      	it	lt
 8007af8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007afc:	3402      	adds	r4, #2
 8007afe:	9305      	str	r3, [sp, #20]
 8007b00:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007bc8 <_svfiprintf_r+0x1f8>
 8007b04:	7821      	ldrb	r1, [r4, #0]
 8007b06:	2203      	movs	r2, #3
 8007b08:	4650      	mov	r0, sl
 8007b0a:	f7f8 fb79 	bl	8000200 <memchr>
 8007b0e:	b138      	cbz	r0, 8007b20 <_svfiprintf_r+0x150>
 8007b10:	9b04      	ldr	r3, [sp, #16]
 8007b12:	eba0 000a 	sub.w	r0, r0, sl
 8007b16:	2240      	movs	r2, #64	; 0x40
 8007b18:	4082      	lsls	r2, r0
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	3401      	adds	r4, #1
 8007b1e:	9304      	str	r3, [sp, #16]
 8007b20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b24:	4825      	ldr	r0, [pc, #148]	; (8007bbc <_svfiprintf_r+0x1ec>)
 8007b26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b2a:	2206      	movs	r2, #6
 8007b2c:	f7f8 fb68 	bl	8000200 <memchr>
 8007b30:	2800      	cmp	r0, #0
 8007b32:	d038      	beq.n	8007ba6 <_svfiprintf_r+0x1d6>
 8007b34:	4b22      	ldr	r3, [pc, #136]	; (8007bc0 <_svfiprintf_r+0x1f0>)
 8007b36:	bb1b      	cbnz	r3, 8007b80 <_svfiprintf_r+0x1b0>
 8007b38:	9b03      	ldr	r3, [sp, #12]
 8007b3a:	3307      	adds	r3, #7
 8007b3c:	f023 0307 	bic.w	r3, r3, #7
 8007b40:	3308      	adds	r3, #8
 8007b42:	9303      	str	r3, [sp, #12]
 8007b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b46:	4433      	add	r3, r6
 8007b48:	9309      	str	r3, [sp, #36]	; 0x24
 8007b4a:	e768      	b.n	8007a1e <_svfiprintf_r+0x4e>
 8007b4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b50:	460c      	mov	r4, r1
 8007b52:	2001      	movs	r0, #1
 8007b54:	e7a6      	b.n	8007aa4 <_svfiprintf_r+0xd4>
 8007b56:	2300      	movs	r3, #0
 8007b58:	3401      	adds	r4, #1
 8007b5a:	9305      	str	r3, [sp, #20]
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	f04f 0c0a 	mov.w	ip, #10
 8007b62:	4620      	mov	r0, r4
 8007b64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b68:	3a30      	subs	r2, #48	; 0x30
 8007b6a:	2a09      	cmp	r2, #9
 8007b6c:	d903      	bls.n	8007b76 <_svfiprintf_r+0x1a6>
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d0c6      	beq.n	8007b00 <_svfiprintf_r+0x130>
 8007b72:	9105      	str	r1, [sp, #20]
 8007b74:	e7c4      	b.n	8007b00 <_svfiprintf_r+0x130>
 8007b76:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b7a:	4604      	mov	r4, r0
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e7f0      	b.n	8007b62 <_svfiprintf_r+0x192>
 8007b80:	ab03      	add	r3, sp, #12
 8007b82:	9300      	str	r3, [sp, #0]
 8007b84:	462a      	mov	r2, r5
 8007b86:	4b0f      	ldr	r3, [pc, #60]	; (8007bc4 <_svfiprintf_r+0x1f4>)
 8007b88:	a904      	add	r1, sp, #16
 8007b8a:	4638      	mov	r0, r7
 8007b8c:	f3af 8000 	nop.w
 8007b90:	1c42      	adds	r2, r0, #1
 8007b92:	4606      	mov	r6, r0
 8007b94:	d1d6      	bne.n	8007b44 <_svfiprintf_r+0x174>
 8007b96:	89ab      	ldrh	r3, [r5, #12]
 8007b98:	065b      	lsls	r3, r3, #25
 8007b9a:	f53f af2d 	bmi.w	80079f8 <_svfiprintf_r+0x28>
 8007b9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ba0:	b01d      	add	sp, #116	; 0x74
 8007ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ba6:	ab03      	add	r3, sp, #12
 8007ba8:	9300      	str	r3, [sp, #0]
 8007baa:	462a      	mov	r2, r5
 8007bac:	4b05      	ldr	r3, [pc, #20]	; (8007bc4 <_svfiprintf_r+0x1f4>)
 8007bae:	a904      	add	r1, sp, #16
 8007bb0:	4638      	mov	r0, r7
 8007bb2:	f000 f9bd 	bl	8007f30 <_printf_i>
 8007bb6:	e7eb      	b.n	8007b90 <_svfiprintf_r+0x1c0>
 8007bb8:	08008666 	.word	0x08008666
 8007bbc:	08008670 	.word	0x08008670
 8007bc0:	00000000 	.word	0x00000000
 8007bc4:	0800791d 	.word	0x0800791d
 8007bc8:	0800866c 	.word	0x0800866c

08007bcc <__sfputc_r>:
 8007bcc:	6893      	ldr	r3, [r2, #8]
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	b410      	push	{r4}
 8007bd4:	6093      	str	r3, [r2, #8]
 8007bd6:	da08      	bge.n	8007bea <__sfputc_r+0x1e>
 8007bd8:	6994      	ldr	r4, [r2, #24]
 8007bda:	42a3      	cmp	r3, r4
 8007bdc:	db01      	blt.n	8007be2 <__sfputc_r+0x16>
 8007bde:	290a      	cmp	r1, #10
 8007be0:	d103      	bne.n	8007bea <__sfputc_r+0x1e>
 8007be2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007be6:	f000 bac5 	b.w	8008174 <__swbuf_r>
 8007bea:	6813      	ldr	r3, [r2, #0]
 8007bec:	1c58      	adds	r0, r3, #1
 8007bee:	6010      	str	r0, [r2, #0]
 8007bf0:	7019      	strb	r1, [r3, #0]
 8007bf2:	4608      	mov	r0, r1
 8007bf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bf8:	4770      	bx	lr

08007bfa <__sfputs_r>:
 8007bfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bfc:	4606      	mov	r6, r0
 8007bfe:	460f      	mov	r7, r1
 8007c00:	4614      	mov	r4, r2
 8007c02:	18d5      	adds	r5, r2, r3
 8007c04:	42ac      	cmp	r4, r5
 8007c06:	d101      	bne.n	8007c0c <__sfputs_r+0x12>
 8007c08:	2000      	movs	r0, #0
 8007c0a:	e007      	b.n	8007c1c <__sfputs_r+0x22>
 8007c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c10:	463a      	mov	r2, r7
 8007c12:	4630      	mov	r0, r6
 8007c14:	f7ff ffda 	bl	8007bcc <__sfputc_r>
 8007c18:	1c43      	adds	r3, r0, #1
 8007c1a:	d1f3      	bne.n	8007c04 <__sfputs_r+0xa>
 8007c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c20 <_vfiprintf_r>:
 8007c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c24:	460d      	mov	r5, r1
 8007c26:	b09d      	sub	sp, #116	; 0x74
 8007c28:	4614      	mov	r4, r2
 8007c2a:	4698      	mov	r8, r3
 8007c2c:	4606      	mov	r6, r0
 8007c2e:	b118      	cbz	r0, 8007c38 <_vfiprintf_r+0x18>
 8007c30:	6a03      	ldr	r3, [r0, #32]
 8007c32:	b90b      	cbnz	r3, 8007c38 <_vfiprintf_r+0x18>
 8007c34:	f7ff fc30 	bl	8007498 <__sinit>
 8007c38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c3a:	07d9      	lsls	r1, r3, #31
 8007c3c:	d405      	bmi.n	8007c4a <_vfiprintf_r+0x2a>
 8007c3e:	89ab      	ldrh	r3, [r5, #12]
 8007c40:	059a      	lsls	r2, r3, #22
 8007c42:	d402      	bmi.n	8007c4a <_vfiprintf_r+0x2a>
 8007c44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c46:	f7ff fd60 	bl	800770a <__retarget_lock_acquire_recursive>
 8007c4a:	89ab      	ldrh	r3, [r5, #12]
 8007c4c:	071b      	lsls	r3, r3, #28
 8007c4e:	d501      	bpl.n	8007c54 <_vfiprintf_r+0x34>
 8007c50:	692b      	ldr	r3, [r5, #16]
 8007c52:	b99b      	cbnz	r3, 8007c7c <_vfiprintf_r+0x5c>
 8007c54:	4629      	mov	r1, r5
 8007c56:	4630      	mov	r0, r6
 8007c58:	f000 faca 	bl	80081f0 <__swsetup_r>
 8007c5c:	b170      	cbz	r0, 8007c7c <_vfiprintf_r+0x5c>
 8007c5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c60:	07dc      	lsls	r4, r3, #31
 8007c62:	d504      	bpl.n	8007c6e <_vfiprintf_r+0x4e>
 8007c64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c68:	b01d      	add	sp, #116	; 0x74
 8007c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c6e:	89ab      	ldrh	r3, [r5, #12]
 8007c70:	0598      	lsls	r0, r3, #22
 8007c72:	d4f7      	bmi.n	8007c64 <_vfiprintf_r+0x44>
 8007c74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c76:	f7ff fd49 	bl	800770c <__retarget_lock_release_recursive>
 8007c7a:	e7f3      	b.n	8007c64 <_vfiprintf_r+0x44>
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	9309      	str	r3, [sp, #36]	; 0x24
 8007c80:	2320      	movs	r3, #32
 8007c82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c86:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c8a:	2330      	movs	r3, #48	; 0x30
 8007c8c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007e40 <_vfiprintf_r+0x220>
 8007c90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c94:	f04f 0901 	mov.w	r9, #1
 8007c98:	4623      	mov	r3, r4
 8007c9a:	469a      	mov	sl, r3
 8007c9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ca0:	b10a      	cbz	r2, 8007ca6 <_vfiprintf_r+0x86>
 8007ca2:	2a25      	cmp	r2, #37	; 0x25
 8007ca4:	d1f9      	bne.n	8007c9a <_vfiprintf_r+0x7a>
 8007ca6:	ebba 0b04 	subs.w	fp, sl, r4
 8007caa:	d00b      	beq.n	8007cc4 <_vfiprintf_r+0xa4>
 8007cac:	465b      	mov	r3, fp
 8007cae:	4622      	mov	r2, r4
 8007cb0:	4629      	mov	r1, r5
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	f7ff ffa1 	bl	8007bfa <__sfputs_r>
 8007cb8:	3001      	adds	r0, #1
 8007cba:	f000 80a9 	beq.w	8007e10 <_vfiprintf_r+0x1f0>
 8007cbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cc0:	445a      	add	r2, fp
 8007cc2:	9209      	str	r2, [sp, #36]	; 0x24
 8007cc4:	f89a 3000 	ldrb.w	r3, [sl]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	f000 80a1 	beq.w	8007e10 <_vfiprintf_r+0x1f0>
 8007cce:	2300      	movs	r3, #0
 8007cd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007cd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cd8:	f10a 0a01 	add.w	sl, sl, #1
 8007cdc:	9304      	str	r3, [sp, #16]
 8007cde:	9307      	str	r3, [sp, #28]
 8007ce0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ce4:	931a      	str	r3, [sp, #104]	; 0x68
 8007ce6:	4654      	mov	r4, sl
 8007ce8:	2205      	movs	r2, #5
 8007cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cee:	4854      	ldr	r0, [pc, #336]	; (8007e40 <_vfiprintf_r+0x220>)
 8007cf0:	f7f8 fa86 	bl	8000200 <memchr>
 8007cf4:	9a04      	ldr	r2, [sp, #16]
 8007cf6:	b9d8      	cbnz	r0, 8007d30 <_vfiprintf_r+0x110>
 8007cf8:	06d1      	lsls	r1, r2, #27
 8007cfa:	bf44      	itt	mi
 8007cfc:	2320      	movmi	r3, #32
 8007cfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d02:	0713      	lsls	r3, r2, #28
 8007d04:	bf44      	itt	mi
 8007d06:	232b      	movmi	r3, #43	; 0x2b
 8007d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d0c:	f89a 3000 	ldrb.w	r3, [sl]
 8007d10:	2b2a      	cmp	r3, #42	; 0x2a
 8007d12:	d015      	beq.n	8007d40 <_vfiprintf_r+0x120>
 8007d14:	9a07      	ldr	r2, [sp, #28]
 8007d16:	4654      	mov	r4, sl
 8007d18:	2000      	movs	r0, #0
 8007d1a:	f04f 0c0a 	mov.w	ip, #10
 8007d1e:	4621      	mov	r1, r4
 8007d20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d24:	3b30      	subs	r3, #48	; 0x30
 8007d26:	2b09      	cmp	r3, #9
 8007d28:	d94d      	bls.n	8007dc6 <_vfiprintf_r+0x1a6>
 8007d2a:	b1b0      	cbz	r0, 8007d5a <_vfiprintf_r+0x13a>
 8007d2c:	9207      	str	r2, [sp, #28]
 8007d2e:	e014      	b.n	8007d5a <_vfiprintf_r+0x13a>
 8007d30:	eba0 0308 	sub.w	r3, r0, r8
 8007d34:	fa09 f303 	lsl.w	r3, r9, r3
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	9304      	str	r3, [sp, #16]
 8007d3c:	46a2      	mov	sl, r4
 8007d3e:	e7d2      	b.n	8007ce6 <_vfiprintf_r+0xc6>
 8007d40:	9b03      	ldr	r3, [sp, #12]
 8007d42:	1d19      	adds	r1, r3, #4
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	9103      	str	r1, [sp, #12]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	bfbb      	ittet	lt
 8007d4c:	425b      	neglt	r3, r3
 8007d4e:	f042 0202 	orrlt.w	r2, r2, #2
 8007d52:	9307      	strge	r3, [sp, #28]
 8007d54:	9307      	strlt	r3, [sp, #28]
 8007d56:	bfb8      	it	lt
 8007d58:	9204      	strlt	r2, [sp, #16]
 8007d5a:	7823      	ldrb	r3, [r4, #0]
 8007d5c:	2b2e      	cmp	r3, #46	; 0x2e
 8007d5e:	d10c      	bne.n	8007d7a <_vfiprintf_r+0x15a>
 8007d60:	7863      	ldrb	r3, [r4, #1]
 8007d62:	2b2a      	cmp	r3, #42	; 0x2a
 8007d64:	d134      	bne.n	8007dd0 <_vfiprintf_r+0x1b0>
 8007d66:	9b03      	ldr	r3, [sp, #12]
 8007d68:	1d1a      	adds	r2, r3, #4
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	9203      	str	r2, [sp, #12]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	bfb8      	it	lt
 8007d72:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007d76:	3402      	adds	r4, #2
 8007d78:	9305      	str	r3, [sp, #20]
 8007d7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007e50 <_vfiprintf_r+0x230>
 8007d7e:	7821      	ldrb	r1, [r4, #0]
 8007d80:	2203      	movs	r2, #3
 8007d82:	4650      	mov	r0, sl
 8007d84:	f7f8 fa3c 	bl	8000200 <memchr>
 8007d88:	b138      	cbz	r0, 8007d9a <_vfiprintf_r+0x17a>
 8007d8a:	9b04      	ldr	r3, [sp, #16]
 8007d8c:	eba0 000a 	sub.w	r0, r0, sl
 8007d90:	2240      	movs	r2, #64	; 0x40
 8007d92:	4082      	lsls	r2, r0
 8007d94:	4313      	orrs	r3, r2
 8007d96:	3401      	adds	r4, #1
 8007d98:	9304      	str	r3, [sp, #16]
 8007d9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d9e:	4829      	ldr	r0, [pc, #164]	; (8007e44 <_vfiprintf_r+0x224>)
 8007da0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007da4:	2206      	movs	r2, #6
 8007da6:	f7f8 fa2b 	bl	8000200 <memchr>
 8007daa:	2800      	cmp	r0, #0
 8007dac:	d03f      	beq.n	8007e2e <_vfiprintf_r+0x20e>
 8007dae:	4b26      	ldr	r3, [pc, #152]	; (8007e48 <_vfiprintf_r+0x228>)
 8007db0:	bb1b      	cbnz	r3, 8007dfa <_vfiprintf_r+0x1da>
 8007db2:	9b03      	ldr	r3, [sp, #12]
 8007db4:	3307      	adds	r3, #7
 8007db6:	f023 0307 	bic.w	r3, r3, #7
 8007dba:	3308      	adds	r3, #8
 8007dbc:	9303      	str	r3, [sp, #12]
 8007dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dc0:	443b      	add	r3, r7
 8007dc2:	9309      	str	r3, [sp, #36]	; 0x24
 8007dc4:	e768      	b.n	8007c98 <_vfiprintf_r+0x78>
 8007dc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007dca:	460c      	mov	r4, r1
 8007dcc:	2001      	movs	r0, #1
 8007dce:	e7a6      	b.n	8007d1e <_vfiprintf_r+0xfe>
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	3401      	adds	r4, #1
 8007dd4:	9305      	str	r3, [sp, #20]
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	f04f 0c0a 	mov.w	ip, #10
 8007ddc:	4620      	mov	r0, r4
 8007dde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007de2:	3a30      	subs	r2, #48	; 0x30
 8007de4:	2a09      	cmp	r2, #9
 8007de6:	d903      	bls.n	8007df0 <_vfiprintf_r+0x1d0>
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d0c6      	beq.n	8007d7a <_vfiprintf_r+0x15a>
 8007dec:	9105      	str	r1, [sp, #20]
 8007dee:	e7c4      	b.n	8007d7a <_vfiprintf_r+0x15a>
 8007df0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007df4:	4604      	mov	r4, r0
 8007df6:	2301      	movs	r3, #1
 8007df8:	e7f0      	b.n	8007ddc <_vfiprintf_r+0x1bc>
 8007dfa:	ab03      	add	r3, sp, #12
 8007dfc:	9300      	str	r3, [sp, #0]
 8007dfe:	462a      	mov	r2, r5
 8007e00:	4b12      	ldr	r3, [pc, #72]	; (8007e4c <_vfiprintf_r+0x22c>)
 8007e02:	a904      	add	r1, sp, #16
 8007e04:	4630      	mov	r0, r6
 8007e06:	f3af 8000 	nop.w
 8007e0a:	4607      	mov	r7, r0
 8007e0c:	1c78      	adds	r0, r7, #1
 8007e0e:	d1d6      	bne.n	8007dbe <_vfiprintf_r+0x19e>
 8007e10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e12:	07d9      	lsls	r1, r3, #31
 8007e14:	d405      	bmi.n	8007e22 <_vfiprintf_r+0x202>
 8007e16:	89ab      	ldrh	r3, [r5, #12]
 8007e18:	059a      	lsls	r2, r3, #22
 8007e1a:	d402      	bmi.n	8007e22 <_vfiprintf_r+0x202>
 8007e1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e1e:	f7ff fc75 	bl	800770c <__retarget_lock_release_recursive>
 8007e22:	89ab      	ldrh	r3, [r5, #12]
 8007e24:	065b      	lsls	r3, r3, #25
 8007e26:	f53f af1d 	bmi.w	8007c64 <_vfiprintf_r+0x44>
 8007e2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e2c:	e71c      	b.n	8007c68 <_vfiprintf_r+0x48>
 8007e2e:	ab03      	add	r3, sp, #12
 8007e30:	9300      	str	r3, [sp, #0]
 8007e32:	462a      	mov	r2, r5
 8007e34:	4b05      	ldr	r3, [pc, #20]	; (8007e4c <_vfiprintf_r+0x22c>)
 8007e36:	a904      	add	r1, sp, #16
 8007e38:	4630      	mov	r0, r6
 8007e3a:	f000 f879 	bl	8007f30 <_printf_i>
 8007e3e:	e7e4      	b.n	8007e0a <_vfiprintf_r+0x1ea>
 8007e40:	08008666 	.word	0x08008666
 8007e44:	08008670 	.word	0x08008670
 8007e48:	00000000 	.word	0x00000000
 8007e4c:	08007bfb 	.word	0x08007bfb
 8007e50:	0800866c 	.word	0x0800866c

08007e54 <_printf_common>:
 8007e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e58:	4616      	mov	r6, r2
 8007e5a:	4699      	mov	r9, r3
 8007e5c:	688a      	ldr	r2, [r1, #8]
 8007e5e:	690b      	ldr	r3, [r1, #16]
 8007e60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e64:	4293      	cmp	r3, r2
 8007e66:	bfb8      	it	lt
 8007e68:	4613      	movlt	r3, r2
 8007e6a:	6033      	str	r3, [r6, #0]
 8007e6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e70:	4607      	mov	r7, r0
 8007e72:	460c      	mov	r4, r1
 8007e74:	b10a      	cbz	r2, 8007e7a <_printf_common+0x26>
 8007e76:	3301      	adds	r3, #1
 8007e78:	6033      	str	r3, [r6, #0]
 8007e7a:	6823      	ldr	r3, [r4, #0]
 8007e7c:	0699      	lsls	r1, r3, #26
 8007e7e:	bf42      	ittt	mi
 8007e80:	6833      	ldrmi	r3, [r6, #0]
 8007e82:	3302      	addmi	r3, #2
 8007e84:	6033      	strmi	r3, [r6, #0]
 8007e86:	6825      	ldr	r5, [r4, #0]
 8007e88:	f015 0506 	ands.w	r5, r5, #6
 8007e8c:	d106      	bne.n	8007e9c <_printf_common+0x48>
 8007e8e:	f104 0a19 	add.w	sl, r4, #25
 8007e92:	68e3      	ldr	r3, [r4, #12]
 8007e94:	6832      	ldr	r2, [r6, #0]
 8007e96:	1a9b      	subs	r3, r3, r2
 8007e98:	42ab      	cmp	r3, r5
 8007e9a:	dc26      	bgt.n	8007eea <_printf_common+0x96>
 8007e9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ea0:	1e13      	subs	r3, r2, #0
 8007ea2:	6822      	ldr	r2, [r4, #0]
 8007ea4:	bf18      	it	ne
 8007ea6:	2301      	movne	r3, #1
 8007ea8:	0692      	lsls	r2, r2, #26
 8007eaa:	d42b      	bmi.n	8007f04 <_printf_common+0xb0>
 8007eac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007eb0:	4649      	mov	r1, r9
 8007eb2:	4638      	mov	r0, r7
 8007eb4:	47c0      	blx	r8
 8007eb6:	3001      	adds	r0, #1
 8007eb8:	d01e      	beq.n	8007ef8 <_printf_common+0xa4>
 8007eba:	6823      	ldr	r3, [r4, #0]
 8007ebc:	6922      	ldr	r2, [r4, #16]
 8007ebe:	f003 0306 	and.w	r3, r3, #6
 8007ec2:	2b04      	cmp	r3, #4
 8007ec4:	bf02      	ittt	eq
 8007ec6:	68e5      	ldreq	r5, [r4, #12]
 8007ec8:	6833      	ldreq	r3, [r6, #0]
 8007eca:	1aed      	subeq	r5, r5, r3
 8007ecc:	68a3      	ldr	r3, [r4, #8]
 8007ece:	bf0c      	ite	eq
 8007ed0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ed4:	2500      	movne	r5, #0
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	bfc4      	itt	gt
 8007eda:	1a9b      	subgt	r3, r3, r2
 8007edc:	18ed      	addgt	r5, r5, r3
 8007ede:	2600      	movs	r6, #0
 8007ee0:	341a      	adds	r4, #26
 8007ee2:	42b5      	cmp	r5, r6
 8007ee4:	d11a      	bne.n	8007f1c <_printf_common+0xc8>
 8007ee6:	2000      	movs	r0, #0
 8007ee8:	e008      	b.n	8007efc <_printf_common+0xa8>
 8007eea:	2301      	movs	r3, #1
 8007eec:	4652      	mov	r2, sl
 8007eee:	4649      	mov	r1, r9
 8007ef0:	4638      	mov	r0, r7
 8007ef2:	47c0      	blx	r8
 8007ef4:	3001      	adds	r0, #1
 8007ef6:	d103      	bne.n	8007f00 <_printf_common+0xac>
 8007ef8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f00:	3501      	adds	r5, #1
 8007f02:	e7c6      	b.n	8007e92 <_printf_common+0x3e>
 8007f04:	18e1      	adds	r1, r4, r3
 8007f06:	1c5a      	adds	r2, r3, #1
 8007f08:	2030      	movs	r0, #48	; 0x30
 8007f0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f0e:	4422      	add	r2, r4
 8007f10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f18:	3302      	adds	r3, #2
 8007f1a:	e7c7      	b.n	8007eac <_printf_common+0x58>
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	4622      	mov	r2, r4
 8007f20:	4649      	mov	r1, r9
 8007f22:	4638      	mov	r0, r7
 8007f24:	47c0      	blx	r8
 8007f26:	3001      	adds	r0, #1
 8007f28:	d0e6      	beq.n	8007ef8 <_printf_common+0xa4>
 8007f2a:	3601      	adds	r6, #1
 8007f2c:	e7d9      	b.n	8007ee2 <_printf_common+0x8e>
	...

08007f30 <_printf_i>:
 8007f30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f34:	7e0f      	ldrb	r7, [r1, #24]
 8007f36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f38:	2f78      	cmp	r7, #120	; 0x78
 8007f3a:	4691      	mov	r9, r2
 8007f3c:	4680      	mov	r8, r0
 8007f3e:	460c      	mov	r4, r1
 8007f40:	469a      	mov	sl, r3
 8007f42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f46:	d807      	bhi.n	8007f58 <_printf_i+0x28>
 8007f48:	2f62      	cmp	r7, #98	; 0x62
 8007f4a:	d80a      	bhi.n	8007f62 <_printf_i+0x32>
 8007f4c:	2f00      	cmp	r7, #0
 8007f4e:	f000 80d4 	beq.w	80080fa <_printf_i+0x1ca>
 8007f52:	2f58      	cmp	r7, #88	; 0x58
 8007f54:	f000 80c0 	beq.w	80080d8 <_printf_i+0x1a8>
 8007f58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f60:	e03a      	b.n	8007fd8 <_printf_i+0xa8>
 8007f62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f66:	2b15      	cmp	r3, #21
 8007f68:	d8f6      	bhi.n	8007f58 <_printf_i+0x28>
 8007f6a:	a101      	add	r1, pc, #4	; (adr r1, 8007f70 <_printf_i+0x40>)
 8007f6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f70:	08007fc9 	.word	0x08007fc9
 8007f74:	08007fdd 	.word	0x08007fdd
 8007f78:	08007f59 	.word	0x08007f59
 8007f7c:	08007f59 	.word	0x08007f59
 8007f80:	08007f59 	.word	0x08007f59
 8007f84:	08007f59 	.word	0x08007f59
 8007f88:	08007fdd 	.word	0x08007fdd
 8007f8c:	08007f59 	.word	0x08007f59
 8007f90:	08007f59 	.word	0x08007f59
 8007f94:	08007f59 	.word	0x08007f59
 8007f98:	08007f59 	.word	0x08007f59
 8007f9c:	080080e1 	.word	0x080080e1
 8007fa0:	08008009 	.word	0x08008009
 8007fa4:	0800809b 	.word	0x0800809b
 8007fa8:	08007f59 	.word	0x08007f59
 8007fac:	08007f59 	.word	0x08007f59
 8007fb0:	08008103 	.word	0x08008103
 8007fb4:	08007f59 	.word	0x08007f59
 8007fb8:	08008009 	.word	0x08008009
 8007fbc:	08007f59 	.word	0x08007f59
 8007fc0:	08007f59 	.word	0x08007f59
 8007fc4:	080080a3 	.word	0x080080a3
 8007fc8:	682b      	ldr	r3, [r5, #0]
 8007fca:	1d1a      	adds	r2, r3, #4
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	602a      	str	r2, [r5, #0]
 8007fd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e09f      	b.n	800811c <_printf_i+0x1ec>
 8007fdc:	6820      	ldr	r0, [r4, #0]
 8007fde:	682b      	ldr	r3, [r5, #0]
 8007fe0:	0607      	lsls	r7, r0, #24
 8007fe2:	f103 0104 	add.w	r1, r3, #4
 8007fe6:	6029      	str	r1, [r5, #0]
 8007fe8:	d501      	bpl.n	8007fee <_printf_i+0xbe>
 8007fea:	681e      	ldr	r6, [r3, #0]
 8007fec:	e003      	b.n	8007ff6 <_printf_i+0xc6>
 8007fee:	0646      	lsls	r6, r0, #25
 8007ff0:	d5fb      	bpl.n	8007fea <_printf_i+0xba>
 8007ff2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007ff6:	2e00      	cmp	r6, #0
 8007ff8:	da03      	bge.n	8008002 <_printf_i+0xd2>
 8007ffa:	232d      	movs	r3, #45	; 0x2d
 8007ffc:	4276      	negs	r6, r6
 8007ffe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008002:	485a      	ldr	r0, [pc, #360]	; (800816c <_printf_i+0x23c>)
 8008004:	230a      	movs	r3, #10
 8008006:	e012      	b.n	800802e <_printf_i+0xfe>
 8008008:	682b      	ldr	r3, [r5, #0]
 800800a:	6820      	ldr	r0, [r4, #0]
 800800c:	1d19      	adds	r1, r3, #4
 800800e:	6029      	str	r1, [r5, #0]
 8008010:	0605      	lsls	r5, r0, #24
 8008012:	d501      	bpl.n	8008018 <_printf_i+0xe8>
 8008014:	681e      	ldr	r6, [r3, #0]
 8008016:	e002      	b.n	800801e <_printf_i+0xee>
 8008018:	0641      	lsls	r1, r0, #25
 800801a:	d5fb      	bpl.n	8008014 <_printf_i+0xe4>
 800801c:	881e      	ldrh	r6, [r3, #0]
 800801e:	4853      	ldr	r0, [pc, #332]	; (800816c <_printf_i+0x23c>)
 8008020:	2f6f      	cmp	r7, #111	; 0x6f
 8008022:	bf0c      	ite	eq
 8008024:	2308      	moveq	r3, #8
 8008026:	230a      	movne	r3, #10
 8008028:	2100      	movs	r1, #0
 800802a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800802e:	6865      	ldr	r5, [r4, #4]
 8008030:	60a5      	str	r5, [r4, #8]
 8008032:	2d00      	cmp	r5, #0
 8008034:	bfa2      	ittt	ge
 8008036:	6821      	ldrge	r1, [r4, #0]
 8008038:	f021 0104 	bicge.w	r1, r1, #4
 800803c:	6021      	strge	r1, [r4, #0]
 800803e:	b90e      	cbnz	r6, 8008044 <_printf_i+0x114>
 8008040:	2d00      	cmp	r5, #0
 8008042:	d04b      	beq.n	80080dc <_printf_i+0x1ac>
 8008044:	4615      	mov	r5, r2
 8008046:	fbb6 f1f3 	udiv	r1, r6, r3
 800804a:	fb03 6711 	mls	r7, r3, r1, r6
 800804e:	5dc7      	ldrb	r7, [r0, r7]
 8008050:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008054:	4637      	mov	r7, r6
 8008056:	42bb      	cmp	r3, r7
 8008058:	460e      	mov	r6, r1
 800805a:	d9f4      	bls.n	8008046 <_printf_i+0x116>
 800805c:	2b08      	cmp	r3, #8
 800805e:	d10b      	bne.n	8008078 <_printf_i+0x148>
 8008060:	6823      	ldr	r3, [r4, #0]
 8008062:	07de      	lsls	r6, r3, #31
 8008064:	d508      	bpl.n	8008078 <_printf_i+0x148>
 8008066:	6923      	ldr	r3, [r4, #16]
 8008068:	6861      	ldr	r1, [r4, #4]
 800806a:	4299      	cmp	r1, r3
 800806c:	bfde      	ittt	le
 800806e:	2330      	movle	r3, #48	; 0x30
 8008070:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008074:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008078:	1b52      	subs	r2, r2, r5
 800807a:	6122      	str	r2, [r4, #16]
 800807c:	f8cd a000 	str.w	sl, [sp]
 8008080:	464b      	mov	r3, r9
 8008082:	aa03      	add	r2, sp, #12
 8008084:	4621      	mov	r1, r4
 8008086:	4640      	mov	r0, r8
 8008088:	f7ff fee4 	bl	8007e54 <_printf_common>
 800808c:	3001      	adds	r0, #1
 800808e:	d14a      	bne.n	8008126 <_printf_i+0x1f6>
 8008090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008094:	b004      	add	sp, #16
 8008096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800809a:	6823      	ldr	r3, [r4, #0]
 800809c:	f043 0320 	orr.w	r3, r3, #32
 80080a0:	6023      	str	r3, [r4, #0]
 80080a2:	4833      	ldr	r0, [pc, #204]	; (8008170 <_printf_i+0x240>)
 80080a4:	2778      	movs	r7, #120	; 0x78
 80080a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80080aa:	6823      	ldr	r3, [r4, #0]
 80080ac:	6829      	ldr	r1, [r5, #0]
 80080ae:	061f      	lsls	r7, r3, #24
 80080b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80080b4:	d402      	bmi.n	80080bc <_printf_i+0x18c>
 80080b6:	065f      	lsls	r7, r3, #25
 80080b8:	bf48      	it	mi
 80080ba:	b2b6      	uxthmi	r6, r6
 80080bc:	07df      	lsls	r7, r3, #31
 80080be:	bf48      	it	mi
 80080c0:	f043 0320 	orrmi.w	r3, r3, #32
 80080c4:	6029      	str	r1, [r5, #0]
 80080c6:	bf48      	it	mi
 80080c8:	6023      	strmi	r3, [r4, #0]
 80080ca:	b91e      	cbnz	r6, 80080d4 <_printf_i+0x1a4>
 80080cc:	6823      	ldr	r3, [r4, #0]
 80080ce:	f023 0320 	bic.w	r3, r3, #32
 80080d2:	6023      	str	r3, [r4, #0]
 80080d4:	2310      	movs	r3, #16
 80080d6:	e7a7      	b.n	8008028 <_printf_i+0xf8>
 80080d8:	4824      	ldr	r0, [pc, #144]	; (800816c <_printf_i+0x23c>)
 80080da:	e7e4      	b.n	80080a6 <_printf_i+0x176>
 80080dc:	4615      	mov	r5, r2
 80080de:	e7bd      	b.n	800805c <_printf_i+0x12c>
 80080e0:	682b      	ldr	r3, [r5, #0]
 80080e2:	6826      	ldr	r6, [r4, #0]
 80080e4:	6961      	ldr	r1, [r4, #20]
 80080e6:	1d18      	adds	r0, r3, #4
 80080e8:	6028      	str	r0, [r5, #0]
 80080ea:	0635      	lsls	r5, r6, #24
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	d501      	bpl.n	80080f4 <_printf_i+0x1c4>
 80080f0:	6019      	str	r1, [r3, #0]
 80080f2:	e002      	b.n	80080fa <_printf_i+0x1ca>
 80080f4:	0670      	lsls	r0, r6, #25
 80080f6:	d5fb      	bpl.n	80080f0 <_printf_i+0x1c0>
 80080f8:	8019      	strh	r1, [r3, #0]
 80080fa:	2300      	movs	r3, #0
 80080fc:	6123      	str	r3, [r4, #16]
 80080fe:	4615      	mov	r5, r2
 8008100:	e7bc      	b.n	800807c <_printf_i+0x14c>
 8008102:	682b      	ldr	r3, [r5, #0]
 8008104:	1d1a      	adds	r2, r3, #4
 8008106:	602a      	str	r2, [r5, #0]
 8008108:	681d      	ldr	r5, [r3, #0]
 800810a:	6862      	ldr	r2, [r4, #4]
 800810c:	2100      	movs	r1, #0
 800810e:	4628      	mov	r0, r5
 8008110:	f7f8 f876 	bl	8000200 <memchr>
 8008114:	b108      	cbz	r0, 800811a <_printf_i+0x1ea>
 8008116:	1b40      	subs	r0, r0, r5
 8008118:	6060      	str	r0, [r4, #4]
 800811a:	6863      	ldr	r3, [r4, #4]
 800811c:	6123      	str	r3, [r4, #16]
 800811e:	2300      	movs	r3, #0
 8008120:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008124:	e7aa      	b.n	800807c <_printf_i+0x14c>
 8008126:	6923      	ldr	r3, [r4, #16]
 8008128:	462a      	mov	r2, r5
 800812a:	4649      	mov	r1, r9
 800812c:	4640      	mov	r0, r8
 800812e:	47d0      	blx	sl
 8008130:	3001      	adds	r0, #1
 8008132:	d0ad      	beq.n	8008090 <_printf_i+0x160>
 8008134:	6823      	ldr	r3, [r4, #0]
 8008136:	079b      	lsls	r3, r3, #30
 8008138:	d413      	bmi.n	8008162 <_printf_i+0x232>
 800813a:	68e0      	ldr	r0, [r4, #12]
 800813c:	9b03      	ldr	r3, [sp, #12]
 800813e:	4298      	cmp	r0, r3
 8008140:	bfb8      	it	lt
 8008142:	4618      	movlt	r0, r3
 8008144:	e7a6      	b.n	8008094 <_printf_i+0x164>
 8008146:	2301      	movs	r3, #1
 8008148:	4632      	mov	r2, r6
 800814a:	4649      	mov	r1, r9
 800814c:	4640      	mov	r0, r8
 800814e:	47d0      	blx	sl
 8008150:	3001      	adds	r0, #1
 8008152:	d09d      	beq.n	8008090 <_printf_i+0x160>
 8008154:	3501      	adds	r5, #1
 8008156:	68e3      	ldr	r3, [r4, #12]
 8008158:	9903      	ldr	r1, [sp, #12]
 800815a:	1a5b      	subs	r3, r3, r1
 800815c:	42ab      	cmp	r3, r5
 800815e:	dcf2      	bgt.n	8008146 <_printf_i+0x216>
 8008160:	e7eb      	b.n	800813a <_printf_i+0x20a>
 8008162:	2500      	movs	r5, #0
 8008164:	f104 0619 	add.w	r6, r4, #25
 8008168:	e7f5      	b.n	8008156 <_printf_i+0x226>
 800816a:	bf00      	nop
 800816c:	08008677 	.word	0x08008677
 8008170:	08008688 	.word	0x08008688

08008174 <__swbuf_r>:
 8008174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008176:	460e      	mov	r6, r1
 8008178:	4614      	mov	r4, r2
 800817a:	4605      	mov	r5, r0
 800817c:	b118      	cbz	r0, 8008186 <__swbuf_r+0x12>
 800817e:	6a03      	ldr	r3, [r0, #32]
 8008180:	b90b      	cbnz	r3, 8008186 <__swbuf_r+0x12>
 8008182:	f7ff f989 	bl	8007498 <__sinit>
 8008186:	69a3      	ldr	r3, [r4, #24]
 8008188:	60a3      	str	r3, [r4, #8]
 800818a:	89a3      	ldrh	r3, [r4, #12]
 800818c:	071a      	lsls	r2, r3, #28
 800818e:	d525      	bpl.n	80081dc <__swbuf_r+0x68>
 8008190:	6923      	ldr	r3, [r4, #16]
 8008192:	b31b      	cbz	r3, 80081dc <__swbuf_r+0x68>
 8008194:	6823      	ldr	r3, [r4, #0]
 8008196:	6922      	ldr	r2, [r4, #16]
 8008198:	1a98      	subs	r0, r3, r2
 800819a:	6963      	ldr	r3, [r4, #20]
 800819c:	b2f6      	uxtb	r6, r6
 800819e:	4283      	cmp	r3, r0
 80081a0:	4637      	mov	r7, r6
 80081a2:	dc04      	bgt.n	80081ae <__swbuf_r+0x3a>
 80081a4:	4621      	mov	r1, r4
 80081a6:	4628      	mov	r0, r5
 80081a8:	f7ff f8ae 	bl	8007308 <_fflush_r>
 80081ac:	b9e0      	cbnz	r0, 80081e8 <__swbuf_r+0x74>
 80081ae:	68a3      	ldr	r3, [r4, #8]
 80081b0:	3b01      	subs	r3, #1
 80081b2:	60a3      	str	r3, [r4, #8]
 80081b4:	6823      	ldr	r3, [r4, #0]
 80081b6:	1c5a      	adds	r2, r3, #1
 80081b8:	6022      	str	r2, [r4, #0]
 80081ba:	701e      	strb	r6, [r3, #0]
 80081bc:	6962      	ldr	r2, [r4, #20]
 80081be:	1c43      	adds	r3, r0, #1
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d004      	beq.n	80081ce <__swbuf_r+0x5a>
 80081c4:	89a3      	ldrh	r3, [r4, #12]
 80081c6:	07db      	lsls	r3, r3, #31
 80081c8:	d506      	bpl.n	80081d8 <__swbuf_r+0x64>
 80081ca:	2e0a      	cmp	r6, #10
 80081cc:	d104      	bne.n	80081d8 <__swbuf_r+0x64>
 80081ce:	4621      	mov	r1, r4
 80081d0:	4628      	mov	r0, r5
 80081d2:	f7ff f899 	bl	8007308 <_fflush_r>
 80081d6:	b938      	cbnz	r0, 80081e8 <__swbuf_r+0x74>
 80081d8:	4638      	mov	r0, r7
 80081da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081dc:	4621      	mov	r1, r4
 80081de:	4628      	mov	r0, r5
 80081e0:	f000 f806 	bl	80081f0 <__swsetup_r>
 80081e4:	2800      	cmp	r0, #0
 80081e6:	d0d5      	beq.n	8008194 <__swbuf_r+0x20>
 80081e8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80081ec:	e7f4      	b.n	80081d8 <__swbuf_r+0x64>
	...

080081f0 <__swsetup_r>:
 80081f0:	b538      	push	{r3, r4, r5, lr}
 80081f2:	4b2a      	ldr	r3, [pc, #168]	; (800829c <__swsetup_r+0xac>)
 80081f4:	4605      	mov	r5, r0
 80081f6:	6818      	ldr	r0, [r3, #0]
 80081f8:	460c      	mov	r4, r1
 80081fa:	b118      	cbz	r0, 8008204 <__swsetup_r+0x14>
 80081fc:	6a03      	ldr	r3, [r0, #32]
 80081fe:	b90b      	cbnz	r3, 8008204 <__swsetup_r+0x14>
 8008200:	f7ff f94a 	bl	8007498 <__sinit>
 8008204:	89a3      	ldrh	r3, [r4, #12]
 8008206:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800820a:	0718      	lsls	r0, r3, #28
 800820c:	d422      	bmi.n	8008254 <__swsetup_r+0x64>
 800820e:	06d9      	lsls	r1, r3, #27
 8008210:	d407      	bmi.n	8008222 <__swsetup_r+0x32>
 8008212:	2309      	movs	r3, #9
 8008214:	602b      	str	r3, [r5, #0]
 8008216:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800821a:	81a3      	strh	r3, [r4, #12]
 800821c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008220:	e034      	b.n	800828c <__swsetup_r+0x9c>
 8008222:	0758      	lsls	r0, r3, #29
 8008224:	d512      	bpl.n	800824c <__swsetup_r+0x5c>
 8008226:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008228:	b141      	cbz	r1, 800823c <__swsetup_r+0x4c>
 800822a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800822e:	4299      	cmp	r1, r3
 8008230:	d002      	beq.n	8008238 <__swsetup_r+0x48>
 8008232:	4628      	mov	r0, r5
 8008234:	f7ff fa7a 	bl	800772c <_free_r>
 8008238:	2300      	movs	r3, #0
 800823a:	6363      	str	r3, [r4, #52]	; 0x34
 800823c:	89a3      	ldrh	r3, [r4, #12]
 800823e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008242:	81a3      	strh	r3, [r4, #12]
 8008244:	2300      	movs	r3, #0
 8008246:	6063      	str	r3, [r4, #4]
 8008248:	6923      	ldr	r3, [r4, #16]
 800824a:	6023      	str	r3, [r4, #0]
 800824c:	89a3      	ldrh	r3, [r4, #12]
 800824e:	f043 0308 	orr.w	r3, r3, #8
 8008252:	81a3      	strh	r3, [r4, #12]
 8008254:	6923      	ldr	r3, [r4, #16]
 8008256:	b94b      	cbnz	r3, 800826c <__swsetup_r+0x7c>
 8008258:	89a3      	ldrh	r3, [r4, #12]
 800825a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800825e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008262:	d003      	beq.n	800826c <__swsetup_r+0x7c>
 8008264:	4621      	mov	r1, r4
 8008266:	4628      	mov	r0, r5
 8008268:	f000 f899 	bl	800839e <__smakebuf_r>
 800826c:	89a0      	ldrh	r0, [r4, #12]
 800826e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008272:	f010 0301 	ands.w	r3, r0, #1
 8008276:	d00a      	beq.n	800828e <__swsetup_r+0x9e>
 8008278:	2300      	movs	r3, #0
 800827a:	60a3      	str	r3, [r4, #8]
 800827c:	6963      	ldr	r3, [r4, #20]
 800827e:	425b      	negs	r3, r3
 8008280:	61a3      	str	r3, [r4, #24]
 8008282:	6923      	ldr	r3, [r4, #16]
 8008284:	b943      	cbnz	r3, 8008298 <__swsetup_r+0xa8>
 8008286:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800828a:	d1c4      	bne.n	8008216 <__swsetup_r+0x26>
 800828c:	bd38      	pop	{r3, r4, r5, pc}
 800828e:	0781      	lsls	r1, r0, #30
 8008290:	bf58      	it	pl
 8008292:	6963      	ldrpl	r3, [r4, #20]
 8008294:	60a3      	str	r3, [r4, #8]
 8008296:	e7f4      	b.n	8008282 <__swsetup_r+0x92>
 8008298:	2000      	movs	r0, #0
 800829a:	e7f7      	b.n	800828c <__swsetup_r+0x9c>
 800829c:	20000070 	.word	0x20000070

080082a0 <memmove>:
 80082a0:	4288      	cmp	r0, r1
 80082a2:	b510      	push	{r4, lr}
 80082a4:	eb01 0402 	add.w	r4, r1, r2
 80082a8:	d902      	bls.n	80082b0 <memmove+0x10>
 80082aa:	4284      	cmp	r4, r0
 80082ac:	4623      	mov	r3, r4
 80082ae:	d807      	bhi.n	80082c0 <memmove+0x20>
 80082b0:	1e43      	subs	r3, r0, #1
 80082b2:	42a1      	cmp	r1, r4
 80082b4:	d008      	beq.n	80082c8 <memmove+0x28>
 80082b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80082be:	e7f8      	b.n	80082b2 <memmove+0x12>
 80082c0:	4402      	add	r2, r0
 80082c2:	4601      	mov	r1, r0
 80082c4:	428a      	cmp	r2, r1
 80082c6:	d100      	bne.n	80082ca <memmove+0x2a>
 80082c8:	bd10      	pop	{r4, pc}
 80082ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80082d2:	e7f7      	b.n	80082c4 <memmove+0x24>

080082d4 <_sbrk_r>:
 80082d4:	b538      	push	{r3, r4, r5, lr}
 80082d6:	4d06      	ldr	r5, [pc, #24]	; (80082f0 <_sbrk_r+0x1c>)
 80082d8:	2300      	movs	r3, #0
 80082da:	4604      	mov	r4, r0
 80082dc:	4608      	mov	r0, r1
 80082de:	602b      	str	r3, [r5, #0]
 80082e0:	f7f8 fe20 	bl	8000f24 <_sbrk>
 80082e4:	1c43      	adds	r3, r0, #1
 80082e6:	d102      	bne.n	80082ee <_sbrk_r+0x1a>
 80082e8:	682b      	ldr	r3, [r5, #0]
 80082ea:	b103      	cbz	r3, 80082ee <_sbrk_r+0x1a>
 80082ec:	6023      	str	r3, [r4, #0]
 80082ee:	bd38      	pop	{r3, r4, r5, pc}
 80082f0:	20004884 	.word	0x20004884

080082f4 <_realloc_r>:
 80082f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082f8:	4680      	mov	r8, r0
 80082fa:	4614      	mov	r4, r2
 80082fc:	460e      	mov	r6, r1
 80082fe:	b921      	cbnz	r1, 800830a <_realloc_r+0x16>
 8008300:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008304:	4611      	mov	r1, r2
 8008306:	f7ff ba7d 	b.w	8007804 <_malloc_r>
 800830a:	b92a      	cbnz	r2, 8008318 <_realloc_r+0x24>
 800830c:	f7ff fa0e 	bl	800772c <_free_r>
 8008310:	4625      	mov	r5, r4
 8008312:	4628      	mov	r0, r5
 8008314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008318:	f000 f8a0 	bl	800845c <_malloc_usable_size_r>
 800831c:	4284      	cmp	r4, r0
 800831e:	4607      	mov	r7, r0
 8008320:	d802      	bhi.n	8008328 <_realloc_r+0x34>
 8008322:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008326:	d812      	bhi.n	800834e <_realloc_r+0x5a>
 8008328:	4621      	mov	r1, r4
 800832a:	4640      	mov	r0, r8
 800832c:	f7ff fa6a 	bl	8007804 <_malloc_r>
 8008330:	4605      	mov	r5, r0
 8008332:	2800      	cmp	r0, #0
 8008334:	d0ed      	beq.n	8008312 <_realloc_r+0x1e>
 8008336:	42bc      	cmp	r4, r7
 8008338:	4622      	mov	r2, r4
 800833a:	4631      	mov	r1, r6
 800833c:	bf28      	it	cs
 800833e:	463a      	movcs	r2, r7
 8008340:	f7ff f9e5 	bl	800770e <memcpy>
 8008344:	4631      	mov	r1, r6
 8008346:	4640      	mov	r0, r8
 8008348:	f7ff f9f0 	bl	800772c <_free_r>
 800834c:	e7e1      	b.n	8008312 <_realloc_r+0x1e>
 800834e:	4635      	mov	r5, r6
 8008350:	e7df      	b.n	8008312 <_realloc_r+0x1e>

08008352 <__swhatbuf_r>:
 8008352:	b570      	push	{r4, r5, r6, lr}
 8008354:	460c      	mov	r4, r1
 8008356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800835a:	2900      	cmp	r1, #0
 800835c:	b096      	sub	sp, #88	; 0x58
 800835e:	4615      	mov	r5, r2
 8008360:	461e      	mov	r6, r3
 8008362:	da0d      	bge.n	8008380 <__swhatbuf_r+0x2e>
 8008364:	89a3      	ldrh	r3, [r4, #12]
 8008366:	f013 0f80 	tst.w	r3, #128	; 0x80
 800836a:	f04f 0100 	mov.w	r1, #0
 800836e:	bf0c      	ite	eq
 8008370:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008374:	2340      	movne	r3, #64	; 0x40
 8008376:	2000      	movs	r0, #0
 8008378:	6031      	str	r1, [r6, #0]
 800837a:	602b      	str	r3, [r5, #0]
 800837c:	b016      	add	sp, #88	; 0x58
 800837e:	bd70      	pop	{r4, r5, r6, pc}
 8008380:	466a      	mov	r2, sp
 8008382:	f000 f849 	bl	8008418 <_fstat_r>
 8008386:	2800      	cmp	r0, #0
 8008388:	dbec      	blt.n	8008364 <__swhatbuf_r+0x12>
 800838a:	9901      	ldr	r1, [sp, #4]
 800838c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008390:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008394:	4259      	negs	r1, r3
 8008396:	4159      	adcs	r1, r3
 8008398:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800839c:	e7eb      	b.n	8008376 <__swhatbuf_r+0x24>

0800839e <__smakebuf_r>:
 800839e:	898b      	ldrh	r3, [r1, #12]
 80083a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80083a2:	079d      	lsls	r5, r3, #30
 80083a4:	4606      	mov	r6, r0
 80083a6:	460c      	mov	r4, r1
 80083a8:	d507      	bpl.n	80083ba <__smakebuf_r+0x1c>
 80083aa:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80083ae:	6023      	str	r3, [r4, #0]
 80083b0:	6123      	str	r3, [r4, #16]
 80083b2:	2301      	movs	r3, #1
 80083b4:	6163      	str	r3, [r4, #20]
 80083b6:	b002      	add	sp, #8
 80083b8:	bd70      	pop	{r4, r5, r6, pc}
 80083ba:	ab01      	add	r3, sp, #4
 80083bc:	466a      	mov	r2, sp
 80083be:	f7ff ffc8 	bl	8008352 <__swhatbuf_r>
 80083c2:	9900      	ldr	r1, [sp, #0]
 80083c4:	4605      	mov	r5, r0
 80083c6:	4630      	mov	r0, r6
 80083c8:	f7ff fa1c 	bl	8007804 <_malloc_r>
 80083cc:	b948      	cbnz	r0, 80083e2 <__smakebuf_r+0x44>
 80083ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083d2:	059a      	lsls	r2, r3, #22
 80083d4:	d4ef      	bmi.n	80083b6 <__smakebuf_r+0x18>
 80083d6:	f023 0303 	bic.w	r3, r3, #3
 80083da:	f043 0302 	orr.w	r3, r3, #2
 80083de:	81a3      	strh	r3, [r4, #12]
 80083e0:	e7e3      	b.n	80083aa <__smakebuf_r+0xc>
 80083e2:	89a3      	ldrh	r3, [r4, #12]
 80083e4:	6020      	str	r0, [r4, #0]
 80083e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083ea:	81a3      	strh	r3, [r4, #12]
 80083ec:	9b00      	ldr	r3, [sp, #0]
 80083ee:	6163      	str	r3, [r4, #20]
 80083f0:	9b01      	ldr	r3, [sp, #4]
 80083f2:	6120      	str	r0, [r4, #16]
 80083f4:	b15b      	cbz	r3, 800840e <__smakebuf_r+0x70>
 80083f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083fa:	4630      	mov	r0, r6
 80083fc:	f000 f81e 	bl	800843c <_isatty_r>
 8008400:	b128      	cbz	r0, 800840e <__smakebuf_r+0x70>
 8008402:	89a3      	ldrh	r3, [r4, #12]
 8008404:	f023 0303 	bic.w	r3, r3, #3
 8008408:	f043 0301 	orr.w	r3, r3, #1
 800840c:	81a3      	strh	r3, [r4, #12]
 800840e:	89a3      	ldrh	r3, [r4, #12]
 8008410:	431d      	orrs	r5, r3
 8008412:	81a5      	strh	r5, [r4, #12]
 8008414:	e7cf      	b.n	80083b6 <__smakebuf_r+0x18>
	...

08008418 <_fstat_r>:
 8008418:	b538      	push	{r3, r4, r5, lr}
 800841a:	4d07      	ldr	r5, [pc, #28]	; (8008438 <_fstat_r+0x20>)
 800841c:	2300      	movs	r3, #0
 800841e:	4604      	mov	r4, r0
 8008420:	4608      	mov	r0, r1
 8008422:	4611      	mov	r1, r2
 8008424:	602b      	str	r3, [r5, #0]
 8008426:	f7fe fd66 	bl	8006ef6 <_fstat>
 800842a:	1c43      	adds	r3, r0, #1
 800842c:	d102      	bne.n	8008434 <_fstat_r+0x1c>
 800842e:	682b      	ldr	r3, [r5, #0]
 8008430:	b103      	cbz	r3, 8008434 <_fstat_r+0x1c>
 8008432:	6023      	str	r3, [r4, #0]
 8008434:	bd38      	pop	{r3, r4, r5, pc}
 8008436:	bf00      	nop
 8008438:	20004884 	.word	0x20004884

0800843c <_isatty_r>:
 800843c:	b538      	push	{r3, r4, r5, lr}
 800843e:	4d06      	ldr	r5, [pc, #24]	; (8008458 <_isatty_r+0x1c>)
 8008440:	2300      	movs	r3, #0
 8008442:	4604      	mov	r4, r0
 8008444:	4608      	mov	r0, r1
 8008446:	602b      	str	r3, [r5, #0]
 8008448:	f7fe febc 	bl	80071c4 <_isatty>
 800844c:	1c43      	adds	r3, r0, #1
 800844e:	d102      	bne.n	8008456 <_isatty_r+0x1a>
 8008450:	682b      	ldr	r3, [r5, #0]
 8008452:	b103      	cbz	r3, 8008456 <_isatty_r+0x1a>
 8008454:	6023      	str	r3, [r4, #0]
 8008456:	bd38      	pop	{r3, r4, r5, pc}
 8008458:	20004884 	.word	0x20004884

0800845c <_malloc_usable_size_r>:
 800845c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008460:	1f18      	subs	r0, r3, #4
 8008462:	2b00      	cmp	r3, #0
 8008464:	bfbc      	itt	lt
 8008466:	580b      	ldrlt	r3, [r1, r0]
 8008468:	18c0      	addlt	r0, r0, r3
 800846a:	4770      	bx	lr

0800846c <_init>:
 800846c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800846e:	bf00      	nop
 8008470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008472:	bc08      	pop	{r3}
 8008474:	469e      	mov	lr, r3
 8008476:	4770      	bx	lr

08008478 <_fini>:
 8008478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800847a:	bf00      	nop
 800847c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800847e:	bc08      	pop	{r3}
 8008480:	469e      	mov	lr, r3
 8008482:	4770      	bx	lr
